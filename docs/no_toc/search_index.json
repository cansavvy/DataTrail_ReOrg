[["index.html", "Introduction to DataTrail About this Course", " Introduction to DataTrail 2022-04-06 About this Course This course is part of a series of courses for DataTrail. DataTrail is a no-cost, paid 14-week educational initiative for young-adult, high school and GED-graduates. DataTrail aims to equip members of underserved communities with the necessary skills and support required to work in the booming field of data science. DataTrail is a fresh take on workforce development that focuses on training both Black, Indigenous, and other people of color (BIPOC) interested in the data science industry and their potential employers. Offered by the Johns Hopkins Bloomberg School of Public Health, in partnership with local non-profits and Leanpub, DataTrail combines a mutually-intensive learning experience (MILE) with a whole-person ecosystem of support to allow aspiring data scientists and their employers to succeed. DataTrail uses mutually-intensive learning DataTrail joins aspiring data science scholars and expert-level data scientist mentors in a mutually-intensive learning experience (MILE). In the DataTrail MILE: Scholars engage in cutting-edge technical and soft skills training needed to enter the data science field. Mentors engage in anti-racism and mentorship training needed to be impactful mentors and informed colleagues on diverse data science teams. The social connections created along the way will fuel job opportunities for scholars and foster a more diverse, equitable, and inclusive climate at the mentors’ institutions. { course-completeness: 100 course-attempts: 2 default-quiz-attempts: 2 default-random-choice-order: true default-quiz-show-answers: none } "],["welcome-to-datatrail.html", "Chapter 1 Welcome to DataTrail", " Chapter 1 Welcome to DataTrail Hello and welcome! This is the first course in the DataTrail program. The goal of DataTrail is to help anyone with an internet connection and a computer learn to do data science. The program will start with the very basics of using a computer on the internet and work all the way up to doing data science and data analysis. We hope that by building this program we can help people get into the exciting tech world in one of the fastest growing and most satisfying jobs in the United States. There are only going to be more and more jobs asking for data science skills in the future. We believe that by making this career accessible to anyone we can have a positive impact on the world. 1.0.1 Course Details Before we jump into the content, we just wanted to orient you to how this course and all the courses in this program will be laid out: Courses - There are multiple courses in the DataTrail program. The first one is “Introduction to DataTrail”, which is the course you’re in right now. Lessons - Each course will consist of lessons. You’re looking at the first lesson here. It’s called “Welcome to DataTrail”. You can see a list of all the lessons in this course in the left panel. The lessons will contain text and images to walk you through every lesson of each course. Videos - At the end of each lesson there will be a link to a YouTube video. This video contains the same information as what is included in the text of the lesson; however, we know that some people learn better by listening. Sometimes you may find the videos more helpful. Sometimes you may find the text more helpful. These are included in case they are more helpful than the text to you personally. Slides - Each lesson also has link at the bottom to an accompanying slide show. Feel free to look through these slides if you find them helpful. They are the same images that were used to generate the video. Quizzes - Most lessons will have a quiz to evaluate your understanding of the material in that lesson. Successful completion of these quizzes is required for receipt of the certificate at the end of each course. Exercise - A few of the courses will have associated exercises. Think of these as larger projects. They won’t be required to receive the certificate at the end of the course; however, the skills the exercises require will be essential if you’re interested in getting a job in data science, so we highly suggest you complete them. 1.0.2 What is data science? You might not think about data very much. Most people don’t. So why is data science such a popular and growing career? And what does data science even mean? One definition of data is any information that you can store on a computer. Examples of data that you produce all the time are text messages, Facebook posts, websites you visit, things you buy with a credit card, pictures of your car on speed cameras, and information you fill out in profiles for your work, school, or community organizations. If you can take a picture of it, write about it, make a video of it, or record it on audio - then it is probably data. All of these different kinds of data are collected and saved on a computer. It used to be that measuring and storing data was expensive and hard. Now it is easy and cheap. Governments, companies, organizations, and even individual people can now collect and store more data in a few days than the entire world collected over the last few centuries. Most of the time we don’t even think about the data we are collecting. We take pictures and post them to Facebook to show our grandparents, not because we want to analyze the data in the pictures. This is true for most of the data that we create and collect, both for ourselves and for companies. We don’t do it for the data - we do it because we want to record and share information about ourselves and the world. For example, companies do it so they can keep track of their customers, and governments do it because they want to keep records of who got parking tickets. But people started to figure out that you could use that data for other purposes. When you search for “symptoms of the flu” on Google, you are just looking for information because you are sick. But the data that you are searching for flu symptoms is valuable information for companies, doctors, and even scientists. We could use that data from you to do things like show you an ad for blankets or for flu medicine. We could also use data from you and everyone else who searched for flu symptoms to find out where there are lots of flu cases. Another example is social media. You might write a post on Facebook with pictures describing your child’s birthday party. You might do this so your child’s grandparents can see pictures of her birthday. But the information in that post can again be valuable for other people. We could figure out birthdays, hobbies, interests, and who knows who from Facebook posts and likes. That information can be valuable for showing ads, for suggesting other people you might know, or for studying how humans interact with each other on birthdays and holidays. But to make data valuable we need to be able to study it and separate the interesting facts (called the “signal”) from the uninteresting information (the “noise”). One definition for data science is that. “Data science is asking a question that can be answered with data, collecting and cleaning the data, studying the data, creating models to help understand and answer the question, and sharing the answer to the question with other people.” The reason this field is growing so fast is that nearly every government, company, and organization is now collecting data. As the data have become cheaper and cheaper, the ability to analyze that data and find useful information has become a more and more valuable skill. But most people don’t have training or experience sifting through big piles of data to make interesting and valuable discoveries. The people who can do this well are called data scientists. They have a job that is exciting, interesting, and promises to be in high demand for years to come. 1.0.3 What is DataTrail? Data science is a fast-growing and exciting profession. But it can be a challenge to get into this career. Some of the biggest challenges are: Finding out that data science is even a real career Getting an education in data science can be costly and inconvenient You usually need a background in math, statistics, or computer science The equipment for data science can be costly and difficult to set up Many of the jobs are only available in major cities Most of the people who are currently data scientists have degrees in math, statistics, physics. They can afford computers that cost thousands of dollars and specialized computing software to help them do their jobs. They also mostly live in a few major cities like New York, San Francisco, Seattle, and Washington D.C. Many of these data scientists are former software engineers or other white-collar workers who moved into data science when they saw the demand for this kind of job. It is our goal with DataTrail to try to help people who would otherwise not have access to this exciting career to get into the career. To do that we need to remove some of the challenges above. So we designed this program to tackle some of the challenges that are preventing more widespread adoption of this career. DataTrail is being released as a set of online courses with a pay-what-you-can model. That means you can take the whole series of courses for free or for whatever cost you can afford. DataTrail is designed to be done entirely online using only tools you can access from a web browser. This means that you can do the entire program on a Chromebook - which you can get for as little as $150. DataTrail starts at the very basics of how to set up all of your accounts, which websites and apps to use, and simple little projects that anyone can do. The only pre-requisites are high school math/reading and the ability to use a computer. DataTrail includes resources for finding, getting, and working at data science jobs. It also includes resources for finding and working at remote data science jobs that can be done from anywhere in the world. 1.0.4 Who is this program for? DataTrail is designed for people who have a high school education and know how to use a computer. Some people who we hope the program will be useful for are: High school students People who are working on or have completed a high school education Students at community colleges Older adults who want to learn something new But the program can be completed by anyone! We hope that it will be useful for anyone who wants to learn something new about data science. This program is also focused on people who want to learn to do data science. In some cases this program may not be the most efficient way to learn about data science. If you already have a background in statistics, math, or computer science and want to jump directly to more advanced topics we have already created a Data Science Specialization on Coursera just for you. There are many jobs that require people to understand or manage a data science project. If you are a leader or executive who just wants a high level overview of what data science is all about, we have also created an Executive Data Science Specialization. Our goal here is also to create a supportive and inclusive learning experience. Data science is frustrating and slow to learn. Often the best way is to learn from other people who have discovered similar solutions or made similar mistakes. Fortunately, there are communities in data science that are cheerful, friendly and willing to help new people get involved. Throughout the program we will introduce you to these communities and hope that you will also make an effort to help your fellow students as they discover this exciting field. 1.0.5 How the program is organized This program is a series of online classes. They are designed to be used in many different ways so they can be useful for the most people possible. The courses and projects can be completed entirely online using nothing more than a web browser. The program is organized into Courses: Courses are designed to be able to be done in about a month working in your spare time or day or two working full time. You can receive a certificate for each course and all courses are based on a pay-what-you-can model. Each course consists of: Text based tutorials and lessons Slides with the images from the tutorials Video tutorials that cover the same information as the lessons Ungraded exercises to practice what you have learned Graded quizzes to measure what you have learned Projects to help you build a portfolio for showing what you’ve learned Course Set: A Course Set is a group of courses that form credentials. To keep up on the latest information about the program, courses and more go to https://www.DataTrail.org/. 1.0.6 How this course is graded This first class is designed to get you set up with the accounts you will use as you learn to become a data scientist. You will also complete your first data science project. Each lesson will have a short quiz at the end. To pass the course you need to get 70% of the questions in the course correct. If you receive more than 90% of the points across all quizzes you will pass with honors. 1.0.7 Slides and Video Slides "],["program-philosophy.html", "Chapter 2 Program Philosophy", " Chapter 2 Program Philosophy Our philosophy with building this course and this program is to try to make data science accessible to the widest audience possible. This course is part of the DataTrail series of courses. These courses are designed to tackle some of the challenges that prevent people from getting into data science in the first place. Some of those challenges are geographic - we’ll talk more about that later. Some are due to the price of education - that is why we are offering these courses as MOOCs. But one of the key barriers is that the type of computer you usually need to do data science is expensive. Chromebooks, on the other hand, are a very cheap type of computer. Chromebooks aren’t exactly like normal computers and they have a few unique characteristics: They are usually very cheap They are designed mostly to use the web You don’t “install” any software on the computer itself Instead of “apps” and “software” you simply go to websites for your work A simple way to think about it is that a Chromebook is a computer that only lets you use an internet browser like Chrome. You can’t really do much on the computer itself. Some people call this way of working - working only through the internet - “cloud computing”. It’s called cloud computing because the computer you are using most of the time is not the one sitting in front of you. You are using the internet to access tools and computers to do your work. But the physical computers doing the work are stored somewhere else - it could be nearby or on the other side of the globe. That is why people call the computers “in the cloud”. The goal of DataTrail is not that you have to use a Chromebook to finish the program, it is just that you could use a Chromebook to finish the whole program. You can finish the entire sequence of courses using any computer with an internet connection and a web browser. We took this approach because we want data science to be accessible to everyone. We have found that in earlier classes we taught online, the cost of computers, difficulties installing software, and lack of computing resources prevented students from completing our courses. We wanted to strip all those barriers away so that more students would have access to our program. We also believe that the future of data science is increasingly cloud based. So this educational choice matches a trend we see in the field that we can help you take advantage of. It is less and less likely that you will work only on your laptop as a data scientist. Through the internet you will access data and computing power so that you can magnify the impact of what you are working on. We hope to show you how to use those resources to maximize the value you can bring as a new data scientist. We do recognize that internet access is also a limiting factor for many people. We have tried to make it so that you don’t have to download data so hopefully the broadband requirements will be minimal. We hope that if internet access is a challenge for you that you can leverage the resources you have - whether they are local libraries, coffee shops, or internet cafes to complete this program. If that isn’t an option for you we’d love to hear from you and see if we can find ways to make data science accessible to everyone, everywhere. 2.0.1 Slides and Video Program Philosophy Slides "],["the-data-science-process.html", "Chapter 3 The Data Science Process", " Chapter 3 The Data Science Process As a data scientist, what steps are involved in answering a question with data? In this course, we aim to frame everything in the context of the data science process. In the following chapters and courses we will cover each part of this process more in-depth. 3.0.1 The Parts of a Data Science Project Data science process generally follow these steps: The first part of the a data science process is forming a question. Sometimes you’ll have a dataset in mind that you will explore to form this question, and other times, you will have a question that you will find some data to help you answer. Form a question - What is the question you hope to answer with data? Get the data - To answer this question you’ll need data! Clean the data - Datasets are almost never ready to analyze from the get go. As a data scientist, we’ll need to do some cleaning and set up steps to get the data where we need it before we can really dig into it. Explore and plot the data - After your data is clean, you’ll want to do some initial exploration. What do these data look like? Plots are a great way to visual your data and start to get an idea of how the data might relate to your initial question. Get stats - You can use statistics and models to try to use your data to get to the bottom of your question. Interpret and report results - Given everything you are seeing with your data, how do we interpret this? What’s our conclusion when it comes to our initial question? Data Science Progress In the upcoming chapters and courses we will further dive into each of these steps and 3.0.2 A Data Science Project Example For this example, we’re going to use an example analysis from a data scientist named Hilary Parker. Her work can be found on her blog, and the specific project we’ll be working through here is from 2013 and titled “Hilary: the most poisoned baby name in US history”. To get the most out of this lesson, click on that link and read through Hilary’s post. Once you’re done, come on back to this lesson and read through the breakdown of this post. Hilary’s blog post 3.0.2.1 Form a question When setting out on a data science project, it’s always great to have your question well-defined. Additional questions may pop up as you do the analysis, but knowing what you want to answer with your analysis is a really important first step. Hilary Parker’s question is included in bold in her post. Highlighting this makes it clear that she’s interested in answer the following question: Is Hilary/Hillary really the most rapidly poisoned name in recorded American history? 3.0.2.2 Get the data To answer this question, Hilary collected data from the Social Security website. This dataset included the 1000 most popular baby names from 1880 until 2011. 3.0.2.3 Data Analysis As explained in the blog post, Hilary was interested in calculating the relative risk for each of the 4,110 different names in her dataset from one year to the next from 1880 to 2011. By hand, this would be a nightmare. Thankfully, by writing code in R, all of which is available on GitHub, Hilary was able to generate these values for all these names across all these years. It’s not important at this point in time to fully understand what a relative risk calculation is (although Hilary does a great job breaking it down in her post!), but it is important to know that after getting the data together, the next step is figuring out what you need to do with that data in order to answer your question. For Hilary’s question, calculating the relative risk for each name from one year to the next from 1880 to 2011 and looking at the percentage of babies named each name in a particular year would be what she needed to do to answer her question. Hilary’s GitHub repo for this project 3.0.2.4 Clean the data What you don’t see in the blog post is all of the code Hilary wrote to get the data from the Social Security website, to get it in the format she needed to do the analysis, and to generate the figures. As mentioned above, she made all this code available on GitHub so that others could see what she did and repeat her steps if they wanted. 3.0.2.5 Explore and plot the data In addition to this code, data science projects often involve writing a lot of code and generating a lot of figures that aren’t included in your final results. This is part of the data science process too. Figuring out how to do what you want to do to answer your question of interest is part of the process, doesn’t always show up in your final project, and can be very time-consuming. 3.0.2.6 Get stats That said, given that Hilary now had the necessary values calculated, she began to further analyze the data. The first thing she did was look at the names with the biggest drop in percentage from one year to the next. By this preliminary analysis, Hilary was sixth on the list, meaning there were five other names that had had a single year drop in popularity larger than the one the name “Hilary” experienced from 1992 to 1993. Biggest Drop Table In looking at the results of this analysis, the first five years appeared peculiar to Hilary Parker. (It’s always good to consider whether or not the results were what you were expecting, from any analysis!) None of them seemed to be names that were popular for long periods of time. To see if this hunch was true, Hilary plotted the percent of babies born each year with each of the names from this table. What she found was that, among these “poisoned” names (names that experienced a big drop from one year to the next in popularity), all of the names other than Hilary became popular all of a sudden and then dropped off in popularity. Hilary Parker was able to figure out why most of these other names became popular, so definitely read that section of her post! The name, Hilary, however, was different. It was popular for a while and then completely dropped off in popularity. 14 most poisoned names over time To figure out what was specifically going on with the name Hilary, she removed names that became popular for short periods of time before dropping off, and only looked at names that were in the top 1000 for more than 20 years. The results from this analysis definitively show that Hilary had the quickest fall from popularity in 1992 of any female baby name between 1880 and 2011. (“Marian”’s decline was gradual over many years.) 39 most poisoned names over time, controlling for fads 3.0.2.7 Interpret and communicate results The final step in this data analysis process was, once Hilary Parker had answered her question on her computer, it was time to share it with the world. An important part of any data science project is effectively communicating the results of the project. Hilary did so by writing a wonderful blog post that communicated the results of her analysis, answered the question she set out to answer, and did so in an entertaining way. Additionally, it’s important to note that most projects build off someone else’s work. It’s really important to give those people credit. Hilary accomplishes this by: linking to a blog post where someone had asked a similar question previously linking to the Social Security website where she got the data linking to a link about where she learned about web scraping 3.0.3 What you can build using R Hilary’s work was carried out using the R programming language. Throughout the courses in this series, you’ll learn the basics of programming in R, exploring and analyzing data, and how to build reports and web applications that allow you to effectively communicate your results. To give you an example of the types of things that can be built using the R programming and suite of available tools that use R, below are a few examples of the types of things that have been built using the data science process and the R programming language - the types of things that you’ll be able to generate by the end of this series of courses. 3.0.3.1 Prediction Risk of Opioid Overdoses in Providence, RI Masters students at the University of Pennsylvania set out to predict the risk of opioid overdoses in Providence, Rhode Island. They include details on the data they used, the steps they took to clean their data, their visualization process, and their final results. While the details aren’t important now, seeing the process and what types of reports can be generated is important. Additionally, they’ve created a Shiny App, which is an interactive web application. This means that you can choose what neighborhood in Providence you want to focus on. All of this was built using R programming. Prediction of Opioid Overdoses in Providence, RI 3.0.4 Other Cool Data Science Projects The following are smaller projects than the example above, but data science projects nonetheless! In each project, the author had a question they wanted to answer and used data to answer that question. They explored, visualized, and analyzed the data. Then, they wrote blog posts to communicate their findings. Take a look to learn more about the topics listed and to see how others work through the data science project process and communicate their results. Text analysis of Trump’s tweets confirms he writes only the (angrier) Android half, by David Robinson Where to Live in the US, by Maelle Salmon Sexual Health Clinics in Toronto, by Sharla Gelfand 3.0.5 Conclusions In this lesson, we hope we’ve conveyed that sometimes data science projects are tackling difficult questions (‘Can we predict the risk of opioid overdose?’) while other times the goal of the project is to answer a question you’re interested in personally (‘Is Hilary the most rapidly poisoned baby name in recorded American History?’). In either case, the process is similar. You have to form your question, get data, explore and analyze your data, and communicate your results. With the tools you’ll learn in this series of courses, you will be able to set out and carry out your own data science projects, like the examples included in this lesson! 3.0.6 Slides and Video The Data Science Process Slides "],["how-to-learn.html", "Chapter 4 How To Learn", " Chapter 4 How To Learn In the last lesson we walked through a few interesting data science projects. Eventually, using the foundational skills learned in the courses throughout this Course Set, with practice on your own, and with other skills you pick up along the way, you’ll be completing your own, equally-awesome data science projects. However, what many people don’t tell you early on is that that path will be paved with a lot of failure. This isn’t a bad thing! Data scientists fail all the time. They write code that produces an error they have to figure out. And they regularly have to abandon projects that aren’t going to work out. Failure is part of the process. Failure Even when a project is successful, know that there was failure on the way to success! The problem is that what you see in a final blog post or a product put out by data scientists at a company is the final product. This product may be something that is functional, really important, or even beautiful. What you don’t see is all the failure that happened on the way to getting the end product. Data science projects can be a lot like social media accounts. On social media, it’s easy to only show the good stuff about one’s life. For data science projects, the end product of a data science project may be awesome, so the user will only see the good stuff. But, there’s a lot of struggle and failure that went into creating the awesome end product! success requires failure In fact, that pathway to success in data science is always full of failure. And, often, failure followed by figuring out why you just failed is a great way to learn. That doesn’t make failure easier. It will be frustrating from time to time, and figuring out why something isn’t working can be hard. That’s ok! Know that you’re not alone. Even experienced data scientists who have built really cool stuff experience lots of failure along the way. process can be difficult 4.0.1 Learning How To Learn In addition to learning the basics of data science in this course set, we also want you to learn how to learn. First and foremost, the best way to learn data science is by doing it. Throughout these lessons, copy the code you see in the lessons and try it out on your own. If you get an error, that’s ok! Google that error and try to learn from this error! In fact, we’ve got a whole lesson in this course on how to Google and a lesson in a later course in this course set on how to get help for questions when you’re programming. But, there’s more to learning how to learn than getting good at searching on the Internet (although, that is important!) 4.0.1.1 The Mindset To learn how to learn, it’s important to know just how important your mindset is. Your goal should be to answer an interesting question. Your objective is not to memorize a bunch of functions. It’s to use those functions to do something interesting. The path to accomplishing that goal may be circuitous. You may take a few steps backward and experience a setback or two before moving forward. That’s ok! mindset 4.0.1.2 The Path When carrying out a data science projects, there is always more than one way to solve a problem. Your path may be different than someone else’s path. In fact, while you may not know R code yet, the following four lines of code all produce the exact same output: mtcars %&gt;% tidyr::gather(key = variable, value = value) tidyr::gather(mtcars, key = variable, value = value) mtcars %&gt;% tidyr::gather(key = variable) mtcars_long &lt;- tidyr::gather(mtcars, key = variable) Any one of these would be a reasonable approach. We use this example to explain that there is more than one way to approach and to answer a question! Your path may be different than someone else’s. Your approaches may not be identical. And, that is more than ok! path 4.0.1.3 Asking For Help While we’ll point out where to find help when you’re stuck throughout this course set; however, it may not be obvious when to ask for help. While this is not a hard and fast rule, if you’ve been trying to find the answer to something you’re stuck on for half an hour and cannot figure it out, it may be time to post your question online for someone else to answer or to reach out directly to someone to get your question answered. During the half hour when you’re trying on your own, you should Google for the answer. If it’s a coding question, you should try running code to test to see if the fixes from Google fix your problem. If you’re getting error messages, paste those messages into Google. If after trying all of these things you’re still stuck, then you should ask for help every time. Rather than give up because you’re stuck, ask questions! Ask Questions 4.0.2 Summary Learning how to learn and asking questions may seem simple when you read this lesson, but in practice it can be tough. It’s hard to admit you don’t know something and it can be difficult sometimes to explain what it is you don’t know. Try anyway! Everyone was a beginner at some point. Those who moved from beginner to advanced did so because they learned the material, practiced and because they asked questions along the way. We’ll remind you of the information included in this lesson throughout the course set because while it’s easy to read the information here, it’s not always easy to remember it when you’re struggling! 4.0.3 Slides and Video How To Learn Slides "],["finding-help.html", "Chapter 5 Finding Help", " Chapter 5 Finding Help In data science and computer-related work in general, it is common to ask for help multiple times per day. While sometimes we ask our colleagues for help in-person, most of the time we search the web. Throughout this coursework it may surprise you just how frequently other people have run into the same problem or had the exact same question you have. Often, there is an answer that was publicly shared previously on the Internet that can help answer the very question you’re asking. There are a number of websites and discussion boards where people frequently ask and answer questions. By knowing how to effectively search the web, you can easily find these answers. 5.0.1 Searching the Internet You’ve been working on the Internet through this coursework so far on the Chrome Browser? Within every Internet browser, you have access to web search engines. These are designed to find the most relevant answers to our question. The most common web search engine is Google. In fact, Google started as a web search engine before it developed any of the other many products it offers today.We can access Google by typing www.google.com in the search bar at the top of the Chrome browser. This will bring you to the Google homepage, where you will see a simple text box and a button called Google search. Google search On the search box, as you start typing your question you will see suggestions based on what you have written so far. This is called Google auto-complete. Here is an example where Google suggests a few common searches that start with “how to find help in”. Google auto-complete The auto-complete feature can be useful because it helps us refine our search query which will lead to more relevant results and answers. Throughout this course work, we’ll be using the R programming language to complete data analyses. Thus, you will often be searching for help related to the R programming language. So, in this example, let’s select “how to find help in r” and then click on the Google search button, we will get a list of websites that are most related to our question as shown below. Google search results Google highlights some of our key terms from our search in the search results list. For example, the word help is bolded twice on the first link title “R: Getting Help with R”. Each search result includes a short title, the web link, a short extract from the website, and some of our search terms (words) highlighted. Using this information we have to decide if our search was specific enough. For example, we could have searched “how to get help”. Google search would have had no way of knowing that we had an R question specifically. Alternatively, searching “how to get help for all the questions I’ve ever had or may have in the R programming language today or tomorrow” is also not ideal. Devising a search with the fewest words that help accurately answer your questions is the goal! We will cover different ways of finding help. Throughout this coursework, you’ll likely learn that part of being a data scientist means being good at Googling. Effectively searching the web is an important skill to have. 5.0.2 Search Guidelines The best way to get a response to your question is to be able to boil it down to relatively few words. Less is usually better…it’s also faster to type too! So, when you’re Googling things, keep a few things in mind: Use the fewest words possible - full sentences and correct grammar are not necessary when searching google Be Specific - include words that are important to your specific search Know specific websites where you can get help - while Google is generally a great place to start, sometimes it can be helpful to know specific websites where you can get help. StackOverflow Basecamp and the RStudio Community will likely be helpful places as you learn to program in R. These resources will be covered in detail in a future course; however, it’s good at this point to know they exist Finding Help Slides "],["account-setup.html", "Chapter 6 Account Setup", " Chapter 6 Account Setup Before we can get started doing fun things with data we need to make sure you are set up to use all of the different accounts that you will need throughout the course. We will tell you briefly what each of these accounts is used for and how to set it up now. If you don’t know what each of these accounts is for exactly, don’t worry! We will walk you through everything you need to know. 6.0.1 Choosing a Username Choosing an appropriate username is important. Some combination of your first and last name is a good idea. For example, if your name were Jane Doe, a username such as “JaneDoe” or “Jane.Doe” would work. If the first username you attempt is taken, you can try another, similar username. In this case, maybe try “JDoe”. But, be sure that whatever name you choose, you would be comfortable sharing it with your boss or family member. Usernames with nicknames or profanity are not a good idea. What to Avoid in Usernames 6.0.2 Using a Consistent Username Remembering different usernames for different accounts is difficult. It is best to make your life easy and use the same username whenever possible. We will make your life easy by using the Google Account you set up in the next section whenever possible. When it’s not possible to log in with Google, then we suggest you try to use the same username for each account. 6.0.3 Accounts To give you an idea of where we’re going, the first account (and arguably the most important account) you set up in the next lesson will be a Google account. After that we will walk you through the steps to get you set up with accounts on: LinkedIn - this is a site to share information about yourself with employers. Twitter - this is a social media site that we will use to share our data science products and get support from the data science community. Basecamp - this is a website where you will be able to chat online with your fellow students and instructors. RStudio Cloud - this is a website where you can use Rstudio, the main tool to learn data science. GitHub - this is a website where we will share the results of our data science projects with each other and the world. Accounts 6.0.4 Slides and Video Account Setup Slides "],["google-account-setup.html", "Chapter 7 Google Account Setup", " Chapter 7 Google Account Setup The first and most important account we need to set up will be a Google account. You will need a Google account to be able to use free Google products. These Google products, such as Gmail, Google Docs, Google Sheets, and Google Slides will be useful in many of the Data Science projects you complete. The Google account will also be useful for letting you get access to other websites we will use in the program. Google Products If you already have a Google account with an appropriate username that you would like to use throughout this course, you can skip the next section and move to the “Log off Guest Chromebook” section. However, it’s probably best to create a new account dedicated to all your Data Science accounts, many of which you will set up in the next lesson. 7.0.1 Getting a Google Login To get a Google account, you will first want to open a new tab in your current Chrome session. To do this, you’ll first click on the small gray box to the right of the tab you currently have open. Google website Once this new tab is open, type in ‘www.gmail.com’ in the web address bar at the top of your Chrome session. After clicking enter, you will be brought to a Login screen. Here, you will click on “More options” Google Sign in You will then click on “Create account” to start the process of getting a Google Login. Google Create Account Begin filling in the blank spaces in the box to the right with your information. Google will alert you if the username you’ve chosen has already been taken. Once you’ve filled out all the blanks, click on “Next Step” at the bottom right. Google Blank Form You’ll be asked to read the “Privacy and Terms.” To scroll through the entire document, click on the blue arrow in the middle at the bottom of the document. After reading over the Privacy and Terms, click “I AGREE” to continue. You will then be asked to verify your account. To do so, ensure that a valid phone number for you is in the ‘Phone number’ box. Select whether you prefer to be contacted by “Text message (SMS)” or ‘Voice Call’. Click ‘Continue’ once the information has been entered. You will then be sent a verification code by text message or by phone call, depending on your choice to this question. Enter the verification code into the box on the screen and click “Continue”. Congratulations!! You now have a Google username and account! Be sure to remember your username and password! This will be used for your email address (Gmail) and all other Google products. Google Welcome! 7.0.2 Log Off Guest Chromebook At this point, you’ll want to log off the Chromebook you’re using as a Guest and sign in using your Google Username. To do so, click on ‘Guest’ at the very bottom right-hand of the screen. Click ‘Exit guest’ on the screen that pops up. This will log you off of the Chromebook so you can re-login in using your Google account. Chromebook Log Off 7.0.3 Re-Login using Google Account You will now be on the Chromebook login screen. To sign in using your Google account, click ‘Add person’ at the bottom of the login screen. Chromebook Add Person A ‘Sign in to your Chromebook’ screen will open. Chromebook Sign in Enter your new Google account name here. Click ‘Next’. Enter your password. Click ‘Next.’ You will now be logged on. Anytime you work on this Chromebook now, you will simply log in using your new Google account. 7.0.4 Slides and Video Google Account Setup Slides "],["other-accounts-setup.html", "Chapter 8 Other Accounts Setup", " Chapter 8 Other Accounts Setup In addition to having a Google username, there are a number of other accounts to which you’ll need access. By the end of this lesson, you will have set up a number of different accounts. While this may seem like a lot of work now, it will get you set up with all the accounts you’ll need throughout this series of courses. The time you spend now will pay off later! Right now, we’ll walk through each one briefly, get you set up with an account, and discuss what the account is used for. 8.0.1 LinkedIn Account LinkedIn is a social networking site for employment. Think of it as Facebook for getting a job. It allows you to put your qualifications online (like an online resume), has a space where you can look for jobs, and can put you in contact with employers. Don’t worry about the details now. Through this program, you will have the chance to set up your LinkedIn gradually. For right now, we’re just worried about getting this account set up. To begin set up, you’ll go to the web address bar in your Chrome browser. You will type www.linkedin.com and hit ‘Enter.’ LinkedIn website This will bring you to LinkedIn’s login screen. On this screen you’ll begin filling out the boxes in the middle of the screen. Be sure to use the Gmail username you just created in the last chapter when asked for your Email address. Choose a password that cannot be easily guessed by someone else. Once the four boxes are filled in, click “Join now”. LinkedIn Blank Form A screen may pop up asking you to verify that you’re not a robot. Whenever this happens, just click on the empty square box to let the computer know you’re a real person. Not a robot After clicking “Join now” (and maybe after you verify that you are a human) you will be brought to a new screen. Here, at the top, it will show you that you almost have a LinkedIn login but that first you have to confirm your email address. To do so, you will open a new tab at the top of the Chrome browser window. You will then type in ‘www.gmail.com’ and click ‘Enter.’ gmail website This will bring you to your email account. An email from ‘LinkedIn Messages’ should be there. Click on that email to open it. Verify email from LinkedIn In that email there will be a button where you can click to ‘Confirm your email’. LinkedIn Confirm Your Email This will open a new screen where your google username will be in the box already. Click ‘Continue’ on this screen. LinkedIn Continue While other boxes may pop up for you to go further on LinkedIn and get your profile set up, this is all you have to do for now. You now have a LinkedIn username and account! We will now go through similar processes for the other accounts needed in this program. 8.0.2 Twitter Account The second account you will need will be a Twitter account. You may already be familiar with Twitter; however, data scientists tend to use Twitter for work rather than socializing. Twitter is a social media platform where users can “post and interact with messages.” These messages are known as ‘tweets.’ Twitter is a great place to learn new things, connect with other data scientists, and to ask/answer questions quickly. You will need a professional Twitter account for our program. If you already have a Twitter account you use for personal tweets and communicating with friends you should still create a new, professional account where you will only post professional links and interact with other data scientists. To get a Twitter account, first type ‘www.twitter.com’ in the search bar at the top of your Chrome session. Twitter website This will bring you to a screen where at the top right you’ll want to click ‘Sign up’. Twitter sign in This will bring you to a screen that prompts you for some information and asks you to create a new password. After filling out the information, you will click ‘Sign up.’ Twitter sign in You will be brought to a screen asking for your phone number. After entering your phone number, you will click ‘Next.’ Twitter phone number This will bring you to a screen where you will choose a username. This will be what your Twitter ‘handle’ will be. For simplicity, it would be best for your Gmail username and Twitter handle to be the same (ie if your Gmail address is Jane.Doe@gmail.com, ‘Jane.Doe’ would be a great Twitter username). If that name is unavailable, choose a different, but appropriate and simple, Twitter username. Once you have chosen a Twitter username, click ‘Next’. Twitter username At this point you will be brought to a screen that will have a button saying ‘Let’s go!’ This will lead you to set up your profile further, which is not needed at this time. Instead, go to your gmail, look for an email from ‘Twitter’ and click on the email. Twitter Let’s go! In this email, there will be a ‘Confirm now’ button to click. To verify your Twitter account, click on this button. Twitter Confirm now Congrats! You now have a Twitter account! 8.0.3 Basecamp Account Slack is a place where teams of people can easily communicate and work together on a project. As a data scientist, you are often working in a group on a project. Basecamp is a place where everyone working on that project can communicate. Basecamp is where communication throughout this course will happen. You will be able to ask questions, answer questions, and communicate with others on Basecamp about the things you are learning and the projects you are working on. To get a Basecamp account, you will first open a new tab in your browser by typing ctrl and t. Once you have a new tab open, you will type ‘www.Basecamp.com’ at the top of your browser in the web address bar. Basecamp Web Address On this webpage, type your Gmail address in the ‘email address’ box, and click ‘GET STARTED.’ Basecamp Get Started! We won’t be signing into any workspaces yet; however, later in the program, when we do, you will have an account! That’s all you need to do with Basecamp for now! 8.0.4 RStudio Cloud Account As a data scientist A LOT of your work will be done in something called RStudio. In this program, you will be learning the basics of the programming language, R. R is a free programming language for statistical computing and graphics. In other words, the code you write to work with data will all be done in R. RStudio Cloud is the place (or ‘platform’) where you will type this code and make basic plots. Luckily, RStudio Cloud makes it easy to sign up. You will first go to ‘rstudio.cloud’. Note: This web address does not start with ‘www.’ rstudio.cloud web address This will bring you to a screen where you can click on ‘Get Started.’ This will bring you to a login screen where, instead of typing in your information, since you already have a Google account, just click on ‘Sign up with Google.’ rstudio.cloud sign up with Google You will be prompted to choose which Google account you want to use. Choose your professional Google account. Then, you will be brought to a screen where you will have to enter a username. Again, for simplicity, try to use the same username across all accounts. rstudio.cloud choose account Then, click ‘Create Account’ and you’re all set! You now have an RStudio Cloud account! 8.0.5 GitHub Account GitHub is a website that hosts computer code and allows for version control. We’ll get back to what version control is later, but as for now, know that GitHub is where you’ll be ‘saving’ all of the code you write. It’s also a place where you can look at other people’s code. And, throughout this program, you’ll realize that you can learn a lot from other people’s code! To get a GitHub account, first type www.github.com into the web address bar at the top of your Chrome window and hit ‘Enter’. GitHub web address You will be brought to a page where you should fill in your information. As with the other accounts, try to use the same Username if possible. Enter your Gmail Email address. And, create a password that cannot be easily guessed by others. Then, click ‘Sign up for GitHub.’ One final note about GitHub usernames in particular. This will be used for your website (which you’ll build later) and all the code you write. You’ll use GitHub a lot, so this is a case where it is particularly helpful to choose a good username, particularly one that has something to do with your name and not much else. For example, the person writing this lesson is named Shannon Ellis. Her GitHub username is “ShanEllis.” While it is possible to change your GitHub username down the line, it’s a bit of a pain, so choose wisely now! You now have a GitHub account and all of the online accounts needed for this program! 8.0.6 Slides and Video Other Accounts Setup Slides "],["your-first-data-science-project.html", "Chapter 9 Your first data science project", " Chapter 9 Your first data science project We are using this definition of data science. “Data science is asking a question that can be answered with data, collecting and cleaning the data, studying the data, creating models to help understand and answer the question, and sharing the answer to the question with other people.” Rather than try to explain data science with examples made by other people, we are going to show you the process of data science through a project that you will complete. The first step in any data science project is to come up with a question. You are taking this course on Leanpub. Leanpub is a website where you can sell books and courses. For this first project the question we are trying to answer is: “How does the price of a bestselling book relate to how much the author is charging for that book?” This question isn’t about data. It is just something we might be curious about. In this case, if you were going to write and sell a book on Leanpub you might want to know what price to pick in order to try to sell the most books. Many good data science questions don’t start out with data. They are just questions you wish that you knew the answer to. Later, you try to find out if there is data to answer your question. In this case, to answer our question, we need some information on books on the Leanpub website. If you go to https://leanpub.com/bookstore you will see a website that looks like this. Leanpub bookstore website This shows the bestseller books for the last week. If you click on one of the pictures of a book you can get some information on that book. If I click on the page for the first book “PowerShell 101” I see something like this. Powershell 101 landing page on Leanpub It will probably be a different book for you since it will be a different weekly bestseller. But you can look in the top left corner and see how many people read the book. This information is there for most books, but is sometimes missing if the author decides not to publish that number. In this case there are 1,036 total readers of this book. Number of readers for Powershell 101 Next we can find out the suggested price. This is on the right hand side and is the price the author thinks is the appropriate price for their book. In this case the suggested price is $15.99. Suggested price for Powershell 101 But one nice thing about Leanpub is that you can set up a “pay what you want” model where people can choose how much they pay for a book. When authors do this, there is also a minimum price they set for the book. If there is a minimum price it is also on the right hand side. In this case the minimum price is $7.99. Minimum price for Powershell 101 We could do this for each book and then we’d have a nice data set that would tell us something about the number of readers for a book and the price of that book. Then we could start to look at the numbers we collected and see if we see any patterns to the data that we have collected to try to answer our question. We’ll go through the steps necessary to do all of this and answer the project question “How does the price of a bestselling book relate to how much the author is charging for that book?” in the following lessons. 9.0.1 Slides and Video Your First Data Science Project Slides "],["google-sheets.html", "Chapter 10 Google Sheets", " Chapter 10 Google Sheets Google Sheets is a free, online spreadsheet program. If you’re familiar with Excel, it is similar to Excel. If you are unfamiliar with Excel, that’s ok! We’ll go through everything you need to know to get started on the project here. And, later in the program, we will go into more details to get you fully comfortable working with Google Sheets. As for right now, just know that when you have data that you want to input into a spreadsheet, Google Sheets is an ok place to start. Google Sheets is also great because you never have to worry about saving your work. If you are online, Google Sheets automatically saves your work. 10.0.1 What is a spreadsheet? A spreadsheet is a type of document where data are stored in rows and columns of a grid. Each square is referred to as a ‘cell’ in the spreadsheet. In Google Sheets (and many other spreadsheet programs like Excel), the rows are numbered (like 1,2,3,…) and the columns are labeled with capital letters (like A, B, C,…). spreadsheet If you want to talk about a specific spot on the grid you can use the number and letter corresponding to that point. For example, A2 specifies the data in cell in the first column (A) and second row (2) of the spreadsheet. spreadsheet position When you are working with data in a spreadsheet you can type directly into the spreadsheet. It is important to make sure you double check all the numbers you type since there isn’t a good way to “spellcheck” your work when you are editing a spreadsheet. We will talk a lot more in future courses about how to organize data that you have collected. Mostly we will want to collect “tidy data” which is data that has Each type of data in one column. Each data point in one row. One spreadsheet for each “kind” of data. If you have more than one spreadsheet, they should include a column in the table that allows them to be linked. Here we are only collecting one “kind” of data - just data on books. The columns will be different types of information about the books. We will collect information on the name of the book, the number of sales of that book, the minimum price of the book, and the suggested price of the book. Each of those will be in a separate column. Then, for each book, we will make a new row with the data for that book. Remember we are collecting information on the bestselling books from the last week on Leanpub. You can find the list of bestsellers here: https://leanpub.com/bookstore. Remember that if you click on the image of one book you will get something that looks like this. Powershell 101 landing page 10.0.2 Setting up your spreadsheet When we collect the information we will use the Google Sheets software to store it for us. You will need to open up another web browser. You can do this by holding down the key ctrl and pressing t. This will open up a new tab. Leave this page open and type go to Google Sheets by navigating to the website https://docs.google.com/spreadsheets/ in the new tab. You will see something like this. Google sheets home Now click on the big plus sign and you will get a new spreadsheet that will look like this. Untitled sheet If you click on the words “Untitled Spreadsheet” you can rename the spreadsheet. Type in the words “leanpub_data” to change the name of your spreadsheet. You should now have a spreadsheet that looks like this. leanpub_data sheet We are almost done setting up the spreadsheet, now we just need to label the different kinds of data we are going to collect. Start by clicking on the upper left hand cell (A1) and type “title”. This will be the column where we are going to store information on the title of the book. leanpub_data sheet with title Then move one cell to the right, click and type “readers”. This will be where we will store how many readers a book has. Move one more cell to the right type “suggested” and then one more cell and type “minimum”. Make sure your column names are not capitalized. leanpub_data sheet with headers 10.0.3 Collecting data Now you are all set to start collecting data! To do this open another new tab by holding ctrl and pressing t, then go to the webpage: https://leanpub.com/bookstore. Click on the book and write the title, number of readers, suggested, and minimum prices on a row in the spreadsheet tab. When you are doing this make sure that: There are no commas in numbers. Just leave them out. So don’t write “1,036” write “1036” instead. You don’t put dollar signs for the price, just include the number like “7.99.” If a book’s minimum price is free, enter “0” in the cell. If the book has no readers, put “0” in the cell. If the book’s author opted not to include how many readers their book has, put “NA” in the “readers” column for that book. So for me, since the first book is “PowerShell 101” after getting the data for the first book my spreadsheet will look like this. First row of data for project Continue this process, entering each book into a new row. Collect information on ten or twenty books. One book for every row. At the end you should have a data set that looks something like this. But yours will have different numbers and names in it. First complete data set 10.0.4 Checking your data Now that you’ve entered your data into the Google Sheet, we want to check for a few possible issues before moving on to make sure the data are formatted correctly. Double to make sure the following are true for the data in your spreadsheet: You have at least 11 rows with reader and minimum price information (one header row and at least 10 books included - if you have NAs anywhere, you’ll want more than 11 books) Your dollar amounts do NOT have dollar signs next to them. Your number of readers does not include any commas. If a book’s minimum price is FREE, you have put the number 0 in the cell, rather than “FREE” Checking your data This is great! You now have a question you want to answer and you have collected some data to answer that question. You are on your way to becoming a data scientist! 10.0.5 Publishing to the web Our plan is to use the data in this spreadsheet to answer our question about how the price of a bestselling book relates to how much the author is charging for that book. To do so in the next lesson, you will first have to publish the data to the web. This gives the software we’ll use in the next lesson permission to access your data. to make your sheet public, you’ll want to click on File at the top of the Google Sheet. From the drop-down menu that appears, you’ll want to click on “Publish to the web.” Publish to the web… In the window that pops up, you’ll want to click on “Publish” Publish A box will appear to confirm that you would like to publish this Google Sheet. Click “OK.” OK 10.0.6 Making the sheet public After publishing your data to the web, the last step is to make these data accessible to others who have the link.This can be done easily on a Google Sheet by clicking on “Share” in the top right-hand corner of the Google Sheet. Share A “Share with others” box will pop up. Click on “Get shareable link.” Share with others Your screen will update so that this document can now be viewed by anyone, as long as they have the link to the spreadsheet. Shareable Congrats!! You have successfully made this spreadsheet shareable and the link has been copied. You’ll be asked to paste this link in the quiz for this lesson, and we’ll use this spreadsheet link in the next lesson when you get started using RStudio Cloud, so don’t close your Google Sheets tab quite yet. 10.0.7 Slides and Video Google Sheets Slides "],["rstudio-cloud.html", "Chapter 11 RStudio Cloud", " Chapter 11 RStudio Cloud The main software that we are going to use to analyze data in this class is called R. R is a piece of software that lets you write computer code to analyze data. RStudio is a company that makes a piece of software that works with R. RStudio makes it easier to create, save, share, and work with R code and data sets. R is one of the two most popular languages for data science. We will learn a lot more about it throughout the courses, but here we are just going to use it to take a peak at the data you have created. If you have a more traditional laptop you can download and install R and RStudio on your laptop. But this class is part of our DataTrail program where we will be teaching you how to do everything through a web browser. Fortunately RStudio also offers a web-based version of their software called RStudio Cloud. In a future class we will go into much more detail about RStudio and RStudio Cloud. For now, we will just go over the basics and then use RStudio Cloud to do a very basic analysis of the data you collected in your Google Sheet. Using RStudio Cloud we will give you all the commands you need to run to complete this project. Don’t worry if this seems a little foreign, we are going to learn a lot more about it later! Just follow the steps and you’ll end up with your very first plot! 11.0.1 RStudio Cloud Basics Before we get started with the data you collected, we’ll explain the basic components of RStudio Cloud. There are four main components in an RStudio Cloud window: the scripting area, the Console, the Environment, and the Files directory. We’ll briefly discuss each part now and go into a lot more detail later. Four RStudio Cloud components First, in the top left-hand portion of the window, the scripting area is where you will see code to run in your first project in a few slides. In the future, this will be where you will type all your code. The code typed in this space can be saved and re-run later whenever you need it. Scripting RStudio Cloud In the bottom left-hand portion of the window is the Console. This is where the code you type in the scripting window above will actually run. You script what you want to happen in the scripting window. In the Console, what you wanted to happen actually happens. Console RStudio Cloud The coding language R is an object-oriented programming language. This means that when you code, objects are created. We’ll talk in detail about what that means later. However, any objects that you create while coding will be listed here in the Environment section in the top right-hand portion of the RStudio Cloud window. Environment RStudio Cloud The fourth component is at the bottom on the right-hand side of the window. Here, any files or folders you create, such as the scripts you save, will be listed. Files RStudio Cloud You’ll also note that there are multiple tabs in each of these sections. We’ll talk about the other tabs shortly; however, we’ll note now that in the bottom right-hand section, there is a “Plots” tab. If you were to click on that you would simply see an empty blank space because you haven’t made any plots yet. However, when you do the project you’ll be generating a plot. The plot you create will show up in this tab. Plots RStudio Cloud 11.0.2 Data Science Project in RStudio Cloud Now that you’re a little familiar with RStudio Cloud, we can get started on using the data you collected from Leanpub and entered into your Google Sheet spreadsheet. We’ll then be one step closer to answering the project question “How does the price of a bestselling book relate to how much the author is charging for that book?” To start working in RStudio Cloud, open up a new tab by pressing ctrl and pressing t, then copy this URL and paste it into your web browser https://bit.ly/datatrail-rstudio. If you get a log in page, press the button to “Log in with Google” just like you did when you were setting up your account. You should now see a page that looks like this. You should see a Project listed that is called “leanpub_project”. RStudio Cloud projects home page On the right-hand side, you should see an icon to “Copy” the project. Click on this icon. RStudio Cloud new project You should now see a page that looks like this across the top. RStudio Cloud project page You’ll first want to title your project. Click on ‘leanpub_project’ at the top and begin typing. Title it with ‘leanpub_project_lastname’. So, for example if your last name were Doe, the project would be titled ‘leanpub_project_doe’. You’re ready to get going! RStudio Cloud project named You are now using the RStudio software! The first thing that you should do is go to the bottom right hand side of the screen and click on the file called “leanpub_googlesheets_analysis.R”. RStudio Cloud project R file This should open up a file full of code in the top left-hand portion of the screen. Your screen should now look like this. RStudio Cloud project page with script open This file already has computer code in it. That computer code will read the data from the Google Sheet you have created and make a plot. If you scroll through this code you will see likes that start with “#”. Any time you see a line that starts with a pound sign (#) in code is a comment. This is text that is added to explain to anyone looking at the code what the code does. The rest of the text in this file tells the computer what to do. Using this code, we’ll do a few things: Get things set up. The details aren’t important now, but we’ll definitely get into them later in the series. Read in the Google Sheet you generated. Check to make sure that the data are in the correct format. Make a plot that will look at the relationship between the number of readers and minimum price for Leanpub books. In the future, you’ll learn how to write this code. For now, all the code is available to you. All you should have to do to make this work is copy the public URL for the Google Sheet that you made in the last chapter of the course. To do this, scroll through the code in the top left-hand panel of RStudio Cloud. Find the place in the computer code that says “PASTE_YOUR_GOOGLE_SHEET_LINK_HERE!”. rstudio.cloud with leanpub_googlesheets_analysis.R with PASTE_YOUR_GOOGLE_SHEET_LINK_HERE! Delete ‘PASTE_YOUR_GOOGLE_SHEET_LINK_HERE!’ and paste your URL. One thing to keep in mind is that when you copy the URL from the top of your Google Sheet OR from the blue ‘Share’ button at the top right-hand side of the screen, the link will have a little extra information at the end. After pasting the copied URL into the code, you’ll want to delete the tail-end of the URL starting at ‘/edit’. Below you will see what should be included in the pink box at top or the pink text of the link below. Everything after ‘/edit’ should be deleted. RStudio Cloud with URL edited Your code should look something like this now: RStudio Cloud with leanpub_googlesheets_analysis.R with personal URL Now you should be ready to run your code! You can do so all at once by highlighting all the code in the “leanpub_googlesheets_analysis.R” script. Then, you would find the button that says “Run” at the top of the code file and click on that button. RStudio Cloud run code You should see code running in the bottom left-hand panel. As code runs, there will be some output in red text, letting you know that the code is running. This red text does not mean anything is wrong. Note that red text in RStudio sometimes is an error, while other times it is just providing you with information. If it says error, than it’s an error. But, don’t be alarmed that red text is appearing on your screen. If the code runs, a plot should appear on the lower right hand side. RStudio Cloud with plot If a plot does not show up, there are errors. The first place to check for errors is in your ‘leanpub_googlesheets_analysis.R’ code file. Errors in code formatting in RStudio are marked by a red ‘X’ to the left of any code lines that have errors. For example, if you copy and pasted your Google Slides link but accidentally deleted the second set of quotes before the final parenthesis, a red X would show up, showing you which line has the coding error that needs to be fixed. RStudio Cloud code error in leanpub_googlesheets_analysis.R If you don’t see any red Xs in your code, there is likely an error with how you formatted your spreadsheet. The errors will appear in the bottom left-hand Console panel. Scroll through the text there to see if any of the error messages help point you to what mistake may have been made. Then, edit your spreadsheet in Google Sheets and re-run all the code again. RStudio Cloud after running the code in leanpub_googlesheets_analysis.R Once you have your plot, you have what you need to make the Google Doc and finish your project in the next lesson. Keep this tab open so that you can copy your plot in the next lesson! 11.0.3 Slides and Video RStudio Cloud Slides "],["getting-help-with-a-chromebook.html", "Chapter 12 Getting Help with a Chromebook", " Chapter 12 Getting Help with a Chromebook Chromebooks have the advantage of being very simple. You are going to do almost everything through the Internet browser. This minimizes many issues that laptop computers had historically. However, there are still issues that you will run into from time to time. We’ll discuss them below and describe where you can find help for these problems. 12.0.1 Common Issues Common Chromebook Issues generally fall under one of the following categories: Operating Systems Issues Internet Connection Problems Google Account Login All of these issues are addressed among Google’s Chromebook help pages. Chromebook Support Page Below we’ll demonstrate how to step through finding answers among this documentation; however, a few good things to consider before going to the help documentation are: did I type that web address correctly? Am I getting this error because of a mistake I made? If it is, fix that mistake and move on! Have I restarted recently (within the past week or two)? If not, now may be a good time to consider restarting to see if the issue still exists. If restarting doesn’t work or you can’t find a mistake, it may be time to consult the Chromebook Support documentation. We’ll walk through how to do that below. 12.0.2 Chromebook Support In addition to addressing common issues above, Google has a place where Chromebook users can go for support. At https://support.google.com/chromebook, you can search for answers to questions others have already asked or ask new questions. For example, if you were struggling to connect to the Internet on your Chromebook, you could first click on ‘Connect your Chromebook’ among the list of help topics. Connect your Chromebook This will expand the list to expose a number of topics of interest. If you were struggling to connect your Chromebook using Wi-Fi, you would click on ‘Connect your Chromebook to Wi-Fi’ Connect your Chromebook to Wi-Fi This would open a new web page with step-by-step instructions to help get you connected to wifi. Wi-Fi Connection Help Page If you don’t see what you’re looking for immediately among these topics, you can use the search bar at top. Search Bar By typing in the issue you are having in the search bar at the top, you can be directed to questions others have previously asked. For example, if you want to learn how to add an extension, you could type ’add extension in the search bar. As with most Google search bars, Google will try to provide helpful suggestions of topics you may be interested in. You can click on this if it matches what you’re interested in Add Extension Search Bar As before, a page with helpful steps to help solve your problem will show up. Adding Extensions Finally, if your topic isn’t here or doesn’t pop up, you can search additional questions asked in the ‘Help Forum.’ To access the help forum, click on ‘HELP FORUM’ at the top right hand of the page. Help Forum Button This will bring you to the Chromebook Central Help Forum. Chromebook Central Help Forum Always begin by searching for your topic to see if it has already been asked and answered using the search bar at the top. However, if you have a new question, you are welcome to start a new topic using the button at the top right. NEW TOPIC Clicking on the red ‘NEW TOPIC’ button will bring you to a new window where you can write out your specific question. Once you have asked your question as clearly and with as few words as possible, click ‘POST’ at the bottom right-hand of the screen so that others will be able to help you out by answering your question. New Topic Empty Box You’re now all up-to-date! 12.0.3 Slides and Video Getting Help Slides "],["google-docs.html", "Chapter 13 Google Docs", " Chapter 13 Google Docs Like Google Sheets, Google Docs is an online and free program, but instead of being used to create and edit spreadsheets, Google Docs is a place where you can create and edit word documents. Google Docs is similar to Microsoft Word, for those who are familiar. For those who aren’t, Google Docs is somewhere you can type notes or any type of text. Like Google Sheets, Google Docs will automatically save your work anytime you are connected to the Internet. 13.0.1 Getting started in Google Docs To begin, you’ll open a new tab by typing ctrl and t at the same time. In the web address bar you’ll go to ‘www.docs.google.com’. This will bring you to the homepage for Google Docs. To get started with a blank document you’ll click on the ‘Blank’ document at the left top of the screen. Google Docs Home This will open a Blank Google Doc. You’re now ready to get started working in Google Docs. Blank Google Doc 13.0.2 Using Google Docs You could just start typing in the document; however, for your Leanpub data science project, you’ll want to first change the name of the document. To do so, click at the top of the document where it says ‘Untitled document’ and type leanpub_project_lastname. So if your last name were Doe, the title of this document would be ‘leanpub_project_doe.’ Google Doc named project In this document, you’ll want to include a short summary about what question you were asking, what data you collected, and where these data were collected from in a section titled “Summary”. You’ll then want to paste your results and explain what you see in the plot you generated in a “Results” section. Finally you’ll conclude how the price of a bestselling book relates to how much the author is charging for that book in a “Conclusion” section. Google Doc Report sample In order to get the plot to paste into your report, you’ll start a new tab by typing ctrl and t at the same time and going to https://bit.ly/datatrail-rstudio. You should see your project here. You will click on that project. The analysis you already carried out will be here. To copy the plot you generated, click on ‘Export’ in the ‘Plots’ tab in the bottom right-hand of the RStudio window. Export in rstudio.cloud Then, click on ‘Copy to Clipboard.’ Copy to Clipboard Your plot will pop up in a new window. Plot in rstudio.cloud With your cursor over the plot that pops up, you will then tap the mouse keypad with two fingers at the same time to bring up a new menu. On this menu, select, ‘Copy Image.’ Copy image in rstudio.cloud You can now return to Google Docs, place your cursor where you’d like the plot to go, tap the mouse keypad with two fingers at the same time to bring up a new menu, and click ‘Paste’ to paste your plot from RStudio Cloud in your Google Doc. Paste in Google Docs Your plot will now be in your Google Doc! Plot in Google Doc 13.0.3 Sharing Your Google Doc Google Docs are helpful to data scientists because they will not only allow you to keep notes about what you have done and what you have found from your analyses, but they will allow you to share this information with people you work with, which is critically important to data scientists. So, the last thing we’ll do is get the link so that you can share this document with others. You will paste this link in the quiz at the end of this section. To get this link, you’ll click on the blue ‘Share’ button on the top right-hand section of the Google Doc. Share Google Doc A ‘Share with others’ box will pop up in the middle of the screen. Click on ‘Get shareable link.’ Shareable Link A new screen will pop up informing you that your link has been copied. This is the link you will paste by pressing ctrl and v in the quiz below when asked for your Google Doc link. Congrats! You’ve completed your first report from a data science project! 13.0.4 Slides and Video Google Docs Slides "],["google-slides.html", "Chapter 14 Google Slides", " Chapter 14 Google Slides Google Slides is the last Google product we will discuss today. It is a place to make free, online presentations. Similar to Microsoft PowerPoint, Google Slides allows users like you to create presentations to communicate findings from a project to a general audience. However, unlike PowerPoint, fortunately your work is saved automatically whenever you are online, and it’s free! As a data scientist, you are frequently required to present your findings. Sometimes that is in the form of a report, such as the Google Doc you made in the last section. However, very often, you are required to make a slide presentation. Here, we will discuss what a slide presentation is and some features of a good slide presentation before you make a brief presentation about your Leanpub data science project. Slide presentations are often used to present to a group of people. You as the analyst would be explaining what is on the slides out loud and using what is on the slides to support what you are saying. This means that every detail of the analysis does not have to be on the slide. You can use what you say out loud to fill in the details. 14.0.1 What is a slide presentation? A slide presentation is a presentation that consists of multiple slides. Each slide is there to get a smaller message across so that when all the slides are viewed in order, they tell a story. As data scientists, the story we are most often telling is the story of an analysis. This typically starts with a question, then explains the data collected to answer the question, followed by an explanation of the analysis, and concludes with the results and conclusions drawn from the analysis. Each part of this story will typically have at least one slide to explain that part of the analysis. Here we will discuss how to get started in Google Slides and then make a short presentation. 14.0.2 Presentation Guidelines We’ll go into more details later, but there are three things to keep in mind anytime you are making a slide presentation: 1. Pictures are often better than words. 2. Minimize the number of words on each slide. 3. Make the font and pictures big enough to be seen when presentation is projected. 14.0.3 Getting started in Google Slides To get started, open a new tab in your browser by holding down ctrl and t at the same time and going to ‘slides.google.com’. This will bring you to the Google Slides home page. To start a new presentation, click on the “Blank” presentation at left. Google Slides Home This will open up a blank and simple slide where you can begin to work on your presentation. Google Slides Blank presentation Similar to the Google Doc you created, you’ll want to rename this file. To do so, click on ‘Untitled presentation’ in the top left-hand corner of the presentation. Again, title this slideshow using your last name. For example, if your last name were Doe, you would title this ‘leanpub_presentation_doe.’ You’re now ready to get ready working on your first slide! Google Slides rename file 14.0.4 Making a simple presentation Keeping the presentation guidelines we discussed earlier in mind, you’ll now start to make a short (approximately 4 slides) Google Slides presentation. To begin, you’ll want a title slide. To change the title, click on the slide where it says ‘Click to add title’ and then begin to type the title of your slide presentation. Google Slides Blank slide A reasonable title would be ‘Leanpub Data Science Project.’ You’d then want to include who did the analysis as a subtitle. By clicking ‘Click to add subtitle’ you can then include your name on your presentation. Google slide with title and name If you wanted to change the font size of any of the text to make it bigger or smaller, you would highlight that text and then click on the font size at the top of the menu to display a drop down menu. Font size can be selected from this list or typed in that box directly. Change font size on Google Slides You can use a similar process of highlighting text and then selecting from the toolbar to change formatting in a number of other ways. You can change the font of the text, make the text bold, italicize the text, underline the text, or change the color of the text as well. other formatting options on slides Once you’re happy with how your title slide looks, you’ll want to start working on the next slide in your presentation. To start the next slide, you’ll click the plus sign at the top left-hand portion of your Google Slides presentation. Google Slides new slide A second slide in your presentation will appear. You can add text to this slide the same way you did on the title slide. Pictures can also be copy and pasted into your Google Slides. Google Slides second slide You will want to create a Google Slides presentation with approximately four slides summarizing the Leanpub data science project you have been working on. These slides should include * Title slide * The question you were asking in your data science project * Information about how the data were collected, where the data came from, and what data were collected * The results (including your plot!) and conclusions from your analysis 14.0.5 Sharing your Google Slides Presentation Once you’ve finished creating your Google Slides presentation, you’ll want to make sure it can be shared with others. This will be the same process as in Google Sheets and Google Docs. To make the presentation shareable, you will first click the Blue ‘Share’ button at the top right-hand side of the slide. Google Slides share A ‘Share with others’ window will pop up. Here you will click ‘Get shareable link’. This will bring up a new box indicating that your link has been copied. This is the link you will paste when asked by the quiz at the end of this lesson for your Google slides link. Google Slides shared 14.0.6 Slides and Video Google Slides Slides "],["what-is-a-chromebook.html", "Chapter 15 What is a Chromebook", " Chapter 15 What is a Chromebook This course is part of “DataTrail”; however, it is not a required course in this Course Set. While not required for completion of the DataTrail course set on Leanpub, it may be very helpful to you! It’s not required because you don’t need a Chromebook to complete the courses. The only requirement for all of these courses is an Internet browser and connection to the web. However, if you have a Chromebook and want to get better acquainted with how it works, this course is for you! Chromebooks are a very specific type of computer produced by Google. Chromebooks aren’t exactly like normal computers and they have a few unique characteristics: They are usually very cheap They are designed mostly to use the web You don’t “install” any software on the computer itself Instead of “apps” and “software” you simply go to websites for your work A simple way to think about it is that a Chromebook is a computer that only lets you use an Internet browser like Chrome. You can’t really do much on the computer itself. Some people call this way of working - working only through the Internet - “cloud computing”. It’s called cloud computing because the computer you are using most of the time is not the one sitting in front of you. You are using the Internet to access tools and computers to do your work. But the physical computers doing the work are stored somewhere else - it could be nearby or on the other side of the globe. That is why people call the computers “in the cloud”. The goal of DataTrail is not that you have to use a Chromebook to finish the program, it is just that you could use a Chromebook to finish the whole program. You can finish the entire sequence of courses using any computer with an Internet connection and a web browser. Doing everything through a web browser has a couple of advantages for a training program like this: All Chromebooks have the same system so if you log out of one Chromebook and log onto another you will always see the same system (unless there has been an update to Chrome OS that affects all Chromebooks). Since everything is stored on the Internet (sometimes called “in the cloud”) then the Chromebook will always be set up with your preferences when you log off and log back on. Everyone is using the same software through the websites, so it reduces problems that come from different people using different versions of each computer program on different operating systems. Since Chromebooks are cheap and widely used, we expect many of the students who work on the class will use actual Chromebooks. In this course we will show you a little bit about how Chromebooks work, focusing on the Chrome OS operating system. If you are used to using a “normal” computer it can take a little getting used to to adapt to a Chromebook. A couple of things that you will likely do differently are: File storage: You won’t have much room for files on the computer itself, so you won’t store them on your laptop, you will store them on “the cloud” in Google Drive or Dropbox. Software: You won’t install any software on your local computer. You will instead make accounts on different websites or “web apps” that let you use tools through your web browser. For example you wouldn’t install a Twitter app on your computer, you’d browse to the Twitter website to use that software. If you restrict yourself to only working in web browsers, doing everything will feel a little weird at first. It is sort of like writing a Haiku - a type of poem with a very specific set of rules. When you first start writing these poems it can be difficult to remember the rules. But after you get used to it the rules begin to come much more naturally. In a similar way, using a web browser for everything becomes second nature after a period of “learning the rules”. Using Chromebooks to do data science is a relatively new idea and is only possible in the last few years. But increasingly the tools for doing data science are available through the web. It is more and more common to have to use the Internet to rent computers, do analyses, or distribute your results. So by learning to do data science on a Chromebook, you are preparing for a future where most analysis is done online. 15.0.1 Slides and Video What is a Chromebook Slides "],["chrome-browser.html", "Chapter 16 Chrome Browser", " Chapter 16 Chrome Browser A Chromebook is designed to primarily be an Internet browser. In other words, it mostly will only allow you to open up websites and navigate between them. Chromebooks use Chrome OS - this is like Windows on a Microsoft computer, Android on your phone, or OS X on your Apple computer. It is the main software that runs your computer. But unlike “normal” computers Chrome OS basically only allows you to use an Internet browser. Chromebooks use Google Chrome, Google’s Internet browser. When you are using a Chromebook, almost all of the time you will be interacting with the world through Chrome. When you have opened up your Chromebook you will see something like this. Chromebook opening screen The first thing you notice is that there is nothing on the “Desktop” and that all the “apps” are linked to from the bottom of the screen. This is called the “shelf” on a Chromebook. All the apps are basically just links to websites. To open a new Chrome Browser you can either click on the Chrome icon in the lower left of the screen or you can hold down the Ctrl key and press the n key. We write this combination of keys as Ctrl+n. If you do that you’ll see a new Chrome browser pop up. Chrome browser Here you can navigate to new websites and do all the usual things. At the bottom of the page are websites you visit frequently. In Chrome if you press the little square box (or boxes) in the top right hand side it will either maximize the size of a browser to fill the whole screen, or shrink it enough that you can drag the browser around. Chrome browser Click that box until the browser doesn’t fill the whole window. You can then create a second browser window by again using the Ctrl+n command. Multiple Chrome browsers If you want to do more than one thing at once you can do it in multiple windows like this. But it is often easier to see what you are doing if you use tabs instead of windows. You can close one of the browser windows by clicking the X in the upper right hand corner or by holding down Ctrl and pressing w. Closing a window With only one browser window open you can then open a new tab by holding down the Ctrl key and pressing the t key (we will call this Ctrl+t). Opening a new tab Now you can flip back and forth between tabs by clicking on the top of the tab in the browser. You can open more tabs by pressing Ctrl+t again. You can close them by pressing the x in the top right corner of the tab or pressing Ctrl+w. Closing a tab We’ll learn more about Chrome Apps later but for now if you press one of the other icons at the bottom of the screen then it will also open a Chrome window. The only difference is that it will go to a specific website for that icon. For example if you press the little blue paper icon you will open up a Google Doc. Open a Google Doc You can see that the Google Doc app is just another web browser but sent to a specific website - the website for Google Docs. Google Docs website Signing in to Chrome using your Gmail account automatically signs you in to all Google services including YouTube, Gmail, Google Drive, and others. This is particularly useful since you don’t have to sign in to websites that use Google services when you go to them with your web browser. For example if you click on the Gmail icon - the envelope - on your shelf in the bottom left corner of the screen you’ll be taken to the Gmail website and then logged in to your account. You are already logged into Gmail when you log into your Chromebook If you open a second tab by again clicking the Google Docs icon on your shelf in the bottom left corner of your screen, you’ll have two tabs open. You can separate the two tabs into two different windows by clicking on the top part of the Google Docs tab and dragging the Google Docs tab away from the Gmail tab. You can drag to separate tabs You can also put two windows together into a single window with multiple tabs. To do this, click on the tab at the top of the Google Docs window and drag it until it is close to the tab for Gmail. When you let go both tabs will go together into a single window. You can drag to combine tabs into a single window Finally, if you want to keep track of websites you use frequently you can use bookmarking. You can “bookmark” pages that you visit regularly and Chrome will keep track of those websites for you. It’s especially helpful if you don’t want to type the full address of a webpage, visit a page frequently, or are afraid you will forget about a page you will need later. To bookmark a webpage in Chrome, simply click on the star in the address bar or pressCtrl+d on your keyboard. This will open the following window. Bookmark Menu If you click on “Done”, the bookmark will be saved to the Bookmarks bar. Next time you like to check the webpage you bookmarked without typing the address, you can click on the Chrome menu in the top-right corner, hover over Bookmarks, then click the bookmark you’d like to open. Bookmarks Those are the basics of how you manipulate windows and tabs in the Chrome browser. In the following lessons we’ll learn more about how you can use these windows to take advantage of the web through your Chromebook. 16.0.1 Slides and Video Chrome Browser Slides "],["chrome-os.html", "Chapter 17 Chrome OS", " Chapter 17 Chrome OS Your Chromebook is a little different than most normal Desktop computers. The main difference is that almost everything will be done in a Chrome web browser. For the most part, we won’t use any software that saves data directly to your computer with a few small exceptions. All this is not to say you’ll be limited in what you can do as a data scientist. Rather, your work will be done in the “cloud”, rather than on your Chromebook directly. When using a “normal” computer you usually download software that makes it possible to edit files, make presentations, use your calendar, or use social media. On a Chromebook there are three different ways that you can add new software to use. Chrome Apps: Are apps that you “add” to Chrome. The user interface is just the Chrome Browser. Very often these apps are actually just a link to a website that lets you do something like manage your calendar or write a document. But sometimes they have other offline functionality. Chrome Extensions: These are actually pieces of software that modify the way the Chrome Browser itself works. An example would be an ad blocker that prevents ads on webpages you visit in Chrome from being shown. Android Apps: Many modern Chromebooks now support installing Android Apps. These are the same apps that you would get if you had an Android phone. These apps won’t run inside of a web browser, but will function just like an app on your phone. You can think of all three of these extensions to Chrome OS as “Apps”. Not all Chromebooks support Android Apps and we want anyone to be able to complete the Cloud-based Data Science Program if they have a Chrome web browser and an Internet connection. So we will mostly focus on Chrome Apps and Extensions for this course. But if you have Android Apps that you like on your phone and have a Chromebook that supports Android Apps then you can install those apps as well as we discuss in the next section. 17.0.1 Chrome “Apps” Chrome Apps are software programs that run in the web browser. They can be as simple as a link to a website where the app runs or they can be actual pieces of software that download and run on your local Chrome computer. When you set up your Chrome OS account and log in, there will be a number of Chrome Apps that are available to you by default. Some of the most useful ones are: Google Docs: for creating, writing and editing formatted text documents (similar to Microsoft Word, but through the web browser) Google Slides: for creating, writing and editing presentations (similar to Microsoft Office, but through the web browser) Google Sheets: for creating, writing and editing spreadsheets (similar to Microsoft Excel, but through the web browser) Google Docs, Slides and Sheets are three Chrome Apps that come installed on your Chromebook We won’t go into too much detail about each of these apps here as we will cover them in a future class. For now we are just going to cover how to find these apps on your Chromebook, how to install and uninstall new ones, and how to organize them on your Chromebook. 17.0.2 Where do Chromebook Apps live? When you log into your Chromebook for the first time you can see icons for some apps at the bottom of the screen. This set of apps that are visible from the main screen are called your “Shelf”. The shelf is at the bottom of the screen Once you have installed a Chrome App or Android App you can find it by by clicking the Launcher button on the lower left hand side of the screen. If you don’t see the app among the first set of apps if you click on the arrow at the bottom of the screen you will be taken to a large list of apps installed on your Chromebook. You can click on the launcher button, then the arrow to see more apps Another way to open the screen with your apps is to click on the Launcher button on your keyboard. On most Chromebooks this is a button that looks like a magnifying glass. The keyboard launcher button looks like a magnifying glass Once you have found the App you want to open, click on it. When you click on a Chrome App the Chrome Browser will open and be directed to the website where that piece of software lives. For example if you click on the Google Docs icon (the blue piece of paper) then you will be directed to the website https://docs.google.com/document/u/0/ which lets you edit and work with your Google Docs. Clicking on the Google Docs icon will open Google Docs in the web browser. 17.0.3 The Shelf Your “Shelf” is the set of apps that are viewable on the bottom of your Desktop. You can use your Shelf to provide easy access to the Chrome Apps that you use most often. That way you don’t have to remember the exact web address for your most frequently used websites. You can “Pin” an app to the shelf by clicking with two fingers (sometimes called right clicking) on an app and then hovering over “Pin to Shelf” and letting go. For example you might want to pin your “Folder” with your local files to your Shelf so you can easily access it. Pin an app by right clicking You will then see the app on your Shelf so you can click on it to be taken directly to that Chrome App. The app is now pinned to your shelf. If you want to “Unpin” or remove an App from your Shelf you should right click on the app on the Shelf, hover over the Unpin command and let go. The App will then be removed from your shelf. The app is now pinned to your shelf. 17.0.4 Websites as Chrome Apps You can actually add any website you want to your shelf, not just the ones that have Chrome Apps. For example, we will be using http://rstudio.cloud for a lot of the work in this course. There is not a Chrome App for http://rstudio.cloud. But you can still add this website to your shelf. You can do this by first navigating to the website you want to add. Then clicking on the three dots in the upper right hand corner of the Chrome Browser. This will open up a menu and you can move your cursor until it hovers over More Tools. Then you can move your cursor over Add to shelf… and let go. Navigate to rstudio.cloud, move the cursor over More Tools, then Add to Shelf. This should then open up a window where you can name the website you are linking to. Uncheck the box that says Open as Window so that your Chromebook knows this is a website you want to open. Then click Add to put the icon onto your shelf. Uncheck Open as Window and click Add to add this website as an app. Once you are done you will see an icon for http://rstudio.cloud on your shelf so you will be able to quickly navigate to this web app in the future. The rstudio.cloud icon now appears on your shelf. 17.0.5 The Chrome Web Store and Chrome Apps Chrome Apps are pieces of software that can be run from the web browser. Sometimes you will need to download and install them on your Chromebook and sometimes they will just be an icon with a link to a particular website that lets you do some function. We already talked about how you can install any webpage as a Chrome App directly. But many Chrome Apps can also be found in the Chrome Web Store. This is a website that lets you search and find Chrome Apps for your Chromebook, similar to Google Play for Android Apps or the App Store for Apple apps. You can get to the Chrome Web Store by clicking on the launcher button, then finding and clicking the Web Store icon. Open the Chrome Web Store by clicking on the Web Store Icon. You will be taken to the Chrome Web Store in your browser. You can filter by whether they are free, built by Google, or are able to run offline. The first thing we will do is click on Apps to ensure that we are searching only among Chrome Apps. As an example we will find and install the StackEdit app, which is useful for writing markdown documents that you will use throughout the Cloud-based Data Science courses. One nice feature of StackEdit is that it can be used even when your Chromebook is offline. To find the app, we will search for StackEdit and then click return. Search for stackedit on the Chrome Web Store. This will show two options one as a Chrome App and one as a Chrome Extension. We will select the app version and click Add to Chrome. This will bring up a dialogue box that asks if you would like to add Stackedit. Click on Add and the app will be installed on your Chromebook. Click add to Chrome and then Add to add the app to your Chrome browser. You can then click the Launcher button in the lower left to see that the app has been installed. StackEdit is now installed. If you click on the StackEdit icon you’ll be taken to the app, which you can see is also run in the Chrome web browser, just like any website you would visit. The difference is that this website will let you write and save Markdown files. StackEdit runs in the web browser. 17.0.6 Chrome Extensions Chrome extensions are software programs that modify the way that the Chrome browser itself works. You can find and install them through the Chrome Web Store just like you can with Chrome Apps but they look and function slightly differently. Sometimes these extensions may do something very simple (like show you a funny picture when you open a new tab) or they might do something very important (like managing your passwords). As an example we will install the Pocket Chrome extension. Pocket is an extension that lets you save a particular website or essay for reading when your Chromebook is offline. So if you know you will need to read a document you can save it to Pocket before you are traveling somewhere where you will not have Internet access and then retrieve and read it even when you are offline. You can open the Chrome Web Store just as we did previously and search for Pocket under the Extensions window. Once you have found the extension you want, you can click on the extension and it will open a page where you can click on Add to Chrome if you do that and click add the extension will be added. Click Add to Chrome to add the Pocket extension. Chrome Extensions often show up as a small icon in the top right hand side of the Chrome Browser. You can click on the icon to bring up the Pocket extension - which will also come up as a web page in your web browser. The Pocket extension comes up as a web browser. If you sign up for the Pocket extension you can then navigate to a web page that you are interested in saving for later and click the Pocket icon in the top right hand side of the screen. Click the Pocket icon to save the webpage This will save the page for later so that you can read it offline. The page is now saved for offline reading Extensions, like Chrome Web Apps, can improve the way that Chrome OS functions in the same way that installing software on your local computer works. Extensions and Apps help you use your Chromebook to accomplish tasks that would not otherwise be possible. 17.0.7 Slides and Video Chromebook OS Slides "],["android-apps.html", "Chapter 18 Android Apps", " Chapter 18 Android Apps Android is an operating system that was made available by Google and now powers most of the mobile phones in the world. Android is not the same thing as Chrome OS even though the two systems are both produced by Google. Until recently the only kind of apps you could install on a Chromebook were Apps and Extensions as we discussed in the last section. But Google has started to support the use of Android Apps on a small but growing number of Chromebooks. If you have one of these Chromebooks it is now possible to use the same apps you use on your phone on your Chromebook. Android Apps are now available on Chromebooks Chromebook Apps are stored in the same place on your Chromebook as Chrome Web Apps and Extensions. In fact, just by looking at the Shelf or your list of Apps you won’t be able to tell which are Chrome Apps and which are Android Apps. So to get started, we do the same thing as we did in the previous section, click on the Launcher button to show a list of potential apps. You can again click the arrow to view more apps if the Play Store does not appear among the first set of apps Find the Google Play App The first time you click on ‘Play Store’ will bring you to the Google Play Terms of Service. After reading the Terms of Service, if you agree to the Terms click on ‘Agree’ in the bottom right-hand side of the window. Google Play Terms of Service The following window will ask you to accept the Google Play Terms of Service. Here, you will need to click ‘ACCEPT’ to get to Google Play’s apps if you agree with the Terms of Service. You must accept terms of service to install Android Apps This will bring up Google Play where you can install Android Apps. This is the same place you would go if you have an Android Phone and you were going to install an App on your phone. The Google Play Store We will install the Basecamp app that can be used for communication with teams and is frequently used by data scientists. First we search for the app in the Google Play Store. Search for the Basecamp App When you find the Basecamp app you will be taken to a page where you can click Install to install the app. You may be asked to agree to terms and Google Play may ask you to enter payment details. However, if you are only going to use free apps you can find the small grey Skip box and skip over entering this information. Once you install the app it will appear as any other app on your Chromebook. Install the Basecamp App However one key difference is that if you click on the Basecamp icon and open the app then you will see that it does not open in a browser window. Click on the Basecamp icon to open Basecamp Android Apps are not Chrome Apps so are not accessed through the web browser. In this case, they will open in a separate window. Even though they don’t open in a web browser, many apps, including Basecamp, still require an Internet connection to be fully functional. Others may be more useful when used entirely offline. The app is working in a window, but not a Chrome Browser 18.0.1 Slides and Video Android Apps Slides "],["chromebook-shortcuts.html", "Chapter 19 Chromebook Shortcuts", " Chapter 19 Chromebook Shortcuts When we discussed the Chrome Browser we learned a couple of keyboard shortcuts. Keyboard shortcuts are combination of keys that make your Chromebook do certain functions. For example, if you hold the Crtl key and press the n key you get a new Chrome window. When we want to tell you to press this key combination we will use the symbols Ctrl+n to describe what you are doing. In our Chrome Browser lesson we taught you the commands: Ctrl+n - open a new Chrome window Ctrl+t - open a new Chrome tab Ctrl+w - close an open Chrome Window or tab Ctrl+d - this will bookmark a page There are in fact a large number of keyboard shortcuts. Depending on what you do most often with your Chromebook some may be more or less useful to you. Here we will highlight a few that we use frequently and will come in handy for you during your data science career. To understand these key combinations first it is useful to know what some of the symbols on your Chromebook keyboard represent. The arrows in the top left hand corner take you back to the previous webpage you visited in a Chrome Tab and forward to the next page you visited. We will call them the forward and back keys. The back and forward keys are the arrows in the upper left of the keyboard. The curly key next to that refreshes the page you are currently visiting. Sometimes if you make an update to a webpage you are building and want to see the update you will need to refresh the page. We will call this the refresh key. The refresh key is the curly key in the upper left of the keyboard. The full screen key will take a tab you are working on and make that tab fill the whole screen. This will hide your shelf and hide the bookmarks and search bar at the top of your screen. When working on coding or when you feel you don’t have enough screen space this button can be helpful. You can shrink the browser window back to the normal size by pressing the full screen button again. We will call this the fullscreen key. The full screen key is the key with the window with two arrows in the upper middle of the keyboard. The button next to that is the show all windows button. This button will show you all the windows you have open, including Chrome Windows and any Android Apps you might have open. We will call this button the showwindows button. The show windows key is the key with the window and two lines next to it in the upper middle of the keyboard. The screen lock key in the upper right hand corner will lock your Chromebook when you aren’t using it and if you set up your settings to require a password, then you will need to re-enter your password to re-open your Chromebook. When working on data science projects where the data is sensitive it is a good idea to lock your Chromebook whenever you aren’t using it. We will call this the lock key. The lock key is the key with the lock in the upper right of the keyboard. You will recall that the Launcher key is the key with the magnifying glass on the left hand side of the keyboard. We will call this the launcher key. The launcher key is the magnifying glass on the right of the keyboard. 19.0.1 Taking Screenshots on a Chromebook Using these keys we can now consider some of the more useful keyboard shortcuts on your Chromebook. This will definitely be a partial list, you can learn about the rest of the shortcuts from the Chromebook help documentation. One of the most useful things to know how to do is to be able to take a screenshot. You will use this when you are trouble shooting problems in the course frequently. There are two ways to take a screenshot. The first is to use the command ctrl+showwindows. If you use this key combination you will take a picture of everything that appears on the screen. This first will appear as a pop-up box in the lower right hand corner. The screenshot appears as a dialog in the lower right. You can also open the Files App and see that the screenshot has been stored on your computer. All screenshots you take will automatically stored in Files on your computer. The screenshot appears is stored in the Files App. If you click twice quickly on the screenshot file it will open and you can see it looks exactly like what was on your screen when you took the screenshot. The screenshot is a picture of whatever was on your screen. Sometimes, rather than taking a picture of the whole screen you will want to take a picture of just a small part of the screen. There is a second screenshot command that lets you do this. If you press crtl+shift+showwindows then your screen will turn a shade darker and you will see your cursor is replaced with a bullseye icon. If you click and then drag, you can select only part of your screen to take a screenshot of. For example you could take a screenshot of just the upper right hand corner of the Files App. A targeted screenshot is also stored as a png in the Files App. This screenshot also will pop up in the lower right hand corner of your screen and then appear in your Files App. A targeted screenshot only takes a picture of part of the screen. 19.0.2 Zooming in and out Another set of useful shortcuts is to zoom your screen in and zoom your screen out. To zoom in, you can hold down ctrl and press the key that has the plus and equals on it (near the top right hand side of the keyboard). To zoom out, you can hold the ctrl key and press the key with the minus and underscore key on it (near the top right hand side of the keyboard). This will allow you to make the text on websites bigger and smaller to ease reading. For example on the website https://rstudio.cloud/ if you press ctrl+plus/equals four times you will zoom in 175%. If you use the zoom shortcut the text on a webpage increases in size. 19.0.3 Finding a word on a page Sometimes you will need to search a webpage for a specific word or phrase. To do this you can press ctrl+f and a box will pop up. You can then search for the specific word, for example we could search for the word “teach” on https://rstudio.cloud/. You can find a word or phrase on a page using the find shortcut. 19.0.4 Text formatting shortcuts Many of the text formatting shortcuts are nearly the same as on other types of computers. We will review them briefly here as they will be very useful when editing documents, presentations, and code. If you have used computers before you may already know these. ctrl+c - copies selected text ctrl+v - pastes the selected text ctrl+x - cuts the selected text and copies it so you can paste it elsewhere ctrl+z - undoes the previous action you did when editing a file One thing that is somewhat unusual about a Chromebook is that there is not a caps lock key. If you want to turn on caps lock you will need to use the command alt+launcher. To turn caps lock back off again you can simply click on the shift key. 19.0.5 Slides and Video Chromebook Shortcuts Slides "],["where-are-files-stored.html", "Chapter 20 Where Are Files Stored?", " Chapter 20 Where Are Files Stored? Chromebooks operate on the basic idea that you will store everything in the cloud. And, this set of courses is designed with this principle in mind. So most files will be stored online and used through your web browser. There is not a lot of room to store files on most Chromebooks, so we will want to store all of your documents, presentations, spreadsheets, and data on Google Drive or Dropbox. There is local storage on your Chromebook where you can place files. For example, we saw that when you take a screenshot with your Chromebook the file is saved onto your Chromebook directly, not onto the cloud. This can be particularly useful when people send you a file in an email and you want to eventually store it online. You might need to download it first to upload it again to one of the online file storage systems. 20.0.1 Where is the local storage? Files stored on your Chromebook can be found using the Files App. You can find them by first clicking on the Launcher circle at the bottom left-hand corner of your screen. To see all of the apps available on your Chromebook you will expand the selection from your Launcher by clicking on the ‘^’ (up arrow) symbol on your screen. Launcher Screen You can then find the Files App which looks like a blue circle with a white file folder on it. As we discussed in a previous section you can pin this app to your Shelf by clicking with two finders, then moving the cursor over Pin to Shelf and letting go. It is important to pin this app to your shelf since it will be one of the apps you use most regularly. Pin the Files App to your Shelf. If you click on the Files App you will see all of the files you have downloaded from the Internet, any screenshots you may have taken, and any other files you have stored locally on your computer. The Files App shows you all of your files. These files are all stored in a folder called “Downloads” if you click on the Downloads button you will only see the files that are actually stored on your Chromebook. These files will be available whether you are connected to the Internet or not. The Downloads folder shows you all of the files on your Chromebook. One challenge is that most Chromebooks don’t have much space on them to store data and files. You can check how much space is left on your Chromebook by clicking the three dots on the upper right hand side of the Files app. The Files options lets you see how much storage you have left. Despite the limitation on local storage you can also store some of your files and data on the cloud. We will talk about different options for this depending on whether you are storing code, data, or other files later. But in general, you have access to all of your files stored on the “cloud” here as well. For example, everything in Google Drive is also available from the Files App. These files aren’t saved to your computer, they are saved on the Internet, so you will need an Internet connection to be able to access them. To see these files click on “Google Drive” on the left hand side of the Files App. Google Drive files can be accessed from the Files App If you want to free up space on your Chromebook, one thing that you can do is transfer some of your files from your Downloads folder to your Google Drive. You can do that by clicking on a file in your Downloads folder, holding down, and dragging it to Google Drive. This will upload the file to the cloud. You can drag files from Download to Google Drive to upload them. Then if you delete it from your Downloads folder, it will only be stored on the web and will free up space on your Chromebook. To delete a file you can click with two fingers on the file. This will bring up options for different things you can do with the file. If you move your cursor down to delete and let go, you will be asked if you want to delete the file. If you say yes, the file will be permanently deleted from your Chromebook. Click with two fingers on a file and then move the cursor over delete to rename the file. You might also find that the names of files aren’t easy to follow. In a later course we will cover file naming for data science. But for now, it is useful to know how to change the name of a file. You start by again clicking with two fingers on the file. Then you can drag the cursor over “Rename” and let go. Click with two fingers on a file and then move the cursor over delete to delete the file. This will place your cursor on the file name which will now be editable. If you type in the new name and hit return the file will be renamed. Type in the new name and hit return, but don’t change the extension. Usually it is a good idea to leave the file extension the same even if you rename a file. The extension is all of the characters after the period that tells your computer what type of file it is - a code file, a data file, a text file, or something else. For example if your file is named “file.png” then the extension is “.png”. So you might change the file name to something like “new_file.png” but you would want to leave the “.png” at the end. 20.0.2 Slides and Video File Storage Slides "],["working-offline.html", "Chapter 21 Working Offline", " Chapter 21 Working Offline Chromebooks are primarily meant to be used with an Internet connection. This is because most of the software you are using is through an Internet browser. So you will want to make sure you have Internet access when you are working on your Chromebook whenever possible. But sometimes you won’t have access to the Internet. Fortunately, some of the Chromebook Apps and functionality are available offline. You can use these to work when you can’t get an Internet connection. Then your changes will appear online when you reconnect. 21.0.1 Google Drive As we discussed in a previous section, the Files App shows files both from your Google Drive and in a “Downloads” folder. All the files in your “Downloads” folder are saved directly on your Chromebook and are available even if you aren’t connected to the Internet. But you can also store files on your Google Drive. The advantage of Google Drive is that all your files are stored online. This means they won’t be lost if you lose your Chromebook and will be accessible from any Internet connected computer. However, sometimes when you don’t have access to the Internet you may want to access your files offline. You can make Google Drive files available offline on your Chromebook. To do so you need to open the Google Drive App on your Chromebook. You can find the Google Drive App by opening the apps using the launcher button and clicking on the Google Drive icon. To confirm that you are set to work offline open the Google Drive App Once you have opened Google Drive you can open the Settings in the upper right hand corner. Open the Google Drive Settings Then you can confirm that the box is checked next to the “Offline” setting. This means that all of your Google Slides presentations, Google Docs text files, and Google Sheets data files will be available offline. This will use up storage on your Chromebook, but will let you work even when your computer is not connected to the Internet. Confirm that the setting to work offline is turned on 21.0.2 Example: editing a text file offline One of the most common things you might want to do when you don’t have Internet access is to write in a text file. You can do this with a number of different apps. But the one we will use most frequently is Google Docs. You will learn more about Google Docs in a future course, but for now we will show you how offline editing works. First, click on the Google Docs icon to open up the Google Docs App. Note you may have to click on the launcher window to find this App if it is not pinned to your shelf. When Google Docs is open you can click on the plus sign to create a new document. Open Google Docs and create a new document Now you should add some text by typing in the Google Doc, this text will automatically be saved on the Google Doc online. Add some text to the Google Doc online To test offline editing you need to turn off wifi on your computer. You can do that by clicking the avatar picture in the bottom right hand side of the screen to bring up your global options. Then you can click on the wifi connection to open up the wifi options. Open your wifi options You can turn off wifi and your Internet connection by clicking the dot at the top of the wifi menu. Now your Chromebook is offline. Turn off wifi by clicking the dot. Now you can open the Google Docs App back up by clicking on the Google Docs icon at the bottom of your screen. You can still make edits to the document created while you are offline. You can still edit the Google Doc offline. When you are working offline the offline icon will appear next to the file name. The offline icon appears next to the file name. When you are editing a file offline you will see that it says “All changes saved offline” at the top of the window next to the file name. This means that changes to your online document won’t happen until you reconnect to the Internet. Changes are not saved to the file on the Internet until you reconnect. To see how this works you can open back up the wifi menu and turn the Internet connection back on by again going through the menu opened by clicking on your avatar on the lower right hand side of the screen. Turn the wifi back on. Right after you turn the wifi back on you will briefly see that it says “Saving” at the top of the document next to the file name. This means that the changes you have made to the file are being saved from the version on your Chromebook to the version on the Internet. Changes are saved when you go back online. In a similar way you can also edit presentations and spreadsheets offline using Google Slides and Google Sheets. We will cover those Apps more in a separate course. One thing that is worth noting is that if you work with files offline, then the version you change will update the version of the file online. So if you have shared a document with someone else, when you edit that document offline and re-connect, it might write over some of their changes to the file. 21.0.3 Offline Apps In addition to the main apps from Google, many other apps and extensions offer Offline functionality. Some will be fully functional when they are offline and some will only partially work. When you open the Google Web Store you can specifically search for Apps that have offline functionality. But you will need to review each App to figure out what is available when you are online or offline. You can search for apps that say they have offline functionality. 21.0.4 Slides and Video Working Offline Slides "],["chromebook-security.html", "Chapter 22 Chromebook Security", " Chapter 22 Chromebook Security In some ways a Chromebook provides some security for you. Chrome OS has a number of security features that are constantly being improved by Google. We will discuss updating your Chromebook in a later section, but the updates ensure that at a basic level your Chromebook will have good security features. For example, data will be encrypted when passing through a web browser and each browser window will be sandboxed so a web app open in one browser window can’t access data from another window. But there are still some steps that you can take to make sure that your Chromebook is secure. This will be particularly important if your Chromebook is lost or stolen, but will also be useful if you share your computer with family or friends. Since a data scientist is often working with data that may be private or sensitive, it is important that if they lose their computer, they don’t risk losing the data they are working on. Setting your Chromebook up to be secure from the start is an important step for any data scientist. 22.0.1 Setting your Chromebook password One of the most important parts of securing your Chromebook is making sure that you have a good password. Good passwords are long, easy for you to remember, but hard for other people to guess. Don’t use simple passwords like “12345” or “password”, don’t use your name, your date of birth, or other details that would be easy to guess if someone saw your Facebook profile. Good passwords have a few important characteristics: They are long, ideally more than 10 characters They are easy for you to remember. They are not a commonly used password. One way to create relatively good passwords is to string together four or five random words. This approach was made popular by an xkcd cartoon. For example a password made with this approach would be “bikerainsmellblue”. This password has more than 10 characters, is easy for you to remember, and is unlikely to be used by a lot of other people. Try to pick words that aren’t related to each other. Then you only have to remember the four words to remember your password. xkcd suggested a good password combines four random words. Another way to create a password is to choose a line from a book or movie and choose the first one to three letters of each word. For example, you might use the line “Once upon a midnight dreary, while I pondered, weak and weary,” then you could change that to “onupamiddrwhipoweanwe”. You can then just remember the line that you have chosen and the fact that you used a certain number of letters from each word. Again, its a good idea to pick a line from a poem or a book that is less famous to do this. You can improve either of those password schemes by capitalizing some letters or turning words like “too” into numbers to make them more unique. The key is just to have a password that is not very common, easy to remember, and would be hard for other people to guess. 22.0.2 Requiring password to wake from sleep Now that you have set a good password you can make your Chromebook more secure by making sure that anyone will have to use the password to log in. To do this you need to again open up your personal settings by clicking on your personal avatar in the bottom of your screen and then click on the gear to open your personal settings. Open your personal settings Once you have your personal settings open you can click on the “Screen Lock” settings. Open the Screen Lock settings. You’ll be required to input your (hopefully good!) password. Input your password. Then you can turn on screen lock by clicking the option in the upper right hand corner of the screen for “Show screen lock when waking from sleep”. Click on option to Show screen lock when waking from sleep. Now if you close your Chromebook, put it to sleep, or log out, you will have to input your password to get access to your account. This will prevent other users from getting access to your Chromebook account even if they get a hold of the physical device. 22.0.3 Managing other people Another thing that you can do to make your Chromebook more secure is decide in advance who can log into your Chromebook. To do this, open your personal settings by clicking on the personal avatar at the bottom right hand side of your screen, then click the gear to open your personal settings. The click on the option to “Manage Other People”. Click on Manage Other People to manage users of your Chromebook. If you are the owner of the Chromebook you can then click on the dot next to “Restrict sign-in to the following users”. If you are the owner of the Chromebook will then be able to input which users can and can’t log on to your computer. Click on the option to restrict users. 22.0.4 Two step verification If you are dealing with very sensitive data or want to be more secure about who can access your account, you can turn on two step verification. All this means is that you can set it up so that entering your password is not enough to unlock your computer. You will also need to get a text message to your phone with a special code each time that you log in. This means that even if someone gets ahold of your Chromebook, they would also have to have your phone to be able to log into your account. Two step verification is often required for data scientists working in industry and is a good idea to prevent loss of your account information. To turn on two step verification first go to the website https://www.google.com/landing/2step and click on “Get Started” in the upper right hand corner of the screen. Go to the two step verification page and click Get Started. This will take you through the two step verification set up process. First you will again need to click “Get Started”. Click Get Started. Then you will be required to enter your password to confirm that it really is you trying to step two step verification. Enter your password. You will be asked to input your phone number. This is the phone number that will receive the text message every time you input your password and try to log in. This should be for your personal phone that you will have with you when you want to log in to your Chromebook. You won’t be able to log in without your phone after you set this up. Enter the phone number of the phone you will use for two step verification. Once you input your phone number, you will get a text message with a 6 digit number. Take this code and type it in to the next screen to confirm that you have the right phone number set up for two step verification. Enter your verification code to confirm your phone. After confirming both your password and your phone number you will be given the option to turn on two factor verification. You can do this by clicking “Turn On” on the next window. Turn on two factor authentication. Once this is turned on you can turn it back off by going through the same steps as before and then clicking “Turn Off” on the next screen. You can turn off two factor verification by clicking Turn Off. Finally, once you have enabled two step verification, you will need to have your phone with you every time you log in to your computer. This is good for security purposes, but will cause problems if you lose or replace your phone. Make sure you turn this feature back off if you are planning on getting a new phone. 22.0.5 Managing apps and devices You can monitor and manage which apps and devices have access to your account information from your account security page at https://myaccount.google.com/security. You should check this information periodically (every month or so at least) to see if there are any events or activity that you don’t recognize. If anyone has gotten access to your password or log in information, you will be able to see here when they have logged into your account. Your account security page. First you can see any security events that have occurred. Security events can be found by looking under “Device activity &amp; security events” in the section “Recent Security Events”. This will give you information on when your passwords are changed or when you have turned on or off two step verification. Your security events tell you about when your password or two step verification settings have changed. You can also see all the devices that have logged in to your Google account under “Device activity &amp; security events” in the section “Recently used devices”. You will see the Chromebook you are currently working on, but you will also see any Android phones you have logged in to or other computers where you signed into your account. Your recently used devices tells you what devices have logged into your account. As we have discussed in other sections, all of the software running on your Chromebook will be either Chrome Apps or Extensions or Android apps. For a lot of this software you will use Google to log in. That way you don’t have to have a separate password for each app and website. But each time you do this, you give the app a little bit of your information. When you stop using an app you may no longer want them to have access to your information. You can look and see which apps have access to your Google information by looking under “Apps with Account Access” in the section “Apps with Access to your Account”. You can see which apps have access to your account. If you click on a particular app you can take away the permission of that app to use your Google information. It is a good idea to check these apps from time to time and remove those that you no longer need, so they don’t have access to your Google information anymore. You can remove access for specific apps by clicking on them. 22.0.6 Slides and Video Chromebook Security Slides "],["printing-with-a-chromebook.html", "Chapter 23 Printing with a Chromebook", " Chapter 23 Printing with a Chromebook A Chromebook is designed to mostly work with files and documents online. The same is true if you want to print documents from a Chromebook. To print a document you will need to have a printer that is connected to the same wifi network as your Chromebook. If it is your personal printer you will need to follow the instructions that came with your printer to connect it to the wifi. If it is a work computer, make sure that the person responsible for the printer has enabled wifi-based printing. You can then set up your Chromebook to print by first going to your avatar and clicking the settings icon as we have done before. Open your settings. You can then scroll down through all of the settings in the main menu until you see the word “Advanced”. Click on “Advanced” to see your more advanced settings including your printer settings. Click on advanced. You can scroll down again until you find the “Printing Settings” section and then click on “Printers”. Click on printers. On the next page you will be shown a list of available printers. If this is your first time setting up a printer there won’t be any available yet. Click “ADD PRINTER” to open the printer list. Click on ADD PRINTER. You will see a list of all the printers available on your current wifi network. You should make very sure that you are selecting the right printer name to match either your personal printer or your work printer. You may want to print something harmless the first time you print to be sure you have connected to the right printer. Find the name of the printer that you want and click the name, then “ADD” Click the name of the printer, then ADD to add the printer. You should then see the printer under the list of printers. You can click on the three dots next to the printer to remove it if you selected the wrong one. The printer is now ready to be used. To print something, navigate to a website, for example https://www.google.com/. Then you can use the command ctrl+p to print this page. Remember this means to hold the ctrl key and press p. You should come to the printing window. One option that is immediately available is for you to save the page to a pdf file on your local computer. This won’t print the file, but it can be a good way to get a pdf copy of a website onto your computer if you want to save it. ctrl+p opens the printing window, you can save the page as a pdf by clicking save. If you haven’t previously used a printer you will still need to do one more step to get ready to print. You can click on “Change” in the “Destination” section. ctrl+p opens the printing window, click on change to change the printing destination. Then you need to find the printer name again and click on it. This will make that the destination for your file to print to. Click on the name of your printer This will return you to the printing window where you will now see the printer listed under the destination. You can then click on the “Print” button to print your document. Click on Print to print the document This will send the file to your printer. One thing to note is that printing from a Chromebook can be tricky in some settings because if printers are behind security firewalls then they won’t appear among the options for you to print to. You may have to contact the person who manages printers to have them help set the printer up to be recognized by a Chromebook. 23.0.1 Slides and Video Printing with a Chromebook Slides "],["projecting-from-a-chromebook.html", "Chapter 24 Projecting from a Chromebook", " Chapter 24 Projecting from a Chromebook As a data scientist you will often be asked to give presentations on your findings to your employers, to your colleagues, or at workshops or conferences. So you will need to learn to connect your Chromebook to a projector. 24.0.1 Finding the right dongle You won’t be able to plug your Chromebook in directly to a projector. You will need an adapter - often informally called a “dongle” to connect from your computer to the input cord of the projector. To figure out what kind of dongle you need, you need to know both the type of projector input you will be using and what type of ports you have on your computer to plug your dongle into. The two main types of inputs for projectors are VGA and HDMI. You can figure it out by looking at the cable coming from the projector. Find out what kind of projector cable you will be using You will then need to figure out what ports you have available on your computer. For example, the type of Chromebook I’m writing this on is a Chromebook Plus from Samsung. My computer has a USB-C port for connecting external devices like printers. My Chromebook has a USB-C connector, but yours might be different. To find out what kind of ports you have on your Chromebook you can go to the website https://www.google.com/chromebook. Then click on “Find Yours”. Go to https://www.google.com/chromebook and click Find Yours You will need to search or scroll down to find the version of Chromebook that you have. Once you have found your style of Chromebook click on it. Find your style of Chromebook and click on it. This should bring you to a screen with different options for purchasing a Chromebook. Any of those websites will have information about your Chromebook, but we have found that BestBuy often has the most information about ports, so click on the BestBuy logo on the left hand side to see more information. Click on the BestBuy logo to see more information. On the BestBuy page you can scroll down until you see the section called “Features”. Look for the word “Port” to find the type of port you have. In this case it is a USB-C port. Find the type of port you have under Features. Once you know the type of port you have on your Chromebook and the type of connection the projector cable has you can get the right dongle. Sometimes the place you will be presenting has a dongle available, but it is better to have two dongles. For each dongle you want one end to plug into the appropriate port on your computer (in my case USB-C). One of the dongles should have a VGA connection on the other end and the other dongle should have an HDMI connection. Then you will be prepared to connect your Chromebook to the vast majority of projectors you will use. Get a projector with the port for your computer and a VGA and HDMI connection on the other end. 24.0.2 Projecting from your Chromebook If you have the appropriate dongle you are now ready to project from your Chromebook. First, connect the dongle to the projector cord. Then connect the other end of the dongle to the port on your computer. Connect the dongle to the projector cord and to the port on your Chromebook. When you do this you will see that a window appears that says “Extending screen to” and then the name of the display. You should click on this box to open the display settings. Click on the extend displays box to open your Displays settings. There are two ways that the projector and your laptop can be connected. Extended display means that the projected screen is like a second Desktop connected to the Desktop on your computer. So you can drag files from the screen on your laptop to the projected screen. Mirrored display means that exactly what is on your Desktop is displayed on the projector. Usually when you first connect a Chromebook to a projector it will extend the display. This means that if you open the Displays window by clicking on the extending displays box, it may appear on the projected screen but not on your Desktop! This is because you have extended your screen so you actually have two screens you are working with. Extended display gives you two screens so what appears on your Desktop may differ from what appears on the projector screen. Usually when presenting you want the same thing to appear on your Desktop screen and the projector screen. You can do this by changing the setting from “Extending Display” to “Mirrored Display”. First you need to get the Displays Window to your Desktop. You can move your cursor all the way off the left or right hand side of the screen while watching the projector screen. You will see the cursor move up to the projector screen and you can click on the Displays window, hold down, and drag the display back to your Desktop. Drag the displays window to your Desktop and click mirror displays. Then if you click mirror displays you will see that your Desktop and the projector show the same thing. Click the Mirror Displays box to mirror the displays. You are now corrected and ready to present! Mirrored displays show the same thing on your laptop as on the projector. Once displays are mirrored you see the same thing on the laptop and the remote version. In a future class we will go over the software for making and delivering data science presentations. 24.0.3 Slides and Video Projecting From a Chromebook Slides "],["useful-applications.html", "Chapter 25 Useful Applications", " Chapter 25 Useful Applications In previous lessons we have discussed how to download apps from the Chrome Web Store. Here we will discuss some Chrome web apps that may be useful for the course and where you can get them. None of these apps is essential, but they may be helpful for productivity or organization. These apps can all be accessed directly from your Internet browser, but sometimes it will make your life and work easier to have the app directly on your Chromebook. 25.0.1 Basecamp We’ve previously discussed Basecamp as a place where you and all your other team members can communicate about projects. You can chat, share documents, read past conversations, and receive notifications on Basecamp. Having the Basecamp App on your Chromebook will allow you to be updated whenever anyone on the team is trying to communicate with you. You can get Slack from either the Chrome Web Store or from the Google Play Store if your Chromebook runs Android. Basecamp is available from the Chrome Web Store or from the Google Play Store 25.0.2 Google Calendar Google Calendar is a great place to keep track of meetings and life events. We’ll discuss the ins and outs of Google Calendar in a later lesson; however, for now, it’s important to know that there is a standalone app for Google Calendar. You can get this app from the Google Play Store. Google Calendar is available from the Google Play Store 25.0.3 Wunderlist Wunderlist is a list-making app. It is somewhere you can make to-do lists for work and grocery lists for at home. You can access these lists on your Chromebook or your smartphone. These lists can be shared with others from the app and tasks on to-do lists can be delegated to others. Additionally, it has reminder capabilities so that you never forget someone’s birthday or to take out the trash. You can get Wunderlist from either the Chrome Web Store or from the Google Play Store if your Chromebook runs Android. Wunderlist is available from the Chrome Web Store or from the Google Play Store 25.0.4 Tweetdeck The Tweetdeck app has all the same information as the Twitter website, but it is organized to make it easy to use multiple accounts. It has the same tweets, news, and messaging capabilities; however, with it directly on your Chromebook, it makes accessing this information a little easier. You can get Tweetdeck from the Chrome Web Store. Tweetdeck is available from the Chrome Web Store 25.0.5 Evernote Evernote is an app that can help you get and stay organized. It is primarily a place where you can take notes. However, it also allows you to generate to-do lists, organize receipts and bills, and to share these things with others. You can get Evernote from either the Chrome Web Store or from the Google Play Store if your Chromebook runs Android. Evernote is available from the Chrome Web Store or from the Google Play Store 25.0.6 Swirl Swirl will be used for tutorials throughout this sequence. Swirl is an R package with interactive lessons that we will use to get familiar with how R works. We have special Swirl DataTrail modules that we will use in these courses. 25.0.7 DocHub DocHub can be used to upload documents, edit them, and sign them. When you need to apply an electronic signature to a document you are working on DocHub is useful. You can get DocHub from the Chrome Web Store. DocHub is available from the Chrome Web Store. There are lots of other useful apps and as we go through the courses we will point out when there are apps that may be useful to help you speed your way through your work as a data scientist. 25.0.8 Slides and Video Useful Applications Slides "],["updating-your-chromebook.html", "Chapter 26 Updating your Chromebook", " Chapter 26 Updating your Chromebook In computing, there are often updates that are available. Updates can fix bugs, add new features, and/or improve security on your chromebook. Over time, your apps will need to be updated as well as your Chromebook’s operating system (OS) itself. To update your Chromebook you need internet connection. Every time you power on your Chromebook, it will check for and apply available updates. In fact, some updates to the Chrome OS happen in the background automatically while you’re using your device with the updates going into effect the next time you restart. However, should you ever need or want to manually update your Chromebook, you can do so using the following steps: 26.0.1 Steps to Update Step 1. Click on your username or photo at the bottom right-hand of the screen. Home Screen Step 2. A menu will display. On this menu, click on the settings button, which is the icon that looks like a gear turning. Settings Icon Step 3. A new window will appear. Here, you will click settings in the top left-hand portion of the screen. Settings Screen Step 4. On the menu that appears, click on ‘About Chrome OS’. About Chrome OS Step 5. From the ‘About Chrome OS’ window that is now displayed, click on ‘CHECK FOR UPDATES.’ CHECK FOR UPDATES Step 6. The progress of your update will be displayed in that window. Once the update has finished, a message will display letting you know that you are “Nearly up to date!” Nearly up to date! RESTART your device to finish updating To complete the update, you will have to restart your Chromebook. To do so, click ‘RESTART’ at the right of the window. RESTART to finish updating At this point, your screen will go black for a few seconds. Your Chromebook will then restart and you’ll be brought back to the login screen. Login back in here using your Google username and password. 26.0.2 Slides and Video Updating Your Chromebook Slides "],["what-is-the-cloud.html", "Chapter 27 What is the cloud", " Chapter 27 What is the cloud You may have heard the term cloud computing before, and data scientists often talk about working on the cloud. But what exactly is the cloud? Cloud storage refers to data or document storage on the Internet rather than on your personal computer. If you take pictures using your phone and then they are backed up on iCloud or Google Photos, you are using the cloud. Using the cloud for storage is like having an external hard drive (portable storage device) that you don’t ever see and can’t actually hold in your hands. 27.0.1 Cloud computing Cloud computing involves applications and software that run on shared data centers rather than running on the computer sitting in front of you. For data analysis, cloud computing has changed the way we think about working with data, especially when it comes to large datasets. A data analyst no longer needs to spend thousands of dollars to own high-capacity computers to deal with big data because the personal computer no longer has to do all the heavy lifting. Instead, a network of computers (from Amazon, IBM, or Microsoft among many others) will do the work instead. Your local computer will only need to run the interface software, which is often just your Internet browser. In future lessons we will study cloud-based data applications in more detail. 27.0.2 What are the advantages of using the cloud? A major advantage of the cloud is the ability to access your files everywhere, even if you don’t have your personal computer with you. Since storage and applications work over the Internet, they can be accessed from any computer with an Internet connection. An important advantage of cloud storage is that your files are safe even if your computer is lost or damaged. Because your files are not stored on your computer itself, they are safe and available even if your computer is stolen, you spill coffee on your keyboard, or there’s a natural disaster in your area. Moreover, most cloud storage services provide back-up services in case you delete files by mistake. These back-up services allow for accidentally deleted files to be recovered and restored. An advantage of cloud computing is an increase in computing power over what is available on your local machine. Remote machines that are used for cloud computing are more powerful than your personal computer and can do your data analysis much faster. Finally, working with the cloud puts the responsibility of maintaining software on the service provider rather than on you. When running software locally on your personal computer, you need to maintain applications by making sure that they still work and are up to date with the most recent versions. You must download and install the newest version of the software yourself or possibly even pay for a newer edition. With the cloud, service providers make sure the software is well-maintained and running optimally. 27.0.3 What are the disadvantages of using the cloud? The most obvious disadvantage of working on the cloud is that you need an Internet connection to access storage and computing power. You cannot work “offline” away from the Internet. However, with wireless Internet service (wifi) available widely in libraries, coffee shops, and other public places, it’s possible to work on the cloud from almost anywhere! There are also concerns with the privacy and security of data that is stored remotely. Privacy and security are issues that must be addressed by both providers and users of cloud-based services. Service providers need to ensure that the files stored at their data centers are safe and secure. Users need to take advantage of authentication measures and use strong passwords to ensure that no one can gain access to their account. Most major cloud-based service providers do a good job in securing your data. Specifically, their infrastructure is set up so that you can avoid security issues by being serious about protecting your account access information through your choice of password and by using two-factor authentication for logins. Briefly, two-factor authentication is a way of proving your identity to a service provider in two steps. The first step that is by providing a password. The second step involves using a physical object in your possession, such as a phone, to prove your identity. For example, you may also need to enter a code that is sent to your phone during the login process. This means someone would need both your password and physical possession of your phone to access your account. It is good practice to chose two-factor authentication whenever it is offered by a service provider. 27.0.4 Slides and Video What is the Cloud? Slides "],["using-gmail-for-email-communications.html", "Chapter 28 Using Gmail for Email Communications", " Chapter 28 Using Gmail for Email Communications Communication with your clients or your employer is an important part of being a data scientist. E-mail, short for electronic mail, is an important part of the communication picture because of its flexibility. You can write messages of varying lengths, use formatting if you desire, and attach documents as needed. Depending on your particular work situation, email may be your main means of communicating about your work. When using a Chromebook on the cloud, the email application of choice is Gmail. Gmail is a free e-mail service provided by Google that provides users with a gigabyte of free storage for messages and includes the ability to easily search for specific emails. Gmail also automatically organizes related emails into a conversational thread, meaning that a message and all replies to that message are stored together. Gmail has many of similarities with other web-based email clients, such as Hotmail and Yahoo! Mail. If you regularly use email through an internet browser, much of the following will be review. 28.0.1 Accessing your Gmail Inbox Gmail is included with your Google account, so you should already have access to Gmail through the account you set up in your first introductory course. Your email address will be username@gmail.com, where username is the username of your Google account. For example, if your user name is Jane.Doe then your email address would be Jane.Doe@gmail.com. This is one reason to choose an appropriate user name, since this email address will be visible to anyone you communicate with over email! You can access Gmail by going to the address “https://www.gmail.com” or by clicking on the start menu located on the lower left hand corner of your Chromebook and searching for “Gmail”. If you are not already logged into your account, you will see a prompt similar to the one here. Login screen After inputting your Google username and password you will be able to see your inbox. If you are already logged into your Google account, you will be brought immediately to your inbox without the need to first log in. Inbox Your inbox shows you all of the messages you’ve received through Gmail. Messages you have already read are shaded gray, while those you haven’t read yet are white. You can open a message to read it by clicking on the message stripe. By default, Gmail organizes your emails into three groups: Primary, Social, and Promotions. You can switch between these groups using the tabs at the top of the screen. Tabs The “Primary” tab will contain the majority of the email messages that you will care about reading and responding to. The “Social” tab will contain messages related to social media, such as messages from Twitter, LinkedIn, and Facebook. The “Promotions” tab will contain messages that include offers for purchasing products or signing up for services. Gmail uses machine learning to put new messages into the appropriate tab. As mentioned before, the “Primary” tab will be the main focus of using your email as a data scientist. One nice feature of Gmail is that it organizes related emails into a conversational thread. The message indicated by the red arrow is an example of a conversational thread, where an original message and all of its replies are grouped together. Inbox indicating thread By clicking on this message, you can see all of the individual messages that make up the email conversation, and can open each individual message by clicking on it. Example email thread 28.0.2 Composing and Sending Emails Let’s say you want to send an email to a client. The first step is to start a new message by pressing the “Compose” button on the top left corner of your inbox. Compose button A box will pop-up where you can enter the recipient’s email address (in the To field), the subject of the email, and the content of the email. New message You can send an email to multiple people by entering all the emails one after another in front of To. You can also add recipients in the Cc (carbon copy) or Bcc (blind carbon copy) fields by clicking on either of these links to the right of the To area. Recipients who are copied (Cc) will receive the email as if it is addressed to them; this option in usually used if you want them to be aware of the message but aren’t expecting them to take any action or reply. Recipients who are blind copied (Bcc) will receive the message, but their email addresses won’t be visible to other recipients of the email. This option is often used when sending an email to a long list of recipients where you don’t want each individual to see the other people on the email. You should also include a short informative subject in the Subject area so that the recipient will know what the contents of the email are about. This is also helpful later when you may want to search your email to find a particular message. There are also a few buttons in the menu bar at the very bottom of the email box that are very helpful. The attachment button, which looks like a paperclip, can be used to attach a file from your computer (such as an image, a document, or a video) to your email message. Attachment from computer You can also attach a file from Google Drive to your message by clicking on the Google Drive button, which looks like a triangle. Google Drive is Google’s file hosting service and you will learn more about it in a later lesson. Attachment from Google Drive You can send attachments up to 25 MB in size through Gmail. If you have more than one attachment, they can’t add up to more than 25 total. If your file is greater than 25 MB, you can instead upload the file to Google Drive and share a link to the file over email instead of including it as an attachment. Other options in this menu bar include inserting a photo (with the picture button), inserting a link (with the chain button), emojis (with the smiley face button), or even sending money (with the dollar sign button). Other menu options There are also many formatting options available for your email message, such as changing the font type and size, bolding text, including bullet lists, and more. These formatting options are similar to those available through Google Docs, which you will see in a later lesson, so we won’t spend time on them now. But you can find these options under the format button, which looks like an uppercase A with a line under it. Formatting options Finally, once you are ready to send your message, click the “Send” button at the bottom left of the message box. If you type an email but change your mind about sending it, you can delete the email by clicking on the trash can button in the bottom right corner of the new message box. Send or discard draft If you close the new message box without deleting it, it will automatically be saved as a draft message, and you can find it under the “Drafts” link in the list of link on the left-hand side of your inbox. Drafts 28.0.3 Replying to a message To read an email message, simply click on the message stripe. If you want to reply to the message, you can scroll to the bottom of the message to the reply box. To reply, simply click in the box and start typing your response. After writing your response to the email click the send button and you are done! Reply To forward the message to someone else, click on the “Forward” link and type the new recipient’s email address in the “To” area. You can then click in the message box to add a note to the forwarded message. If there is more than one other person on the email, you will also have any option to “Reply to all”, which means that your response will be sent to all the people who were on the original email. Use this option with caution, and only when you need all of the people to see your response. 28.0.4 Searching for specific messages To find a particular email message in your inbox, you can search using the search box at the top of the Gmail screen. Searching your Gmail inbox is very similar to searching the internet using Google. You can search by a word in subject of the email, the name of the person who sent the email, or the content of the email. For example, to find all messages from John Doe, you could type “from:john.everyday.doe@gmail.com” in this search box. To find messages that include the words “cancer data”, you could type “cancer data” in this search box. Search Box If you click the down arrow next to the search box, you will open a window that allows more specific options, such as searching by either sender or recipient, searching for specific words in the subject line, or searching by whether the message includes or doesn’t include certain words. You can also specify specific dates to search for messages. Advanced search 28.0.5 More specifics on using Gmail We have touched very briefly on some of the basics of using Gmail: accessing your account, sending and replying to messages, and searching for a particular message. There are lots of other features of Gmail that you may want to explore now or at a future time. There are many good beginner tutorials on using Gmail on YouTube.com. Google also has extensive information on getting started with Gmail on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/gmail/get-started/#!/ In this tutorial, you can find additional information about creating and sending email messages, organizing your inbox, searching your email, and more! 28.0.6 Slides and Video Using Gmail for Email Communications Slides "],["google-calendar-1.html", "Chapter 29 Google Calendar", " Chapter 29 Google Calendar Keeping track of appointments and deadlines is crucial for any data scientist. Google Calendar is a cloud-based time-management and scheduling calendar service developed by Google. It allows user to quickly schedule meetings and events, and get reminders about upcoming activities. Google Calendar is designed for teams, so it’s easy to share your schedule with others and create multiple calendars that you and your team can use together. 29.0.1 Accessing your Google Calendar Like Gmail, Google Calendar is included with your Google Account. You can access your calendar by going to the address “https://calendar.google.com/” or by clicking on the start menu located on the lower left hand corner of your Chromebook and searching for “Calendar”. If you are already logged in to your Google account, you will go directly to your calendar. If not, simply log in with the username and password for your Google account. Once you access your calendar, you will see something like this: Google Calendar screen This shows a list of your scheduled events for the week. The shaded column and red line show the current day and time. You can also look at your schedule in a daily, monthly, or yearly view by selecting the appropriate option from the drop-down menu at the top right part of your calendar. To the left of the scheduling window, you can see the different calendars available to be scheduled. You should have a calendar with your name, in this case Jane Doe, and some defaults like Birthdays and Reminders. Each calendar is given a different color on your schedule. We will talk later about organizing your schedule by adding additional calendars. 29.0.2 Scheduling and editing events Right now there is nothing scheduled on this calendar. To create a new event, click on the red button with the plus-sign in the bottom right corner of the page. Add Event After clicking this button, a new page will be loaded where you can name the event, assign the event start time and end time as well as date, location, and description. Event settings You can also share the event with others by entering their email addresses in the “Add guests”” section. You can also schedule reminders for you event, which we will talk about a little bit later. After entering all the information the event can be created by pressing the “Save” button at the top. More event settings Now you can see that the event has been added to your schedule on the appropriate day and time. New event If you need to modify an event after creating it, you simply click on the event in the calendar and then press the “pencil” button. This will re-open the scheduling window for the event. You can make any necessary changes and then click “Save” again. Any changes will also be made in the schedule of those you have invited to your event as guests. Edit event A short-cut method to creating new events is to simply click on your schedule where you want the event to go. This will open a window where you can enter the name and time of the event. From here you can click “Save” to schedule the event or “More options” to add additional information. This short-cut method is handy for quickly scheduling events where the name and time is all of the information you need. Short-cut event 29.0.3 Adding reminders to your events If you want to be reminded about an event in advance, you can schedule notifications for your event. You can do this when you first create your event, or add reminders later. First click on the event in your schedule and then the “pencil” button to edit the event. In the scheduling window, look at the notification section, indicated by the red box. Notifications You select how you want to be reminded of the event, either by a pop-up notification on your computer screen or through an email to your Gmail account. You also choose how far in advance you want to be reminded, which can be in terms of minutes, hours, days, or weeks. For meetings, you might choose to be reminded 30 minutes before the event, while for a friend’s birthday you might choose a notification 1 day before. For our event, we have choosen to have a pop-up notification reminder 30 minutes before the meeting. You can add a second notification by clicking on “Add Notification” and remove notifications you don’t want by clicking the “X” next to the notification you want to remove. A few additional notes about reminders: If you have the Google Calendar application installed on your mobile phone, pop-up notifications will also appear up on your phone. You can also set the default notifications for a particular calendar to be the same, which you will see in the next section. So, for example, you could set a default that every event would have a pop-up notification 30 minutes before the event. 29.0.4 Creating and editing calendars To help organize your schedule, you can create different calendars for different types of events. For example, you might have one calendar for all work events, a separate calendar for social events, and a third calendar for scheduled work time. When creating an event, you can assign it to a particular calendar. By assigning different colors to your calendars, you can see at a glance which types of events are upcoming. As mentioned before, you can also assign customized default notifications for each calendar. Suppose we want to create a new calendar for social events. To create a new calendar, click on the + sign next to the “Add a friend’s calendar” box to the left of your schedule and select “New calendar.” Add calendar This will open a window where you can customize this new calendar. Give it a name, in this case “Social,” and a description if you’d like. Then click the “Create calendar” link. New calendar Once your calendar is created, you it will appear under the “My calendars” section to the left of your schedule. (You get back to your schedule by clicking on the back arrow at the top left of the settings screen.) Now you can configure this calendar by hovering over the calendar name and then clicking on the three vertical dots to the left. You can choose a particular color to use for this calendar if you don’t like the one that is automatically assigned. You can also configure the settings for the calendar by choosing the “Settings and sharing” option. Configure calendar In the “Settings” window, you can change the name of your calendar and edit the description. You can also share the entire calendar with other people rather than just sharing an individual event. If you scroll down to the “Event notifications” section, you can set up customized notifications for all events in the calendar. To do this, click on the “ADD NOTIFICATION” link and choose the method and time for your default notifications. For example, for social events, you might choose a one-day reminder over email. Now this will be the default notification for all events scheduled on your Social calendar, although you can still adjust the notifications for individual events in this calendar under the individual event settings. Calendar notifications One thing to remember is that while notifications can be useful, it can be overwhelming to constantly receive them. You should figure out the notification system that works best for you! Here you can see that Jane has the three calendars we talked about set up on her schedule. The blue is her work events, the purple is her social events, and the red is her work plan for the day. She has notifications set for 1 day on social events, 30 minutes on work events, and no notifications on her work plan for the day. Using her calendar to schedule and organize her time helps her stay on task during the day. Jane’s schedule 29.0.5 More specifics on using Google Calendar In this lesson, we have talked briefly about how to create and edit events on Google Calendar, how to create and edit new calendars, and how to use notifications to set reminders for meetings and events. These are the basics of using Calendar to manage your schedule. There are many other features that can be used for managing and tracking your time that you may want to eventually explore. There are many good tutorials for using Calendar on YouTube.com. Google also has extensive information on getting started with Calendar on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/calendar/get-started/#!/ 29.0.6 Slides and Video Google Calendar Slides "],["google-drive-1.html", "Chapter 30 Google Drive", " Chapter 30 Google Drive Google Drive is a cloud storage service. It enables you to store files (including documents, data, images, videos, and presentation slides) online. You can also edit many of these files directly online, without needing to download them to your computer or upload them back to the cloud. One of the major benefits of Google Drive is the ability for multiple people to edit the same files at the same time. This makes Drive a useful tool for collaboration, with is very important to a data scientist. 30.0.1 Accessing your Google Drive account Like Gmail and Calendar, Google Drive is included with your Google Account. You can access your Drive account by going to the address “https://www.google.com/drive/” or by clicking on the start menu located on the lower left hand corner of your Chromebook and searching for “Drive”. You will see a welcome screen like this. Drive welcome screen Click the “Go to Google Drive” button to be taken to your Drive account. If you are already logged in to your Google account, you will go directly to Drive. If not, you will be prompted to log in with the username and password for your Google account. Here you can see Jane’s Drive directory. She currently has four documents stored on her Google Drive: a presentation in Google Slides, a dataset in Google Sheets, an image, and a document in Google Docs. To open any document from drive, simply double-click on the document itself. Google Drive directory 30.0.2 Organizing files in Google Drive In Jane’s Drive account, you can see that she simply has each document shown individually without any file organization structure. This is fine when you have only a small number of documents. However, if you use Google Drive to store lots of documents you will need a file structure to keep things organized and to quickly find the documents you need. In general, we strongly suggest that you create folders to keep similar files together. In this course, we will simply go over the basics of organization in Google Drive. You will learn about good practices for organizing files for projects in a later course, which will include how to chose a folder structure and naming conventions for files and folders. First, let’s create a new folder. Click the “New” button in the top left corner of the Google Drive home page and then select “Folder.” A new window will open. Type the name of your folder, in this case “Cancer project,” and click the blue “CREATE” button. Create folder You can now see this new folder under the “Folders” section of your Google Drive home page. To access the files in this folder, you would double-click on the folder name. Folders section Now that you have created a folder, you can start adding files to it. Suppose you want to move the Google Slides presentation “Exploratory plots for cancer project” to this “Cancer project” folder. In the Google Drive home page find this presentation file and right click on it. A menu will open; choose the “Move to” option and then select the folder, “Cancer projects,” that you want to move it to. If don’t already have a folder, you can create one in the menu by clicking on the folder icon. Moving a File to a Folder on Google Drive You can also drag a file to a folder. Just click the mouse button to select a file and while keeping the mouse button pushed down move the file over to the folder and release the button. 30.0.3 Creating files in Google Drive So far we have only moved existing files to a folder. You can create a new file in Google Drive by clicking the “New” button in the top left corner of the Google Drive home page and then selecting the type of file you want to create. You can choose a “Google Doc” for a word-processing document, a “Google Sheet” for a spreadsheet, a “Google Slides” for a presentation, or other choices from the “More” menu. Once you’ve selected your file type, a new window will open with your new file. From here you can begin to edit your file; specific types of Google files will be covered in later lessons. Files in Google Drive are automatically saved to the folder you are in when the file is created. So if you create a new file from your home page, the file will be saved there. If you create a new file the “Cancer project,” the file will be saved to that folder. Remember that you can always move a file to a particular folder as shown before. Create file 30.0.4 Uploading files to Google Drive You can also upload files or folders from your computer to Google Drive. To do this, you again click the “New” button in the top left corner of the Google Drive home page and then select either “File upload” or “Folder upload.” Once selected, a window will open that will allow you to navigate to the file or folder you’d like to upload. Upload file or folder 30.0.5 Deleting Files and folders Deleting files and folders is easy on Google Drive. Simply right-click on the file you would like to delete and choose “Remove” from the menu. Be careful when deleting folders, though! If you delete a folder, all the files in it will be deleted as well. Delete file You can delete multiple files or folders at once by first selecting them all while holding the Ctrl key. Once selected, you can right-click and delete them with the “Remove” option on the menu. 30.0.6 File Recovery If you do accidentally delete a file or change your mind once it’s deleted, recovering a removed file on Google Drive is straight-forward. Deleted files are moved to the Trash folders within Google drive. To recover a file, simply click on the “Trash” link on the left-hand menu. Trash folder In Trash you can see a list of all the files that you have previously removed. Right-click on the file you want to recover and select “Restore.” The file when they be returned to its original folder on Google Drive. If you’re sure that you won’t need the file ever again, you can clear some storage space by right-clicking on the file and choosing “Delete forever” from the menu. This option is only available within the “Trash” folder. Use this option with caution! By doing this your files will be deleted forever from your drive and can no longer be recovered. 30.0.7 File Sharing One of the biggest advantages of Google Drive is the ability to share files and folders with other people. You can share individual files and folders that you store in Google Drive with anyone by using their email address (preferably their Gmail account). You can allow those people the permission to either edit, comment on, or only view the file. Permission to edit gives the person freedom to delete the file or change it in any way. Permission to view will only allow the other person to read the file, but they won’t be able to change it. Permission to comment allows the other person to insert comments on the file, but they won’t be able to edit the file itself. To share a file or folder, just right click on the file or folder and select “Share” from the menu. Sharing files and folders on Google Drive In the window that opens, enter the email address of the person you want to share the file/folder with and choose whether the person can edit, comment, or only view the content. If for some reason you want to stop sharing a file or folder that you have already shared, right click on the file and choose “Share” again. In the bottom right corner of the window that pops up, click on Advanced. There you’ll see a list of people with whom you’ve shared the file. To the right of each name or email there is an X. By clicking on it, you will remove access of that person to the file. Click “Save changes” when you’ve finished removing access. 30.0.8 Working Offline The main advantage of cloud storage like Google Drive is that all of your files are stored online and are accessible whenever you want them. But what do you do when you don’t have access to the Internet and want to access your files offline? If you know in advance you will be without internet access, you can easily make Google Drive files available offline on your Chromebook. To do so, follow these steps: First, when online, install the Google Docs Offline extension by clicking on ‘Add to Chrome’. If the button says “Added to Chrome,” you’ve already installed the extension. Google Drive extension for Chrome Next, go to Google Drive settings and in the “Offline” area, check the box. It might take a few minutes for the offline access setting to turn on. Offline settings for Drive You are now ready to work on your files offline! Any changes will sync to Google Drive the next time your Chromebook connects to the Internet. 30.0.9 Storage limit Your Google Drive account comes with 15GB of free storage. If this is not enough space, you can pay for more space: $1.99 per month buys 100GB of storage and $9.99 (as of February 2018) buys 1TB of storage. Note that the free 15GB is shared among all Google services, including Gmail and Drive, so, part of your storage may be used by your email attachments. You can see how much storage you are using in the lower part of the left-hand menu on your home page. There is also a link here to purchase additional storage. Storage information 30.0.10 Security Google Drive encrypts your data before storing it. Encryption is any method that converts data to to encoded version for security purposes. Drive is encrypted using SSL, the same security protocol used on Gmail and other Google services. However, you’re still responsible for securing your Google account. Two-Step Verification (also known as two-factor authentication), provides an extra layer of security to your account. This requires you to enter your password and on top of that enter a code that is sent to your phone or email. You’ve learned about two-step verification in a previous lesson; we strongly recommend you use Google’s two-step verification to secure your files on Google Drive. Two-Step Verification setup 30.0.11 More specifics on using Google Drive In this lesson, we have talked briefly about how to create files and folders in Google Drive, as well as how to delete, recover, and share your files. There are many other features of Drive that you may want to eventually explore. There are many tutorials for using Drive on YouTube.com. Google also has extensive information on getting started with Drive on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/drive/get-started/#!/ 30.0.12 Slides and Video Google Drive Slides "],["google-docs-1.html", "Chapter 31 Google Docs", " Chapter 31 Google Docs One of the benefits to using Google on the cloud is its suite of document editors, which are completely free to use and accessible anywhere online. One of these editors is Google Docs, which is a web-based word document and text editor. If you’ve ever used Microsoft Word to create and edit documents, then you can think of Google Docs as an online version of Word, since it has many of the same capabilities. In fact, it is compatible with Microsoft Word files (.docx and older) as well as plain text files (.txt). A major benefit of Google Docs over Microsoft Word, however, is the cloud capability. Because documents are edited online, multiple users can format and edit a word document at the same time. Google Docs can be accessed from within Google Drive. To create a new document through Drive, simply click the “New” button in the top left corner of the Google Drive home page and then select “Google Docs.” Docs on Google Drive Alternatively, you can go directly to the Google Docs URL https://docs.google.com to create a new document. What’s the difference? Google Drive contains all of the files you have stored on the cloud, including images, spreadsheets, and presentations. Google Docs will contain only your word and text documents, so it can be useful when you only want to work with those types of files. Here’s an example of Jane’s Google Docs page. You can see her recent documents in the bottom part of the screen. The top part, below “Start a new document” is called the TEMPLATE GALLERY, which allows you to quickly create a new document. To create a new document you can choose the blank option or any of the templates available. Google Docs Page Clicking on the “TEMPLATE GALLERY” link will expand the template options to include “Resumes,” “Letters,” “Personal,” “Work,” and “Education” templates. Google Docs Templates Gallery Assuming that you are logged into your Google account, underneath the templates you will see the past documents that are saved on your Google Drive under the “Recent documents”. In Jane’s account, we see only one. Each of them can be opened and edited by clicking on them, which will redirect the current window to the old word document. You can sort by date modified or by title by clicking on the “A-Z” button. A-Z List 31.0.1 Auto-save feature and working offline One of the most convenient aspects of Google Docs (and all document editors on Google Drive) is its auto-save feature. As soon as the application detects a change in the file, it will automatically save without any prompt from the user. This means you don’t need to remember to save your progress as you work. You do not need to worry about losing progress when the power goes out, the internet disconnects, or even when a computer breaks down. If a stable internet connection is an issue or if you plan to work offline, Google Docs offers an offline mode that saves the word documents to the local computer. Even in offline mode, Google Docs will automatically save changes. To turn on offline mode, click on the menu button in Google Docs and then click on “Settings.” Offline mode on Toggle the “Offline” switch to on. Offline mode on Offline mode for Google Docs will also be applied to Google Sheets and Google Slides. 31.0.2 Working in Google Docs Now that we’ve covered how to access Google Docs and where to find Google Docs you’ve previously created, we’ll discuss a few features that you can use within Google Docs. Additionally, many of these features can be used across Google products, so once you master them in Google Docs, you can also apply them in Google Sheets and Google Slides. If you’ve worked in Google Docs or Microsoft Word previously, this will likely be a review. However, we want to make sure that all the features within Google Docs that you’ll use regularly are covered in this lesson. To get started, again, you’ll want to go to Google Docs and click on Blank to open up a blank document. Opening a blank Doc You will then see a blank document, as shown here. In addition to the document itself, there are many formatting options available through menus in the document editor. Blank Google Doc 31.0.2.1 Formatting Font Within Google Docs, once you start typing information into your document, you may want to change the way that your text looks. This is called “formatting” your text. You can format the text by: changing the font changing the size of the font making the font bold, italicized, or underlined changing the color of the font All of these changes to text can be accomplished using the options on the toolbar within Google Docs. Formatting from the toolbar in Google Docs To use these options from the toolbar, you’ll begin typing within Google Docs. Then, for any text you want to format, you will simply highlight the text, and click on the appropriate option from the toolbar. In this example, we would type “Document Title” into the Google Doc. To make the title bold, underlined, and larger, we would just highlight the text, click on the bold symbol and the underline symbol. While the text is still highlighted you would click on the drop down “Font size” menu, and click on a larger number (here, we’ve selected ‘24’). Now your text will be just as you want it. The same process can be used to change the font and to change the color of the font. Formatted title within Google Docs 31.0.2.2 Aligning Text What if, in addition to formatting the text itself you wanted to alter where the text was on the page? To change this, you can use other options from the toolbar. These buttons can be used to alter the alignment in four different ways: left-aligned - aligned on the left side of the page center-aligned - aligned in the center of the page right-aligned - aligned on the right side of the page justified - aligned so that the text is flush with both the left- and right-sides of the page To use these options, again, you’ll highlight the text you would like to align and then click on the appropriate alignment option: different alignment options within Google Doc 31.0.2.3 Inserting a List In addition to changing how some text is formatted or where it is on the page, you’ll often find the need to include lists in your Google Docs. There are two primary types of lists in documents: bulleted lists - lists where each item starts with a bullet numbered lists - lists where each item starts with a number To create either type of list, you can type the list out, with each item on a separate line. You’ll then highlight the text you want to be a list, and click on either the numbered list icon in the toolbar or the bulleted list icon in the toolbar to create the type of list you want to create. options to create a numbered or bulleted list 31.0.2.4 Inserting an Image We previously covered this briefly; however, we’ll cover how to insert an image into your Google Doc in more detail now. To insert an image, you’ll make sure the cursor is in your document where you would like to insert the image, and then you’ll click on the insert an image icon in the toolbar to display a drop-down menu with options: Insert an image icon There are a number of ways in which you can insert an image that will appear on this menu. Most frequently, you’ll likely be including images that are either on your computer or from a URL. We’ll discuss those in detail now, but feel free to play around with the other options to understand them as well. 31.0.2.4.1 From a URL If there’s an image on the Internet that you would like to insert into your Google Doc, Google makes this simple for you. For example if you were on Google and searched for “R language image”, you’d likely get results looking something similar to this: R language image search If you were to click on ‘Images for R language’, you’d see lots of images from which to choose. If you were to scroll through these, you could select your favorite image, and right-click on it. Google Image search From the drop-down menu, click on “Copy Image Address.” This copies the image address (the URL) for this image. This enables you to paste it in your Google Doc. “Copy Image Address” menu You would then return to your Google Doc, ensure that your cursor is where you would like to insert the image and click on the image icon in the toolbar, and select “By URL” from the drop-down menu Insert Image icon and select “By URL” In the box that pops up, you’ll then paste the URL that you just copied by using the keyboard shortcut ctrl + v. Insert image by pasting URL The image you selected will automatically appear in that box. Now, you just have to click “INSERT.” Click INSERT to insert image The image will now appear in your Google Doc! image inserted in Google Doc from URL Whenever you’re using an image that is not your own, whether in a Google Doc, a Google Sheet presentation, or anywhere else, it’s important to include the source information, to give credit to the people whose image it is and to allow others to find the image if they want to. image inserted in Google Doc from URL with source Note: If an image you select does not work with these instructions, there is a chance that you do not have permission to use that image. In that case, it’s likely best to search for an alternate image. 31.0.2.4.2 From your computer In addition to inserting images from URL, you may need to insert images that are on your computer locally. We previously discussed that there is not much local storage on your Chromebook; however, if you have saved an image to that space, you can insert it in your Google Doc using the following procedure. First, you’ll click on Insert Image Icon and click on the “Upload from computer” from the drop-down menu. On your Chromebook, this will give you access to your Downloads folder. Select “Upload from computer” If the file you want to insert has been recently downloaded, it will appear first in the list that appears. Click on the image you want to insert and then click “OPEN” at the bottom right-hand of the screen. Select image from Downloads in Documents that appear Your image will now be inserted in your Google Doc! As mentioned in the previous section, don’t forget to include your source! Image inserted from computer 31.0.2.5 Inserting a Table In addition to inserting lists and images, you may find the need to insert tables into your Google Docs. To do so, you’ll make sure your cursor is in your Google Doc where you’d like to insert the table and then click on “Insert” from the menu along the top of your Google Doc. From the drop-down menu, you’ll click on Table. Insert table This will expose an additional menu from which you’ll select how many columns and rows you want the table to have. For example, if you want a table with 4 columns and two rows, you’ll highlight that in the squares that pop up and click once. Insert table using highlighted cells In this case, a 4x2 (meaning 4 columns and 2 rows) has been inserted in your document. table inserted within a Google Doc You can then click in the squares of the table to add text to your table. Note that all of the formatting discussed earlier in this lesson still applies within a table. You can change the font, font size, and color of text within a table. Finally, to change additional things within your table, you can always put your cursor in the table and right-click to expose a drop-down menu, and make a selection from that list. If you need additional columns or rows or to delete columns or rows, that can be accomplished in this manner. Additional table options can be accessed by double clicking within a table 31.0.3 Renaming Your Document “Untitled document” is not a great name for your Google Doc. To change the name of your document, simply click in the “Untitled document” box at the top of the Google Doc and type in what you would like your filename to be. In this case, we chose “google_doc_intro.” We’ll cover how to best name files in a later course; however, for now, make sure you change the name of your Google Docs to something more informative than “Untitled document”, and very briefly, it’s best not to use spaces in your filenames but rather to use an underscore anywhere you would otherwise put a space. renamed Google Doc 31.0.4 Download documents in different formats You can also download Google Docs documents in most common formats. You should click on “File” in the top menu and then select “Download as.” You can then choose the format you want among the options including .pdf, .docx, .rtf, etc. Downloading documents For sharing documents you can follow the procedure we learned in the lesson on Google Drive. 31.0.5 More specifics on using Google Docs This lesson has covered a number of helpful features within Google Docs. There are many more capabilities within this application, so feel free to play around and check out additional resources here and on the web. For example, there are many tutorials for using Drive on YouTube.com. Google also has extensive information on getting started with Drive on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/docs/get-started/#!/ If you’re already familiar with Microsoft Word, Google Docs also operates very similarly without a couple of Word’s more advanced features. However, most tasks can be done with Google Docs, from simple text editing to importing images and graphs to exporting documents as PDFs. There are more in-depth guides on creating documents and downloading and printing. 31.0.6 Additional Resources Google’s Google Doc Tutorial GCF Learn Tutorial 31.0.7 Slides and Video Google Docs Slides "],["google-sheets-1.html", "Chapter 32 Google Sheets", " Chapter 32 Google Sheets As discussed in the introductory course in this series, one of the primary Google applications is the web-based spreadsheet editor, Google Sheets. Google Sheets allows users to format and edit spreadsheets with other users simultaneously. As mentioned in an earlier course, this tool is very similar to Microsoft Excel in how you use it; however, Google Sheets makes working with others way easier than Microsoft Excel. As data scientists are often members of teams, this is a really helpful feature. The documents created with Google Sheets are compatible with Microsoft Excel files (.xlsx) and comma delimited values (.csv), two commonly-used spreadsheet file types, making Google Sheets a great option for working with data in spreadsheets. Like Google Docs, Google Sheets can be accessed from within Google Drive. To create a new spreadsheet through Drive, simply click the “New” button in the top left corner of the Google Drive home page and then select “Google Sheets.” Sheets on Google Drive Alternatively, you can go directly to the Google Sheets URL at https://sheets.google.com. Remember, Google Drive contains all of the files you have stored on the cloud, while Google Sheets will only contain your spreadsheet files. Google Sheets has a TEMPLATE GALLERY just like Google Docs, where you can choose a blank spreadsheet or select any of the available templates. In our case, select the ‘Blank’ option under “Start a new spreadsheet” to get started. Google Sheets Page 32.0.1 Entering Data Entering data was covered in an earlier lesson; however, briefly here, to enter text into a cell, you put your cursor in that cell and type what you want in the cell. This skill was used to generate the Leanpub data for your first data science project. We’ll be using this data as an example to demonstrate the features in Google Sheets with which you’ll want to be familiar. To follow along with this lesson on your own, you could open up that Google Sheet you previously created and try out all of the features discussed in this lesson on your own. Leanpub data You’ll also note that within Google Sheets there are options similar to options in Google Docs allowing you to alter the font, size, and color of the data in your Google Sheet. We’re not going to discuss these options in detail for one particular reason. In data science, spreadsheets are used to store data. So, we tend to be most interested in the actual data in these sheets, and are not particularly interested in how pretty the data are. In fact, if you change the color of the text or increase its size in Google Sheets, when you later read that data into RStudio to analyze it, that information is lost. So, we try to avoid conveying information in spreadsheets with color highlighting or font changes. Thus, while it’s possible, this functionality will largely be ignored for our purposes. Avoid changing font, text size, and color 32.0.2 Formatting the Google Sheet Despite the fact that we’re going to ignore how to change the font text, size, and color, there are a number of helpful properties that you’ll want to be comfortable in in Google Sheets. 32.0.2.1 Changing the width of a column First, to change the width of a column, hover your mouse to the right of the column whose width you’d like to change. If you wanted to change the size of the first column (column A), you’d hover your mouse between the “A” and “B” column labels. A small black arrow will appear. You will then click and drag your mouse to the right to increase the column size. Once you have the desired size, release the mouse. You’ll have increased the width of the column! Increasing the width of a column. 32.0.2.2 Auto-fit the width of a column If you would like the column width to be just large enough to see all the text in each row of your column, you can double-click on the separator to the right of the column you would like to auto-resize. Double-click to the right of the column to auto-resize 32.0.2.3 Changing the width of multiple columns Finally, you aren’t limited to changing the width of one column at a time. If you highlight multiple columns and then drag the separator between the columns, it will resize all highlighted columns at once. highlighting multiple columns will resize all selected at once 32.0.2.4 Changing the height of a row In addition to altering the width of a column, you can also adjust the height of a row using the same process. Hover your mouse beneath the row you’d like to adjust and drag until you’ve reached your desired height. 32.0.3 Inserting, Deleting, and Moving Often times when you’re entering data you’ll realize that you need an extra column somewhere, want to delete a column entirely, or you’ll want to move a column from where it is to somewhere else in the Google Sheet. To insert a column, you’ll first highlight the existing column where you want to add a new a column, you’ll then click with two fingers on the column where you want to insert a new column, and a drop down menu will appear. From this menu, select “Insert 1 right” to insert a column to the right of the selected column. (Alternatively, “Insert 1 left” would insert a column to the left.) Insert column drop-down menu Now you have a new column where you can enter additional information. New column! A similar process would be used to delete a column. You would highlight the column you wanted to delete, click with two fingers, and select “Delete column” from the drop-down menu. To move an entire column, you again begin by highlighting the column you would like to move. Then you hover over the column label until a little hand appears, and click and drag the column from where it is to where in the spreadsheet you would like it to be. The same tasks can be carried out on rows; however, you’ll start by highlighting the row, rather than the column. 32.0.4 Freezing rows and columns An additional helpful feature of Google Sheets is the ability to freeze rows and columns. Imagine you have a spreadsheet with many columns, so many that you can’t see them all on your computer screen at once. In the first column, maybe you have a person’s name. This means that you’d likely want to be able to scroll through your columns to see the ones at the end of your spreadsheet, but you’d still like to be able to see the person’s name in the first column. You can freeze the first column, which keeps its information displayed, even when you scroll across a spreadsheet. Both columns and rows can be frozen by clicking on ‘View’ at the top of Google Sheets and hovering over ‘Freeze’ to display your freeze options. Freezing rows or columns 32.0.5 Wrapping text Occasionally, a column of data will have a lot of information in it. You won’t want to make this column so wide that you can’t see any of the other columns in your spreadsheet. In such cases, text-wrapping can be very helpful. To wrap the text in a column, you would first highlight the column where you wanted to wrap the text and click on the text-wrapping icon. A menu with options will appear. To wrap text, select the icon in the middle. text wrapping icon This will wrap the text in the selected column so that your rows are now taller and you can see all of the text in the cells at once. text-wrapped column A 32.0.6 Creating Multiple Sheets Another feature of Google Sheets is that you can have multiple worksheets in a single Google Sheets document. While the data we’ve been using so far has only included data from a single sheet, to add a second sheet to this Google, you would simply click on the plus sign at the bottom-left hand of the Google Sheet window. add a Google Sheet This will open up a second worksheet within the same document. Notice that your original data are still there in the tab labeled “Sheet1”. To return to that sheet, just click on the “Sheet1” tab. Multiple worksheets While the sheets are named “Sheet1” and “Sheet2” by default, it is possible to rename these sheets. To do so, click with two fingers on the sheet you would like to rename and click on “Rename…” This will enable you to type a new sheet name into the tab. Click enter once you’ve entered your new sheet name Renaming a sheet 32.0.7 A note on merging cells If you’re familiar with Excel, you may have merged cells together in the past. Maybe you had a title and wanted to combine a few columns together from a single row into a cell. This is still possible within Google Sheets; however, we’re going to discourage you from merging cells. In a future course, we’ll discuss tidy data. Tidy data are the kind of data that are easy to work with during data analysis. Merging cells limits your ability to have tidy data. Thus, we are going to just caution you not to merge cells. Avoid merging cells 32.0.8 Accessing, downloading, and sharing your spreadsheets All of the Google Sheets you generate are saved automatically on your Google Sheets account as well as to your Google Drive account. Just like Google Docs, Google Sheets has an auto-save feature that means you don’t need to actively save your work. You can also download your spreadsheet from Google Sheets in most common spreadsheet formats. You should click on “File” in the top menu and then select “Download as.” You can then choose the format you want among the options including .csv (a comma separated file) and .xlsx (an Excel file). Downloading spreadsheets For sharing documents you can follow the procedure we learned in the lesson on Google Drive. You can also share directly from the spreadsheet itself by clicking “File” in the top menu and then choosing “Share” and entering email addresses of the people you want to share with or getting a shareable link. Sharing spreadsheets 32.0.9 More specifics on using Google Sheets This lesson and the introductory course have covered a number of helpful features within Google Sheets. There is always more to learn, however, so check out the additional resources here and on the web. For example, there are many tutorials for using Sheets on YouTube.com. Google also has extensive information on getting started with Drive on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/sheets/get-started/#!/ 32.0.10 Additional resources: modifying columns and rows formatting cells working with multiple sheets 32.0.11 Slides and Video Google Sheets Slides "],["google-slides-1.html", "Chapter 33 Google Slides", " Chapter 33 Google Slides In addition to Google Docs for word documents and Google Sheets for spreadsheets, Google also has a web-based slide presentation editor called Google Slides. Google Slides allows users to format and edit slide presentations online and with Slide’s sharing capabilities, multiple people can edit the slides at the same time. As a data scientist, Google Slides can be a powerful tool to present your work to your employer or contribute to a presentation with your colleagues. If you’ve ever used Microsoft Powerpoint, you can think of Slides as an online version of Powerpoint, but with the additional capability to work simultaneously with other users on the same set of slides! It is compatible with Microsoft Powerpoint files (.pptx and .ppt). 33.0.1 Presentation Guidelines Before we talk details about how to work within Google Slides, we want to review a few best practices for slide presentation. To make a good slide show, it’s best to keep a few guidelines in mind: Minimize the number of words you put on any slide. Whenever possible, use pictures instead of words. Make sure images and text are as large as possible. Use consistent text font and colors throughout the presentation. 33.0.2 Accessing Google Slides Like Docs and Sheets, Google Slides can be accessed from within Google Drive. To create a new presentation through Drive, simply click the “New” button in the top left corner of the Google Drive home page and then select “Google Slides.” Slides on Google Drive Like Docs and Sheets, however, you can also access Google Slides directly through its own URL, https://slides.google.com. Remember, Google Drive contains all of the files you have stored on the cloud, while Google Slides will only contain your presentation files. Your Google Slides homepage will have the same structure as for Docs and Sheets. You can see there is a TEMPLATE GALLERY at the top of the screen and recent presentations at the bottom. To start a new presentation, you can select the “Blank” option or any of the available templates. Google Slides Page Clicking on “TEMPLATE GALLERY” will expand the template options to include “Personal,” “Work,” and “Education” templates. Expanded templates Once you click on “Blank” to create a blank presentation, you can begin to type in the dotted boxes to add text to your presentation. Adding text to Google Slides 33.0.3 Creating a Full Slideshow So far, this lesson has covered how to open a new slide show in Google Slides and how to enter text onto your first slide. However, to create a full slideshow, you’ll want to know how to: Add new slides Use different slide layouts Format text Add and edit images Change the theme and format of your slide show Rearrange slide order The remainder of this lesson will be dedicated to covering these topics. 33.0.3.1 Adding new slides To add a new slide to your slideshow, you’ll click the plus sign at the left on the toolbar at the top of your Google Slides presentation. New Slide A second slide will appear in the panel at the left. The blue highlighting around around the second slide in the panel at the left indicates that that slide is the slide being displayed on the right. New Slide highlighted in blue at left You may notice that this slide has a different layout than the first slide. The first slide had a large text box for the title. This slide, however, has a a text box for a title along the top and a large text box covering the rest of the slide. Google Slides is taking its best guess as to what type of slide you may want; however, you can always state which slide layout you want explicitly. 33.0.3.2 Changing layouts If the slide layout being displayed is not the slide layout you want, this can be easily changed by clicking on the “Layout” icon from the toolbar. Layout icon There are a number of different layouts from which you can choose, depending upon your needs. For example, you might only need a caption for a large image, so you could select the “Caption” layout choice. Click on the layout you’d like to use and the slide will change to the layout you’ve selected. You can always change the layout again if the one you’ve chosen doesn’t work well. As you gain experience making presentations, you will know which layouts work well for you! select layout menu 33.0.3.3 Formatting text As you start to add text to slides, you’ll quickly realize that the icons along the top and steps required are the same as they were in Google Docs. This is by design. Google has designed its suite of products so that once you master a skill in one of its products, you can use it in its other products. That said, you already know how to format text from the Google Docs lesson, so we won’t go over that here. Process for formatting text is the same across Google Products While the process for formatting text is the same, the one thing that differs between Google Docs and Google Slides is the fact that the positioning of the text box in Google Slides is important (and something you didn’t have to consider in Google Docs). To re-position a text box in Google slides, you’ll first click on the text box. Then, by hovering over the blue highlighted border around the text box, you will see a cross made of arrows appear. Once this arrow cross appears, you click and hold down. While still holding down, you can drag the text box to the the position on the slide where you want the box. Once the text is where you want it, you can release. The text box will now be wherever you’ve dropped the text box on the slide. 33.0.3.4 Adding and editing images To add images to a slideshow, the process is again the same as in Google Docs, and the process for re-positioning an image on the slide is the same as was just discussed. However, in Google Slides, you’ll likely be editing the size and appearance of images to a greater extent than you would need to in Google Docs. We’ll discuss how to work with images in Google Slides here. 33.0.3.4.1 Cropping an image Consider the following image in Google Slides. Notice that the blue box around the outside of the image is much larger than the actual image we’re interested in using. To crop out this extra white space, you’ll want to first click on the icons, you’ll select the crop icon. Crop icon The outline around the image will now have black bars around it. Remove whitespace from image These black bars can be dragged to the position where you’d like the image to be. Remove whitespace from image After the image is the size you want it to be, hit ‘Enter’ or click away from the image on your screen. The image has now been cropped, as indicated by the now-smaller blue outline on the image! cropped image 33.0.3.4.2 Aligning objects In addition to adding images, often you’ll want to be sure that images on your slides are aligned so that they look good when you go to present the information. Google Slides makes that pretty easy to do. To align images, you’ll drag your cursor over the objects to select all the objects you want to align. Once selected, you’ll right click on the selected objects to display a menu. You’ll then use the “Align horizontally” and “Align vertically” options to align the objects the way you want them. Aligning objects 33.0.3.5 Additional formatting options Additional formatting options can be explored by right-clicking on the image that will show a menu with additional options or by clicking on the additional image-editing icons on the toolbar. Additional formatting options 33.0.3.6 Formatting and editing themes In addition to formatting individual text boxes and images on your slides, you may want to format the design of your entire slide show. This can be accomplished, by clicking on the “Theme” icon along the toolbar Theme icon Note: If you do not see the “Theme” icon, click on a blank spot on your slide. This will make the toolbar option appear. After clicking on the “Theme” icon, a panel will appear on the right side of your screen with all the pre-loaded themes available. Themes available You can scroll through these themes. Clicking on one of these themes will apply the theme across every slide in your presentation. Themes applied across entire presentation 33.0.3.6.1 Changing background color In addition to pre-specified themes, you can also alter the background color of all your slides. To do so, you would right-click on a blank spot on your slide. On the menu that appears, you would select “Change background” Change background A menu will appear where you can select the color you want your slides to be from the drop-down menu and click “Done.” This will only change the background color of the slide on which you’re currently working. Change background color window 33.0.3.7 Rearranging slides Sometimes as you’re generating a slide show, you’ll realize you’d rather your slides be in a different order. This can be fixed easily by clicking on a slide in the left hand panel of your Google Slides window, and dragging and dropping your slide to the position in your slide show where you’d rather it be. Rearrange slides 33.0.4 Presenting Your Slideshow Once you have created all the slides you want in your slideshow, you can easily present them. On the right-hand corner of the window, click on Present and your slides will be in full-screen mode ready to be presented. View your presentation 33.0.5 Accessing, downloading, and sharing your slides All of the Google Slides you generate are saved automatically on your Google Slides account as well as to your Google Drive account. Like the other document editors you’ve learned about, Google Slides has an auto-save feature that means you don’t need to actively save your work. You can also download your presentations from Google Slides in different formats, such as Microsoft Powerpoint or Adobe PDF files. To do this, you would click on “File” in the top menu and then select “Download as.” You can then choose the format you want among the various options. Download your presentation For sharing documents you can follow the procedure we learned in the lesson on Google Drive. You can also share directly from the Slides itself by clicking “File” in the top menu and then choosing “Share” and entering email addresses of the people you want to share with or getting a shareable link. Sharing your presentation 33.0.6 More specifics on using Google Slides Here, we have covered the basics of Google Slides. If you want to learn how to further customize your templates, how to add transitions and animations, and details on working with images, check out the additional resources links below search for tutorials on YouTube.com. Google also has extensive information on getting started with Slides on their G Suite Learning Center, which can be found at the following web address: https://gsuite.google.com/learning-center/products/slides/get-started/#!/ 33.0.7 Additional Resources Google’s Slide Tutorial Adding images Transitions and animation Editing the Master Template How to Insert A YouTube Video into Google Slides (video) 33.0.8 Slides and Video Google Slides Slides "],["google-hangouts.html", "Chapter 34 Google Hangouts", " Chapter 34 Google Hangouts Google Hangouts is a communication platform by Google and includes tools such as messaging and video chat. Google Hangouts is also famous for its video conferencing feature; you can video chat with up to 25 people at the same time and message a team of up to 150 people. These features make Google Hangouts an excellent tool for staying connected with collaborators, employers, and friends. An additional bonus feature of Hangouts is that it syncs automatically across different devices. That is, you can start a Hangout on your phone and continue your chat on another device such as your laptop. 34.0.1 Accessing your Google Hangouts account Like the other Google services we’ve talked about, you need a Google account in order to use Hangouts. To access your Hangouts account, You can either go to the Hangouts URL at https://hangouts.google.com or click on the start menu located on the lower left hand corner of your Chromebook and searching for “Hangouts”. If you’re not already logged in to your Google account, first you’ll need to log in. Here’s a screenshot of Jane’s Google Hangouts screen: Google Hangouts Picture On this screen you can see that there are options for making a video call, a phone call, or sending a text message. 34.0.2 Video chats You can initiate a video call by clicking on the “Video Call” button located at the center of the screen. Video call button When this button is clicked, a new window will open for the video call. Google Hangouts may request permission to use your computer’s camera and microphone for the call. If you see this request, you should click “Allow” to continue your call. Granting Google Hangouts access to microphone and camera Once you’ve given permission, you’ll be taken to your call. You can invite people to your video call in two ways. One option is to enter their names or email addresses directly into the invitation box and click “Invite.” Another way is to click the “Copy Link To Share” button and paste this link into an your own email invitation. This second option is an easy way to invite a large number of people to a video call. Inviting people Notice that if you have already exchanged emails with someone, meaning they are in your Gmail address book, they will automatically show up when you begin to type in the invitation box. In this case, we see John Doe’s contact information when we just type “John” into the box. Auto-complete of contacts During the video call, the default is for your microphone and video camera to be on so that the other people on the call can both see and hear you. You can choose to mute your audio and/or video feeds by clicking on the microphone and/or camera buttons at the bottom of the screen. Sometimes it can be useful to mute your audio if you are listening to other people talking and don’t want noises from your environment to distract you from the call. You can un-mute by simply clicking the appropriate button again. You can also click the three dots at the very right corner of the screen to see options for the call: share screen, fullscreen, chat, help, and feedback. Call options If you want to share your screen with people currently in your call simply click on the “Share Screen” option and choose either to share your entire screen or just one specific application window that you have open. If you share your entire screen, the other people on your call will be able to see everything on your screen, even when you click between applications. If you only share a single application window, they won’t be able to see things on your screen that aren’t in that application window. Sharing a single application can be useful if you want to be able to check your email during the call without letting everyone else see your messages! Share screen options Once you’ve shared your screen, you can stop sharing at any time by pressing on the “STOP” button located at the top of the screen. If you want to make the video call into fullscreen you can select the “Fullscreen” on the option menu. Call options If you need to send a text message to everyone in the video call, you can choose “Chat” from option menu. A message window will then open in the lower as the one shown below on the lower left corner of your call screen. Simply type your message and press the arrow to send! Message pop-up If you need more information or have any questions about using Google Hangouts, choose “Help” from the option menu. This will open a new window with tutorials and guides on how to solve problems and explanations on how to use Google Hangouts. Hangouts help 34.0.3 Phone calls You can also make a phone call in Google Hangouts. This allows you to contact someone through a phone number instead of via email address. You make a call by clicking on the “Phone Call” button on the main Hangouts screen Phone call button To enter a phone number you can press on the “New Conversation” button on the left menu. After entering the number you can select what country you want to call and simply press “Call”. The first time you make a phone call from Hangouts, you may be asked to register a phone number where they can contact you if there are any problems with the call. Follow the instructions onscreen to do this. Making calls 34.0.4 Messaging You can also message other people with Google accounts through Hangouts. To start a message, click on the “Message” button. Message button Then you can enter the name, email address, or phone number of the person you want to message. When you find the correct person you can simply click on them and that will open a conversation box. Type your message in the box and hit enter to send the message! Starting a conversation 34.0.5 Group conversations In Hangouts, you can have a video/audio/text conversation with multiple people at the same time. You can have a conversation with up to 150 people and a video call with up to 25 people at the same time. Everyone who wants to join a group conversation must use Hangouts. For a group video call, just enter in multiple names and/or email addresses when starting your call. In text messaging, click on the “New group” link and then enter in the names and or email addresses and or phone numbers for all of the people in the group. New group 34.0.6 More specifics on using Google Hangouts Google Hangouts is an excellent way to communicate with outhers about your work, all through a web browser or your Chromebook! We’ve covered some of the main features of Hangouts here. If you want to know more, you can search for tutorials on YouTube.com or check out Google’s guide to getting started with Hangouts at the following web address: https://gsuite.google.com/learning-center/products/hangouts/get-started/#!/ 34.0.7 Slides and Video Google Hangouts Slides "],["youtube.html", "Chapter 35 YouTube", " Chapter 35 YouTube YouTube, as you might already know, is a video-sharing website that allows users to upload and view all sorts of videos. The videos hosted on YouTube range from home videos to music videos, movie trailers, and TV shows. Access to the content on Youtube is free but comes with commercials (you have to only pay to watch videos free of commercials). In order to upload videos, you need to have a Google account, but watching the content does not require any login. However, you need to login if you want to rate or comment on a video. For a data scientist, YouTube can be an excellent resource for video tutorials on tools and tips of the trade. You can easily find step-by-step tutorials and other resources on any of the tools we’ve already discussed in this course by simply searching YouTube. 35.0.1 Accessing YouTube You can access YouTube by going to the URL youtube.com in your web browser. You can also click on the start menu located on the lower left hand corner of your Chromebook and searching for “YouTube”. If you aren’t logged into your Google account, you will arrive at a generic YouTube home page, where you can watch videos and search for specific video content. You can search for content using the search box at the top of the screen. If you want to get more personalized results or create your own playlists, you should log in via your Google account. You can do this by clicking on on the “SIGN IN” link in the top right corner of the screen. Generic YouTube Homepage On your personal YouTube home page, you will see YouTube’s recommendations for videos that you might like to watch. YouTube is also good with learning about your preferences. If you watch a video that is about how to import data into R, YouTube will suggest more videos related to those keywords to you. You can also easily locate videos you’ve already watched by clicking on “History” in the left-side menu. Personal YouTube Homepage 35.0.2 Finding videos There are various ways you can find relevant videos on YouTube: By viewing the charts ranking the Most Popular videos in any given category by clicking on the Trending icon on the left menu. By browsing channels via the link https://www.youtube.com/channels. You can browse channels from news and politics to technology. By searching videos by typing keywords in the search bar. For instance if you type “What is data science?”, YouTube will find around 22 million videos. Search results Note that you can filter your results when you search for specific keywords by clicking on the Filter icon on the top right corner. For instance, you can filter based on the length of the video or the time it was posted. Filter Results 35.0.3 Data science on YouTube For our purposes, here is a list of some of the most popular YouTube channels on data science. You can find any of these channels by searching for the name, for example “Data Science Dojo,” in the YouTube Search box. You can then subscribe to the channel by clicking the red “Subscribe” box on the right. Data science channels You can find the channels that you have subscribed to under the “Subscriptions” section in the left-hand menu of your YouTube home page. Subscriptions 35.0.4 How to save videos to watch later Sometimes you may discover an interesting video on YouTube, but may be too busy to watch it right away. One way to save the video so you can watch it later is to “like” the video by clicking the “thumbs up” icon below the video screen. Liking a video This will add the video to your favorites, which can be found under “Liked videos” in the left-hand menu on your YouTube home page. Favorite videos Overall, YouTube is be a great place to go to for finding answers to your questions. There are millions of videos explaining things that you might not know about or pertaining to topics that you don’t want to read pages and pages of text in order to understand. Sometimes a good 5-minute video can be the most efficient way to get the information you need. 35.0.5 Slides and Video YouTube Slides "],["slack.html", "Chapter 36 Slack", " Chapter 36 Slack Slack is a messaging platform designed to help you communicate with others in your workplace. Think of it like a group chat, but for work-related subjects. A lot of companies and workplaces look down on using Facebook and Twitter for communication, seeing them more as just social media platforms, rather than effective platforms for communication at work. Some places even ban the use of these platforms. However, Slack is being used by more and more companies as a communication tool. We covered how to get a Slack login in the introductory course, but we didn’t discuss the details of how to use Slack. So, in this lesson, we’ll pick up from where you last left off (with a Slack login in hand) and discuss why Slack has become the platform for communication within companies and how to get started using Slack. 36.0.1 How to Access Slack? To get started, go to Slack online at slack.com/signin. We’ll note here that Slack also has a mobile app, so if you’d like to check those out, feel free. But, in this lesson, we’ll work from the Chrome browser, without an app. 36.0.2 Slack is organized into teams and projects If you’re new to Slack, you will not yet be a member of any teams, and that’s ok! If you ask people who have been using Slack for a while, they’ll envy you. You’ll see over time that you’ll likely become a member of many different Slack teams! For now though, we’ll walk through how to start your own team to get you acquainted with the features of Slack. 36.0.3 Creating a team If you go to slack.com and click on “GET STARTED” GET STARTED You’ll be brought to a screen where to create your own team, you’ll want to click on “Create a new workspace.” Create a new workspace You’ll then be asked for your email, which you should enter and then click “Confirm.” Enter email to continue At this point, you may see a screen asking for a 6-digit code. Go to the e-mail address you entered and look for this six-digit code in an email from Slack. Enter this code in this window. Enter six-digit code from email After entering the six-digit code correctly, you’ll automatically be brought to a screen where you will be asked for your full name and your display name. Your display name will be the name that others see when you message within Slack. It’s okay if this is your full name or a shortened version of your full name – as long as the people in the team will know who you are when they see it, then that will work for your display name. Once that information has been entered, click “Continue to Password.” Enter full name and display name You will also have to enter your password. After choosing a strong password and entering it, you’ll click “Continue to Workspace Info” Enter Password At this point, you’re ready to start creating your team! You’ll be asked what your team will be used for. For this example we’ll select “School” from the drop-down menu and fill in the rest of the information Slack asks for about our team. Once the information has all been filled out, click on “Continue to Group Name.” Tell Slack about your team You’ll be asked what your group should be called. For this example, we’ll call the group “Schoolwork.” This is what will be displayed to all members of the team who use this workspace. You will enter this name and then click “Continue to Workspace URL.” Name your workspace Now, you’ll enter your Workspace URL. This is what URL you will use to sign into this Slack workspace yourself or (eventually) to send to others to join your workspace. Here, we’ve chosen the URL to be “schoolwork-doe.slack.com.” These URLs will always end in “slack.com”. After entering your desired URL, you’ll click “Create Workspace.” Choose a URL You’ll be prompted to review the terms. After reviewing the terms of service, click “I Agree” if you agree to follow Slack’s terms. Agree to terms of service At this point, you’ll be prompted to send invitations to others who may want to join this workspace. For this example, we won’t be inviting anyone else for now, so we’ll click “Skip For Now.” Send invitations? You’re almost there! You’ll now be asked if you want to download the App or continue in the browser. For now, we’ll click “continue in the browser.” Continue in the browser Welcome to your very own workspace! We’ll now walk through Slack to get you acquainted with messaging in Slack. At the bottom right-hand of the window, there will be a screen welcoming you to Slack. Welcome to Slack! If you click on “Let’s go,” you’ll be brought to a screen that you can scroll through using the white arrows at the left and right. Scrolling through these will display different windows that explain the main functions of Slack: channels, messages, and uploading documents. We’ll walk through those basics now, but feel free to come back to these later and look through Slack’s instructions as well by clicking on “Try it now”! Slack’s main functions To close out this box, click on the small x at the top right of the box. To display this box next time you log on, click “Remind me next time”. Otherwise click, “Skip completely”. Close Tutorial box 36.0.4 Channels You’ll now be brought to your workspace! Note the name of your workspace “Schoolwork” is up at the top left-hand side of your screen. You’ll also note under “Channels” there are already two channels listed. Discussion within Slack is channel-based. That means that members of a channel will be able to see and search all discussions within a channel. Generally, different channels exist for different projects. This way only the people on the project will have access and be alerted of messages in that channel. And, others who are not involved will not have to be bothered by messages that are not important to them! Each channel is listed with a pound sign to the left of the channel name. Here you have a channel called “general” and another called “random”. These two channels will be available in every workspace you create. If you click on the “general” channel, you’ll see along the top that Slack explains that this channel is for “Company-wide announcements and work-based matters.” Channels available in new workspace To display further information about this channel, click on the ‘i’ icon along the top. This will open up channel information including how many members there are in this channel. Channel Details 36.0.4.1 Creating a channel While #general and #random are helpful channels, you often want to create additional channels for new projects. To do so, you would click the plus-sign icon to the right of “Channels.” Add a channel A new screen will pop up so that you can begin to create a channel. There are two general types of channels. Public channels are viewable by anyone who is in the workspace. Public Channel If you click on the green “Public” button, it will toggle a change to display an orange “private” button. Private channels can only be viewed by those who are invited to join. For this example, we’ll create a private channel Private Channel To continue creating a private channel, you’ll want to fill out the Name of the channel (what will be displayed underneath “Channels”) and the channel’s purpose (a longer explanation that will be displayed along the top once you click on the channel). Once this information has been filled out, you’ll click “Create Channel.” Create private channel With that, your new channel “assignments” is available underneath Channels! Note that because it is a private channel, there is a lock icon to the left of the channel name. Public channels will have a pound sign. Private channels will display this lock symbol. new assignments channel 36.0.4.2 Messaging occurs within a channel On Slack, messaging occurs within a channel. This way conversations are organized based on a particular topic and seen only by those for whom the message is important! So, with a newly created channel, you can now begin messaging within it. To do so, you’ll click on the “assignments” channel and then begin to type your message in the bar at the bottom. 36.0.4.3 Sending a message typing a message within a channel A great feature of Slack is that every member of a channel can see the messages within that channel. However, sometimes, you want to ensure that someone in particular sees the message. To do so, you include their name by first typing @ within your message. This will display a list of names that you can include. You can either choose a name by clicking on it in this list, or by beginning to type the person’s name until it is listed and highlighted in the above menu and hitting “enter.” using @ within a message Once the name has been selected it will display in your message. message complete with @ specified After you hit enter, your message will send and the person you’ve specified in the message will receive a specific notification highlighting that a message has been directed specifically to them. sent message 36.0.4.4 Messages are searchable While in this example you’re at the beginning of your message history within Slack, as time goes on there will be more and more channels and workspaces and long message histories. If, sometime in the future, you want to return to this message, you can do so by using the search bar at the top. searching messages Slack allows you to search by term for Messages, Files, or both (All). Just start typing your search term into the search bar, and Slack will begin to provide results matching your search. Slack’s search capabilities are powerful. This feature will likely save you a lot of time in the future when you have to refer back to messages from the past. 36.0.4.5 Uploading a document In addition to sending messages within a channel and being able to direct the messages at certain people, you also often want to be able to share images or documents with others. To upload a document to be included with your message, you’ll click on the plus sign to the left of the message bar. Click left of message to upload a document A drop-down menu will display. To upload a file from your computer, click on “Your computer”. Then, search your computer for the file you want to include. Here, I’ve selected an image on my computer. A box will show up asking if you want to upload this file you’ve selected. A preview of the image (in this case) will display. You’ll be able to change the title of the file, decide in which channel it should be shared, and include a comment with the file. Once all of the necessary information is included, you’ll click “Upload.” Uploading a Document Your message will now be sent and visible to everyone else in the specified channel. Document in Channel messages 36.0.4.6 Reacting to a message So far we’ve discussed how to send messages to other, but Slack is particularly great because of its capabilities to foster discussion amongst members in a workspace. Thus, often you’ll be reacting and responding to others’ messages. To do so you’ll hover over the message to which you want to react. You can either react with an emoji, start a thread to respond with text, or share the message with someone else in your workspace. Reacting and responding messages 36.0.4.7 Editing and deleting a message Additionally, the three dots icon at the end of the display options can be clicked on to display additional options. Within this menu, you will find options to edit and delete messages you’ve sent. editing and deleting message 36.0.4.8 Direct messaging So far, we’ve discussed communicating within a channel, allowing for team-based communications. This is where Slack really shines! However, Slack does have the ability to direct message individuals within your workspace. This means you can send a message to a person or multiple people outside of the specified channels. To direct message someone, you’ll click on the plus sign to the right of “Direct Messages”. Direct message This will display a box where you’ll search for someone’s name. Once you’ve found the person you want to message directly, you’ll click on their name and click “Go.” Start direct message You’ll continue to message this person as discussed for messages within a group by typing in the message bar and hitting “enter to send the message” 36.0.5 Joining a team While we’ve been working within a team we just created, another great thing about Slack is that you can be a member of multiple different teams. There are a few different ways to join already-established teams. To do so, you’d return to slack.com/signin and click on “GET STARTED”. This time around you would clock on “Find your Slack workspace.” Find your Slack workspace 36.0.5.1 Joining an established team by e-mail search To find your Slack workspace associated with a company or workplace, you would then enter your work-specific e-mail address (not a general gmail address). This would give you a list of workspaces to which you had access given the email address you input. You could search among the available workspaces for the workspace(s) you’re interested in joining. Search workspaces using work e-mail address 36.0.5.2 Joining an established team by invite Alternatively, to join an established team, this can be accomplished by invite. You’ll need an invitation similar to what you see here, which would be sent to you from the workspace by e-mail: Invitation screen on Slack Once you have the invite, you would accept the invitation by clicking the green Join button. Similar to what was described above, Slack may ask for some information before moving on. If prompted, you’ll enter your first and last name, along with your email in the required fields before clicking “Next”. Sign up screen on Slack Then, enter your password. A quick reminder that it’s best to choose a strong password that is different from your other passwords for security reasons. 36.0.6 Slack can work with other tools While we won’t discuss in detail here, it’s important to know that Slack works well with other applications. To see a list of the apps that you can integrate into Slack, click on the plus sign to the right of “Apps” Apps in Slack A list of available apps will be displayed. You can search by app name, or click “Install” for apps you want to integrate with Slack. For example, Google Drive is an example of an app that can be integrated. Installing this app would make sending docs, slides, and sheets from Google Drive within Slack simpler. List of available apps We won’t specify any to integrate at this point, but you’ll want to know that this functionality exists. 36.0.7 Cost of Slack Last but not least, Slack has different plans for different uses. Companies often pay for users’ within their company to have either the standard or plus levels. Details again aren’t important, but it’s important to know certain features are only available with a paid version of Slack. Cost of Slack 36.0.8 Slides and Video Slack Slides "],["basecamp-1.html", "Chapter 37 BaseCamp", " Chapter 37 BaseCamp "],["what-is-r.html", "Chapter 38 What is R?", " Chapter 38 What is R? 38.0.1 Introduction to R R, most simply, is a programming language. Just like there are many different spoken languages throughout the world, there are many different programming languages. Similar to how each spoken language is used by a subset of the humans on this Earth, each programming language was created for a different group of people who code. You may have heard of other programming languages, such as C++, Java, or HMTL previously. These are all enormously popular programming languages, but each has what it does best along with its own disadvantages. For example, if you’re interested in building software that runs really quickly, you may learn C++. If you want to build and edit websites, you would maybe start by learning HTML. And, Java may be most helpful if you want to build video games. R Similarly, R has its strengths and weaknesses. R was designed to be helpful to those interested in statistical computing and graphics. That said, in its simplest form, R is a calculator. If you type ‘3 + 7’ into the R console and hit enter, R will tell you the answer to that math problem is ‘10.’ R is a calculator However, R is much more than just a calculator. It also has the ability to work with data, such as the information in spreadsheets. It’s able to tell you how many rows are in your column. It’s able to find the average age of individuals across a data set. It’s able to create plots to show you how many males or females are included in your data set. And beyond data summary, you can run statistical analyses, write your own software, and carry out complicated analyses start to finish in R. So, while it is a calculator, it is much more than a calculator. It is a place where you can do all of your data analysis. RStudio makes the process of doing an analysis in R easier. 38.0.2 RStudio RStudio is a free, integrated development environment (IDE) for R. Generally, IDEs are software applications that allow software developers to program more efficiently, putting everything the programmer needs in one place. With regards to RStudio specifically, RStudio has a space for the programmer to code, a separate space for that code to run (the Console), a place to see all the objects created in the current session (the Workspace), and a place to see Plots that have been generated. All of these spaces are viewable in a single window, simplifying programming and data analysis. Those who work at RStudio seek to develop tools that support analysts to perform trustworthy and high quality analysis. Their singular goal is to make your life programming in RStudio easier! RStudio IDE 38.0.3 RStudio Cloud RStudio Cloud is a version of RStudio that can run in the cloud. This means that regardless of what computer you’re on, you can access the analysis you were doing previously in your RStudio Cloud session. Other than that, it has many of the same features and is being developed by the same group of people who developed the version of RStudio you download and use on your individual laptop. This means that in RStudio Cloud, like in RStudio, you have four main components, each of which is visible in the same window. To review from the introductory lesson of this series of courses, RStudio Cloud has the following four main components: Scripting - where you write your code Console - where your code runs Environment - where you can see what objects have been created during your analysis Files - where you can see all the files that are part of your project RStudio Cloud There are additional features that you can play around with; however, one important feature to note is that whenever you create a plot in RStudio or RStudio Cloud, it will be visible in the plots tab at the bottom right-hand of your screen. This, and a number of additional features will be discussed in more detail in the next lesson in this course. RStudio Cloud plots 38.0.4 Basic History Knowing the background of a programming language often helps to add some context. So, very briefly, R first appeared in 1993 and was developed to be very similar to another programming language, S. R was initially written by Ross Ihaka and Robert Gentleman in the Department of Statistics at the University of Auckland in New Zealand. Since its inception, many people have contributed code and improvements to R. And, since 1997, the “R Core Team” is responsible for all modifications to the language. R is an open source language. This means that the language is free to use and the source code is available to the general public. As for RStudio, it was first released in 2011. It was founded by J.J. Allaire, who is the company’s current CEO. RStudio Cloud, the cloud-based version of RStudio, was first released for alpha testing (meaning it would have bugs and things that still needed to be fixed and will likely be updated significantly in the coming years) in 2017. R Basic History 38.0.5 Learning R Learning R can be difficult and frustrating. If you get stuck, you’re definitely not alone! The Internet and conversations with others can be very helpful to you! frustration is normal We just wanted to take a second to remind you that getting frustrated is normal and failure is expected. The goal here is to learn how to use R, not to memorize functions (there are too many functions and new ones being made all the time for this to even be possible!). failure is inevitable So, try things out on your own. Try to work through error messages when you’re stuck. But, if you can’t figure it out, ask questions of others who have more experience than you! try first; then ask questions 38.0.6 Slides and Video What is R? Slides "],["rstudio-and-projects.html", "Chapter 39 RStudio and Projects", " Chapter 39 RStudio and Projects You’ve seen RStudio in the first class in the sequence. Remember R is the main software that we are going to use to analyze data in this class. R is one of the two most popular languages for data science. We will learn a lot more about it throughout the courses, but here we are just going to use it to take a peak at the data you have created. R is a piece of software that is used for running computer code. RStudio is a company that makes a piece of software that works with R. RStudio makes it easier to create, save, share, and work with R code and data sets. RStudio is also useful for organizing projects and writing, organizing, and sharing your data science work. If you have a more traditional laptop you can download and install R and RStudio on your laptop. But this class is part of our DataTrail program where we will be teaching you how to do everything through a web browser. Fortunately RStudio also offers a web-based version of their software called RStudio Cloud. 39.0.1 Logging in to RStudio Cloud To use this software, open your web browser and navigate to the website https://rstudio.cloud/. Navigate to RStudio Cloud in your web browser You should see a screen that looks like this. You can click the button in the top right to log in. Log in to RStudio Cloud When you click Log In you will be offered options for Logging in, for our class you will log in with your Google Account so click on that option. Choose to log in with Google Then you will be asked to select which Google account or log in with a new Google account. Click on the Google account you have set up for this course. Choose your Google account You should now see a list of your projects. This is a list of the instructor’s projects, your list will be different. Choose your Google account Now you can create a new project to work on for the rest of this class. To create a new project click on New project in the upper right hand corner. Create a new project If you click on the name of the project - currently it will be Untitled Project - then you can rename it. Click to change the title of the project To make things simple let’s call it my_first_project. You will call it that by typing the name into the box for the project name. Rename the project my_first_project We will come back to this project later and talk about where to put files, data, and other parts of your project. But for now, if you want to see all the projects you have you can click on the words Your Workspace at the top left of the screen. Click on Your Workspace to see all of your projects If you want to return to a project, just click on the project name, for example by clicking on my_first_project. Click a project name to return to your project. You will have more than one project you may want to organize. Projects are organized into Spaces. A space is just a place that lists out multiple projects. To see your other spaces click on the menu bar indicated by the three stacked lines in the upper left. Click a project name to return to your project. If you have done the first course in the sequence then you belong at least to the Introduction to DataTrail Space. You can click on the name of this space in the upper left to see your projects in that space. Click a project name to return to your project. If you want to return to your original space, click again in the top left hand on the menu bar, then click on Your Workspace to return to your main set of projects. Now that you know how to create and navigate projects in the next lecture we will talk about organizing the files that fall within a project. 39.0.2 Getting Started in RStudio Cloud To get started working in RStudio Cloud, you’ll want to go to rstudio.cloud and log in using your RStudio Cloud login. You’ll be logged into your home screen. To get started working on a new project, you would click on the “New Project” blue icon toward the top right. This will create a new project. However, all your old projects will be listed at left underneath “Spaces.” You can always return to an old project or start a new one. RStudio Cloud Home Screen - New Project By starting a new project you’ll be brought to a screen where three spaces are available. RStudio Cloud Project However, if you remember from previously, there are four main quadrants when working in RStudio Cloud. To access the fourth space, you’ll have to start a new R Script. To do so, you’ll click on File, hover over New File from the drop-down menu that appears, and then click “R Script” from the drop-down menu. Open up a new R Script This will open up a new R Script, which is currently called “Untitled1,” which you can see on the tab at the top left of the quadrant has just appeared. RStudio Cloud 39.0.3 The Tour Now that RStudio Cloud is opened and you have access to each of four quadrants, we can discuss and review each quadrant’s purpose. We will go through each of the regions and describe some of their main functions, so follow along with each step and make sure you understand the function and how to access each part of RStudio Cloud on your own. But, it would be impossible to cover everything that RStudio can do, so we urge you to explore RStudio Cloud further on your own too! RStudio’s quadrants 39.0.3.1 The menu bar In addition to the four main quadrants, there is also a menu bar. The menu bar runs across the top of your screen and should have two rows. The first row should be a fairly standard menu, starting with “File” and “Edit.” Below that, there is a row of icons that are shortcuts for functions that you’ll frequently use. The commonly used options of the main menu bar To start, let’s explore the main sections of the menu bar that you will use. The first is the File menu. Here we can open new or saved files, save our current document, or close RStudio. As we saw earlier in this lesson, if you mouse over “New File”, a new menu will appear that suggests the various file formats available to you. R Script and R Markdown files are the most common file types for use, but you can also generate R notebooks, web apps, websites, or slide presentations. If you click on any one of these, a new tab in the “Source” quadrant will open. We’ll spend more time in a future lesson on R Markdown files and their use. The File menu The Session menu has some R specific functions, in which you can restart, interrupt or terminate R - these can be helpful if R isn’t behaving or is stuck and you want to stop what it is doing and start from scratch. The Session menu The Tools menu is a treasure trove of functions for you to explore. For now, you should know that this is where you can go to install new packages (see the next lesson in this course!), set up your version control software (GitHub was discussed in the last course in this series!), and set your options and preferences for how RStudio looks and functions. For now, we will leave this alone, but be sure to explore these menus on your own once you have a bit more experience with RStudio and see what you can change to best suit your preferences! The Tools menu 39.0.3.2 Console This region should look familiar to you - when you opened R, you were presented with the console. This is where you type and execute commands, and where the output of these commands is displayed. The console To execute your first command, at the &gt; prompt, try typing 1 + 1. Then, hit enter. You should see the output [1] 2 below your command. Typing into the console and getting an output 39.0.4 Source: script editor panel However, often you want to write code and save it so that you can open the code again and re-run it later. This saved file with code in it is referred to as a script. When you want to write code and save it in a script, you’ll do this in the Source panel. To get started in your script file, copy and paste the following into your Source quadrant (top-left). example &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2) To run this code, you can’t just hit enter (as you were able to do in the Console). Hitting enter will just bring your cursor to the next line in the script. Instead, with your cursor in the line of code you want to run, you can click on “Run” at the top right of your script file. This will execute the code in the Console. Note Alternatively, to run code, with your cursor on the line of code you’d like to run, you could hit ‘ctrl + enter’ to run that line of code. This will save you a lot of time as you start writing a lot of code and analyzing data. Practice this keyboard shortcut now! What this code does is create an object (we’ll define what that is soon!) called ‘example’ that has the numbers 1 through 8 in four different rows and two different columns. To see what this object looks like, we’ll take a look at the environment quadrant of RStudio Cloud. 39.0.4.1 Environment (&amp; History) To view this object we’ve just created, you’ll first want to ensure that the object was created. In the Environment quadrant, you should see that ‘example’ is now there. The object was created! The environment quadrant Then, just click anywhere on the “example” line, and a new tab on the Source quadrant should appear, showing the matrix you created. Your newly made object, opened in a new tab of the source panel RStudio Cloud also tells you some information about the object in the environment, like whether it is a list or a data frame or if it contains numbers, integers or characters. This is very helpful information to have as some functions only work with certain classes of data. We’ll get into the details of all this later, but for now, knowing that this information is in the Environment tab is enough. The quadrant has two other tabs running across the top of it. We’ll just look at the History tab now. Your history tab should look something like this: The history tab Here you will see the commands that we have run in this session of R. If you click on any one of them, you can click “To Console” or “To Source” and this will either rerun the command in the console, or will move the command to the source, respectively. From History to Source Do so now for your View(example) object and send it to Source. Sending ‘View(example)’ from History to Source This line of code is now in your Source document. When you save this document, you’ll also have this line of code saved for future use. 39.0.4.2 Saving Script Files Now that you’ve created a script with code in it, you likely want to save it. To do so, you’ll want to click on the save icon. Save Icon In RStudio Cloud this will open a Save File window. Save File Window In the File Organization Course, you learned that code is saved in a directory called code. So, we’ll first create a “New Folder”. New Folder We’ll name this folder “code” by typing it in the box and clicking “OK”. Create code folder After creating this new folder, as discussed in a previous lesson, you’ll see along the top that you’re now in the “code” directory. Within this folder, we’ll create another new folder called “raw_code.” Create raw_code folder This is where we’ll save this file as “R_basics.R” by typing that in the File name: box and clicking “Save.” Save file by typing file name in “File name:” box This file name ‘R_basics.R’ will now show up in the tab at the top of the R Source quadrant. 39.0.5 Files/Help/Plots/Packages/Viewer 39.0.5.1 Files You can also see where this file is saved using the fourth and final quadrant in RStudio Cloud that we’ll discuss. In this final quadrant you’ll see five tabs: Files, Plots, Packages, Help, and Viewer. Files, Plots, Packages, Help, Viewer In Files, you can see everything in your current working directory. You should now be able to see the code folder you just created. code directory in Files tab By clicking on that folder, you should then see the raw_code folder you created. raw_code folder in Files tab By clicking on this, you’ll see the script file you just saved! R_basics.R is saved in code/raw_code/ After you save a file in a folder, if you realize it’s not where you wanted it, you do have the option to move it around. To do so, click on the check box of the file you want to move, and click on the “More” icon to expose options. Click through these to move your file to where you actually wanted it. The “More”” icon 39.0.5.2 Plots In the Plots tab, if you generate a plot with your code, it will appear here. You can use the arrows to navigate to previously generated plots. The Zoom function will open the plot in a new window, that is much larger than the quadrant. Export is one way to save the plot. (Saving plots will be discussed in more detail in a future lesson.) The broom icon clears all plots from memory. The plots tab 39.0.5.3 Packages The Packages tab will be explored more in depth in the next lesson on R packages. Here you can see all the packages you have installed, load and unload these packages, and update them. The packages tab 39.0.5.4 Help The Help tab is where you find the documentation for your R packages and various functions. In the upper right of this panel there is a search function for when you have a specific function or package in question. Navigating this tab will be discussed in more detail in a later lesson in this course. The help tab 39.0.6 Swirl Throughout the courses in this Course Set, we’ll be using something called Swirl modules to practice the R code learned in many of the lessons. These modules will all be run within RStudio Cloud. To make sure that you’re comfortable using Swirl, we’ll go through the steps on where to go to run Swirl and how to work through a module. This will be important as many of the quizzes accompanying these lessons will require you to use Swirl. Follow the steps in this section of the lesson to get started with your first Swirl module! Throughout this Course Set, whenever you’re asked to complete a Swirl module, you’ll always start in the same place: the RStudio Cloud DataTrail Space. Click on this link now. If prompted, log into your RStudio Cloud account. Cloud-based Data Science on RStudio Cloud Among the projects listed you’ll see one called “swirl” (You may have to scroll down on the list to see it.). To the right of swirl, you’ll want to click on “Copy”. make a copy of “swirl” project This project contains all of the swirl modules you’ll be completing throughout the quizzes in this course set. For each module you’re supposed to complete, there will be a quiz question specifying which you’re supposed to complete. But for now, let’s just get comfortable with how swirl works. Any time you are within this space and supposed to complete a swirl module you’ll start by first loading the swirl package (it has already been installed in that space for you) and running the command swirl(): ## load package library(swirl) ## start swirl swirl() As a reminder, to run code, with your cursor on the line of code you’d like to run, you can hit ‘ctrl + enter’ to run that line of code. Similarly, if there are multiple lines you want to run, you can highlight the lines you want to run and again hit ‘ctrl + enter’ to run those lines of code. This will bring up a prompt asking you what swirl should call you. Type your first name as a response here and hit “enter.” starting swirl Swirl will often send you some text to read. Always read the text as this text will help explain the background information you need or will provide you with information you need to answer the question. At this point, swirl is explaining that when you see ..., that’s when you should press “enter” to continue. When you see &gt; or a list of options (like 1:, 2:, 3), that lets you know swirl is looking for something from you! When you see &gt; that’s a prompt letting you know swirl is expecting you to write some code. When you see a list of options, those are the possible answers to a question you’re being asked. In these cases, you’ll want to select the number corresponding to the right answer. For this practice in swirl, select 1, 2, or 3 and press enter. Getting started in swirl You’ll then be given a number of options that you can use within swirl whenever you see the &gt; prompt. Read the list here, but know that info() gives you this list of options again, main() returns you to swirl’s main menu, and bye() saves your progress but exits swirl. swirl menu options After this, you will be shown a list of courses. The list will be longer than what you see here, but we’re showing this simple example to demonstrate that if you wanted to start on the course “DataTrail Introduction to R”, you would type 1. You’ll be told which course to select throughout the course set. Selecting a course Note that for each quiz question you complete in swirl, upon completion, you’ll receive a code. This code is to be entered as the answer to the quiz question on Leanpub. That’s a basic introduction to using swirl. You’ll have lots of quiz questions that require you to use swirl in this Course Set, so be sure to walk through this introduction on RStudio Cloud now and get comfortable navigating within swirl. 39.0.7 Summary In this lesson we took a tour of RStudio Cloud. We became familiar with the main menu and its various menus. We looked at the Console, where R code is input and run. We then moved on to the Environment panel that lists all of the objects that have been created within an R session and allows you to view these objects in a new tab in Source. In this same quadrant, there is a History tab, that keeps a record of all commands that have been run. It also presents the option to either rerun the command in the Console, or send the command to Source, to be saved. Source is where you save your R commands. And the bottom right quadrant contains a listing of all the files in your working directory, displays generated plots, lists your installed packages, and supplies help files for when you need some assistance! Take some time to explore RStudio Cloud and get more comfortable navigating swirl on your own! 39.0.8 Slides and Video RStudio Cloud Tour Slides "],["managing-files-in-the-terminal.html", "Chapter 40 Managing Files in the Terminal", " Chapter 40 Managing Files in the Terminal As was discussed in the first lesson of this course, one of the most important aspects of being a productive data scientist is staying organized. And a big part of staying organized is in managing your files: knowing where they are located and manipulating them with ease. In these next few lessons, we will be getting you fluent in orienting yourself in file systems in two areas: the Terminal and R/RStudio. In this lesson, we will focus on working with the Terminal. 40.0.1 What is the Terminal? The Terminal is an interface to the operating system of a computer. That is, it provides a way for you to type commands in order to perform actions on a computer. For example, there are commands to create new files and folders and to open files and folders. On your computer, you are familiar with using your mouse to perform such actions. When you are working with data on RStudio Cloud, however, you will not be able to use your mouse for everything that you’ll want to do. It will be important for you to become comfortable with using the Terminal as a place for purely text-based commands. In RStudio Cloud, the Terminal is located in the tab next to the Console. Locating the Terminal in RStudio Cloud When you click on this tab, you will see a pane that looks as follows: The Terminal prompt You will always see a string of text at the beginning of the line. This is called the Terminal prompt. To the right of the dollar sign, you will be entering your commands. The Terminal is going to be extremely important for efficient management of your files. You will also use it extensively in the next course when you learn about version control systems and GitHub because it is the primary interface for working with those tools. 40.0.2 Why manage files in the Terminal? As we’ve discussed, the Terminal is a command-based interface to a computer operating system. This turns out to be a very flexible and fast way to manage your files once you become comfortable with a few commands. Let’s say that you wanted to make a copy of a folder. Whether on RStudio Cloud or on Google Drive, you would need to go through a series of clicks and typing to find that folder, copy it, and rename it. Within the Terminal, this can all be achieved with a single command. 40.0.3 File system example and vocabulary To set up an example of a file system that we’ll be using throughout this lesson, let’s take a look again at the folder structure/directory structure that you created earlier in this course. Within a project folder, it is recommended that you set up the folders within as below. We will be working with this directory setup in an RStudio Cloud project. Directory structure In future courses, whenever you write code and run commands within R to work with data, or whenever you use Git commands to document updates to your files, you will be working in a particular location. To know your location within a file system is to know exactly what folder you are in right now. The folder that you are in right now is called the working directory. Your current working directory in the Terminal may be different from your current working directory in R and may yet even be different from the folder shown in the Files pane of RStudio. The focus of this lesson is on the Terminal, so we will not discuss working directories within R until the next lesson. Knowing your working directory is important because if you want to tell Terminal to perform some actions on files in other folders, you will need to be able to tell the Terminal where that folder is. That is, you will need to be able to specify a path to that folder. A path is a string that specifies a sequence of folders to traverse in order to end up at a final destination. The end of a path string may be a file name if you are creating a path to a file. If you are creating a path to a folder, the path string will end with the destination folder. In a path, folder names are separated by forward slashes /. For example, let’s say that your current working directory in the Terminal is the raw_code directory, and you wish to navigate to the exploratory subfolder within the figures folder to see the graphics you’ve created. Definitions: working directory and path There are two types of paths that can lead to that location. The first is called a relative path which gives a path to the destination folder based on where you are right now (in raw_code). A little later in this lesson you’ll learn how to construct relative paths. Relative path Alternatively, you can specify an absolute path. An absolute path starts at the root directory of a file system. The root directory does not have a name like other folders do. It is specified with a single forward slash / and is special in that it cannot be contained within other folders. In the current file system, the root directory contains a folder called cloud, which contains a folder called project. This project folder contains the four main folders that you learned about in a previous lesson. A little later in this lesson you’ll learn how to construct absolute paths. Absolute path Analogy: The root directory is analogous to a town square, a universal starting location. The desired destination location might be the baker. An absolute path specifies how to reach the bakery starting from this universal starting location of the town square. However, if we are in the library right now, a relative path would specify how to reach the bakery from our current location in the library. This could be pretty different than the path from the town square. 40.0.4 Important commands Now that you have some vocabulary, we can delve into details about creating and using paths with different Terminal commands for managing files. 40.0.4.1 Where am I right now? If you want to know your current working directory with the Terminal (what folder you are in), you can use the pwd command by typing pwd at the Terminal prompt and hitting Enter. This stands for “print working directory”, and it prints the absolute path to your current location. In the example below we are in the project folder within the cloud folder. We can determine that this is an absolute path because it starts with a forward slash /. pwd command 40.0.4.2 What is in this folder? If you want to know what files and folders are contained within your current directory, you can use the ls command. This stands for “list”, and it lists the files and folders within the current directory. If you just use the ls command without any options, the contents will be displayed horizontally across lines. If you add the -lh option with a space after the initial ls command, the output is displayed more nicely. The l part displays the results in a longer form with more information than just the file name. The h part displays the file sizes in a human-readable format. The most important pieces of information are in the last three columns, which display the file or folder size, the date the file or folder was last modified, and the name of the file or folder. You can also list the contents of a specific folder by specifying an absolute or relative path after the main ls command. In the example below, we list the contents of the products subfolder using a relative path. ls command When you use ls without specifying any path, it displays the contents of the current working directory. You can get the same results by specifying a period . for the path, as shown below. The period stands for the current working directory. ls command 40.0.4.3 Change directory If you would like to change your current working directory, you can use the cd command. This stands for “change directory” and moves you to the folder that you specify with a path after cd. If I want to move to the raw_data folder, I can specify this with a relative path data/raw_data/ because I am currently in the cloud/project/ folder. When you type these paths, it will be incredibly useful to use the tab completion feature of Terminal. With tab completion, you can partially type part of a folder or file name and hit tab to automatically fill in the remainder of the name. So here I can type cd da, and when I hit tab, this will automatically complete to cd data/ because there are no other files or folders in this folder that start with da. From here I can type cd data/r and hit tab to automatically fill in the complete command cd data/raw_data/. Tab completion tries to fill in as much as possible but may not fill in completely if you have multiple folders that start with the same letters. If I had a folder called dance in the project folder, tab completion of cd da would not proceed further, but cd dat would. Try this out when you’re typing at the Terminal prompt - it will save you a lot of time! In addition, if you want to move one directory up, for instance going from the folder data/raw_data to data, you can use the command cd ... cd command I could also have specified an absolute path with cd /cloud/project/data/raw_data/. In this case, because of my initial working directory, both the relative and absolute paths take me to the same folder. Note that we have checked our updated working directory with the pwd command. Also note that this path matches the part of the Terminal prompt just before the dollar sign. This is a way to doubly verify where you are within the file system. cd command If you try to change directory to a nonexistent folder, you will get an error message that looks as below: Error with the cd command 40.0.4.3.1 Absolute vs. relative paths Let’s go a little bit further with exploring the difference between absolute and relative paths. Let’s say that I have some code in the raw_code folder, and in that code, I want to create some exploratory graphics in the exploratory folder. Using our file system on RStudio Cloud, the path to the exploratory folder could be specified with the absolute path /cloud/project/figures/exploratory/. However, if someone else copies over the four main folders (data, code, figures, and products) onto their own computer and puts them inside folders with different names, this absolute path will not work. Why? Because this person happens to have the root and work folders instead of the cloud and project folders. Absolute paths are not portable Rather than using an absolute path, a robust way to specify the path to the exploratory folder is with a relative path. In this way, our code will work on all computers, which is essential for data science work. Specifying this relative path is a little more complicated than we have seen earlier because we have to traverse up through some folders that contain our current working directory and down through another set of folders. To specify the folder containing the current working directory, we use ../. When we are in the raw_code folder, the ../ specifies the code folder because it is the one directly containing our current directory. However, to enter the figures folder, we need to go up one more level to the folder that contains the code folder. On our RStudio Cloud, this is the project folder, but for this other person, it is the work folder. We can go up one more folder level with another ../. So the complete relative path from raw_code to exploratory is ../../figures/exploratory/. Relative vs absolute paths Let’s look at one more example to reinforce these ideas. Our current working directory is the raw_code directory. We want to specify a path to the final_code directory. There are several ways to do achieve this, but the first listed below is the most straightforward. ../final_code/ ../../code/final_code/ ../../../work/code/final_code/ Additional example for relative paths 40.0.4.4 Cycling through previous commands Often when working in the Terminal, you will want to run the same or similar commands that you have run earlier. For example, you may want to change directories, list files, and then repeat this process as you change to other directories. You can avoid typing commands over and over by using the up and down arrow keys at the Terminal prompt. Hitting the up arrow key once pulls up the last command that you entered. Hitting the up key twice pulls up the command you entered two times ago. Now hitting down will pull up your last command again. You can keep hitting up and down to cycle through your previous commands. Try this out when you are typing at the Terminal! 40.0.4.5 The wildcard operator In several different Terminal commands, it can be useful to specify only part of a file or folder name. For example, if we go to the raw_code folder and use the ls command, we see that there are 4 files. In larger projects, there may be many more files and we might not want to view all of them. We can specify certain patterns of files to list after the main ls command using part of the file name combined with the * wildcard operator. This operator matches any number of characters. So to list only files that start with “clean”, we can use ls -lh clean*. To only list files that contain “dataset1”, we can use ls -lh *dataset1* to match any characters on either side of the “dataset1” pattern. This will be useful when you work more with GitHub, starting in the next course. Wildcard operator 40.0.4.6 Copying files and folders Copying files and folders will come up often during your work. You may want to copy a messy code file to a new file to begin cleaning it up. It may be useful to do this for an entire folder. To copy in Terminal, we can use the cp command. To copy one file, the syntax is cp path_to_original_file path_to_new_file The path to the original file and the path to the new file can be absolute or relative paths. In the path to the new file, you can specify a different file name to rename it. In the example below, the first command cp clean_dataset1.R ../final_code/ copies the clean_dataset1.R file to the final_code folder and keeps the same name. The second command cp clean_dataset1.R ../final_code/clean_dataset1_renamed.R specifies the relative path and a new file name. When we list the contents of the final_code folder, we see both the originally named file and the renamed file. Copying a single file We can combine copying with the wildcard operator to copy multiple files. This does not rename the files. We can also copy multiple files into a directory by naming the files explicitly. That is cp analyze* ../final_code/ achieves the same as cp analyze_dataset1.R analyze_dataset2.R ../final_code/. Copying multiple files To copy a folder, we must specify the recursive option -r in order to copy all of the files and folders inside the one being copied. In the example below, using cp final_code/ publication_code doesn’t work, but cp -r final_code/ publication_code does work. Note that a final forward slash at the end of final_code and publication_code is optional. In these examples, you will see the trailing forward slash when tab completion was used to speed up typing. Copying a folder 40.0.4.7 Moving files and folders In the process of organizing your files, you will undoubtedly need to move files and folders to different locations. To move files and folders in Terminal, we can use the mv command. This command also renames files and folders. Similar to the copy command, the syntax for moving one file is mv path_to_original_file path_to_new_file Just as with copy, the path to the original file and the path to the new file can be absolute or relative paths. In the path to the new file, you can specify a different file name to rename it. In the example below, the first command mv ../final_code/clean_dataset1_renamed.R . moves the clean_dataset1_renamed.R file to the current working directory (indicated by the period at the end of the command) and keeps the same name. The next two commands mv clean_dataset1.R tidy_dataset1.R and mv clean_dataset2.R tidy_dataset2.R rename the files in the working directory to start with tidy instead of clean. When we list the contents of the working directory, we see both the moved file and the two renamed files. Moving a single file We can combine moving with the wildcard operator to move multiple files. This does not rename the files. We can also move multiple files into a directory by naming the files explicitly. This is achieved with mv tidy_dataset1.R tidy_dataset2.R ../raw_code/. Moving multiple files To move a folder into another folder, we use the same syntax for moving a single file: mv path_to_folder_being_moved destination_path In the example below, we achieve this with mv raw_code/ publication_code/. We can also rename a folder by specifying a new name for the destination path. In the example, we achieve this with mv publication_code/ pub_code. Moving and renaming a folder 40.0.4.8 Deleting files and folders To delete files and folders in the Terminal, we can use the rm command, which stands for remove. To remove a single file, the syntax is as follows: rm path_to_file_to_delete To remove multiple files, you can specify paths to multiple files separated by spaces or use the wildcard operator. Examples are shown below. Deleting files To delete a folder, we must specify the recursive option -r in order to recursively delete all of the files and folders inside the one being deleted. This is exactly as we had to do with copying a folders. In the example below, using rm final_code/ doesn’t work, but rm -r final_code/ does work. Deleting a folder Be very careful when deleting files and folders because this action is irreversible! In particular, rm * will delete all files in the current working directory. If you are using the wildcard operator, test your wildcard pattern with an ls command before deleting anything. 40.0.4.9 Creating files and folders To create an empty file in the Terminal, we can use the touch command with touch path_to_file. The file will be empty, but it serves as a placeholder in case you decide to later open and edit the file. Creating a new file To create a new directory in the Terminal, we can use the mkdir command, which stands for “make directory.” After mkdir, type the path to the folder that we want to create. Creating a new directory 40.0.5 Summary The Terminal is an interface to the operating system of a computer that you will be using to manage your files and to interface with GitHub, which will be covered in the next course. The essentials of navigating in the Terminal include knowing exactly what folder you are in with the pwd command and changing folders with the cd command. The essentials of managing files in the Terminal includes listing files with the ls command, copying them with cp, moving them with mv, and deleting them with rm. When you work with Git commands in the next course, you will be using the Terminal to navigate to the correct working directory and using Git commands to track changes you make in specified files. In order to specify those files, you will need to be comfortable with entering relative paths, as we covered in this lesson. Because Git commands allow use of the * wildcard operator, it will be useful for you to become comfortable with writing wildcard patterns to match multiple files. You can always test your patterns with an ls command to see that the desired files are being listed. To create new files, you can use the touch command, and to create new folders, you can use the mkdir command. Overall, managing your files in the Terminal will save you a lot of time in the long run compared to manual clicking. 40.0.6 Additional Resources The ls command The cp command The mv command The rm command 40.0.7 Slides and Video Managing Files in the Terminal Slides "],["managing-files-in-r.html", "Chapter 41 Managing Files in R", " Chapter 41 Managing Files in R In this lesson, we will continue our tour of ways in which you will be managing files as a data scientist. In the previous lesson, you learned about the Terminal and its command-based interface to the file system on RStudio Cloud. In this lesson, you will learn in small part about the R programming language and in large part about specific tools within R to manage files. You will learn much more about R for its capabilities in data science work in future courses. 41.0.1 Why manage files in R? As a data scientist, you will find it very useful to automate the management and organization of files. In the previous lesson, you learned about the power of the Terminal to run commands that allow you to more efficiently manage files than standard clicking and typing. However, for some tasks with larger scale data projects, it will be easier to work with files programmatically in R rather than at the Terminal. Why? Because R is programming language, you will be able to manage files in complex situations where your actions are dependent on lot of other information. For example, if you are working with hundreds of different files, moving them to a location that depends on information in the files is much easier with a programming language such as R rather than at the Terminal. Also, in order to completely document your work in going from raw files to finished products, a good approach is to combine your data work in R (to be covered in later courses) with your file organization work in R. 41.0.2 Navigating to R in RStudio Cloud When you open a project in RStudio Cloud, you will see a Console pane that is immediately next to the Terminal pane. Usually this pane is automatically open when you open a project. The &gt; that you see in the R console is called the R prompt. It is analogous to the Terminal prompt in that it is where you can type and enter R commands. Locating the Console in RStudio Cloud 41.0.3 File system setup We’re going to be using the same file system setup as in the previous lesson. The file system is shown below. Only the raw_data and raw_code folders contain files. In this lesson, we will be working within this file system to illustrate useful file manipulation functions within R. Example file system 41.0.4 Important functions 41.0.4.1 What is my working directory? Recall from the previous lesson that a working directory is the folder that you are currently in within a file system. We discussed that the working directory within the Terminal may be different from the working directory within R, and both of these may be different from the Files pane in RStudio. To determine your working directory in R, you can use the getwd() function, which stands for “get working directory.” When you type getwd() at the R prompt and hit enter, you will see the absolute path to your working directory displayed in quotes on a new line. As with working in the Terminal, knowing the working directory in R is important because when you run code that refers to other files, R will search for those files relative to this directory. getwd() is analogous to pwd in the Terminal. getwd() 41.0.4.2 Set the working directory In Terminal you learned about the cd command to change the current (working) directory. In R, use the setwd() function, which stands for “set working directory.” Inside the parentheses, type an absolute or relative path in quotes. Just as in the Terminal, tab completion can save typing time and help prevent incorrect spelling. When you hit tab after typing part of a path, RStudio provide a drop down menu of files and folders that fit what you have typed. You can select between them with the arrow keys or your mouse and hit enter to autocomplete. Note also that the absolute path to the current working directory is displayed in the status bar beneath the Console tab. The working directory is not automatically updated or reflected in the Files pane however. Additionally, the Console and the Terminal do not talk to one another. When you set your working directory in one, it does not change the working directory in the other. This is important to keep in mind when you’re working. In fact, the working directory in the Terminal, Console, and Files tab can all be different. setwd() 41.0.4.3 What is in this folder? In Terminal you learned about the ls command for listing the contents of a directory. In R, use the list.files() function. Without anything in the parentheses, R will list the files in the current working directory. Otherwise, you can include a relative or absolute path in quotes. In the example below we see that using no path gives the same result as specifying the current directory with a period. When we list the files in the raw_code directory, four files are listed. The numbers in the square brackets just help us count in the displayed output. An option when using list.files() is to type full.names = TRUE after the initial path and a comma. Doing this displays the full relative paths to those files. Note that if the path ends in a forward slash, there will be two forward slashes before the filename in the output. This is not a problem, but if you prefer to not have two forward slashes, omit the trailing forward slash when you type the path. list.files() 41.0.4.4 Create a file In Terminal you learned about the touch command to create a blank file. In R, use the file.create() function. In parentheses, provide a path to the file to create. If this is successful, R will display TRUE and FALSE otherwise. You can verify that the file has been created by using list.files(). As in Terminal, you can quickly cycle through recent commands using the up and down arrow keys. file.create() 41.0.4.5 Moving and renaming a file In Terminal you learned about the mv command for moving and renaming files. In R, use the file.rename() function. In the parentheses, you provide two paths separated by a comma. The first path is the path to the origin file. The second path is the path to the destination file. In the first example, we move the data3.txt file and keep the same name by specifying a different sequence of folders at the beginning of the second path and keeping the same file name. In the second example, we move and rename simultaneously by specifying a different sequence of folders and a different file name. If the renaming is successful, R will display TRUE and FALSE otherwise. file.rename() 41.0.4.6 Copy a file In Terminal you learned about the cp command for copying and renaming files. In R, use the file.copy() function. This function works similarly to file.rename() in that you have to supply the path to the original file first and the path to the destination second. If the copy is successful, R will display TRUE and FALSE otherwise. The first example copies the data3_renamed.txt file to the data3.txt file. In the second example, we try to do this again but fail because data3.txt already exists, and R will not overwrite a file by default. In example 3, we specify overwrite = TRUE after the two paths and a comma to explicitly overwrite the data3.txt file. file.copy() 41.0.4.7 Remove a file In Terminal you learned about the rm command for deleting files. In R, use the file.remove() function. In the parentheses, provide a path to the file you want to delete in quotes. If the deletion is successful, R will display TRUE and FALSE otherwise. file.remove() 41.0.4.8 Does a file exist? In Terminal you used the ls command to list the contents of a directory for verifying what files and folders are present. If you want to check whether a particular file exists, you can use the file.exists() function in R. In the parentheses, provide a path to the file of interest. In the first example, we show the usage for a single file. For data1.txt, R displays TRUE because this file exists. In the second example, we show the usage if you want to check the existence of multiple files. The multiple files are specified in what is called a character vector. The two paths are separated by a comma in the c() function which is the concatenation function. In this case, R displays TRUE then FALSE because data2.txt exists but data4.txt does not. You will learn much more about character vectors and the c() function in later courses devoted to R. Note that the other functions we covered in this lesson (except getwd() and setwd()) can also be used on multiple files by supplying character vectors of paths instead of single paths. You will have a chance to try these out when you learn more about R and begin working on projects. file.exists() In this lesson, you learned about R functions that are analogous to Terminal commands for managing files. As you work on projects, you’ll gain an appreciation for the benefits of managing files using a programming language. 41.0.5 Slides and Video Managing Files in R Slides "],["r-packages.html", "Chapter 42 R Packages", " Chapter 42 R Packages Now that we’ve looked at R and RStudio and have a basic understanding of how they work together, we can get at one thing that makes R so special: packages. 42.0.1 What is an R package? So far, anything we’ve played around with in R uses the “base” R system. Base R, or everything included in R when you download it, has rather basic functionality for statistics and plotting but it can sometimes be limiting. To expand upon R’s basic functionality, people have developed packages A package is a collection of functions, data, and code conveniently provided in a nice, complete format for you. At the time of writing, there are just over 17,600 packages available to download - each with their own specialized functions and code, all developed for a specific but different purpose. For a really in depth look at R Packages (what they are, how to develop them), check out Hadley Wickham’s book from O’Reilly, “R Packages” Side note: A package is not to be confused with a library (these two terms are often conflated in colloquial speech about R). A library is the place where the package is located on your computer. To think of an analogy, a library is, well, a library… and a package is a book within the library. The library is where the books/packages are located. Packages are what make R so unique. Not only does base R have some great functionality but these packages greatly expand its functionality. And perhaps most special of all, each package is developed and published by the R community at large and deposited in repositories. 42.0.2 What are repositories? For R packages, a repository is central location where many developed packages are located and available for download. Note: You may remember the word “repository” from an earlier lesson on GitHub. Like in GitHub, where a repository was where all the code for each data science project is stored, the repositories for R packages are also places where information and code are stored. (In fact, as you’ll see below, GitHub repositories are one of the main repositories for R packages!) There are three big repositories for R packages: 1. CRAN (Comprehensive R Archive Network): R’s main repository (&gt;12,100 packages available!) 2. BioConductor: A repository mainly for bioinformatic-focused packages 3. GitHub: A very popular, open source repository (not R specific!) Take a second to explore the links above and check out the various packages that are out there! 42.0.3 How do you know what package is right for you? So, you know where to find packages… but there are so many of them, how can you find a package that will do what you are trying to do in R? There are a few different avenues for exploring packages. First, CRAN groups all of its packages by their functionality/topic into 35 “themes.” It calls this its “Task view.” This at least allows you to narrow the packages you can look through to a topic relevant to your interests. Second, there is a great website, R Documentation, which is a search engine for packages and functions from CRAN, BioConductor, and GitHub (ie: the big three repositories). If you have a task in mind, this is a great way to search for specific packages to help you accomplish that task! It also has a “task” view like CRAN, that allows you to browse themes. More often, if you have a specific task in mind, Googling that task followed by “R package” is a great place to start! From there, looking at tutorials, vignettes, and forums for people already doing what you want to do is a great way to find relevant packages. 42.0.4 How do you install packages? Great! You’ve found a package you want… How do you install it? 42.0.4.1 Installing from CRAN If you are installing from the CRAN repository, use the install.packages() function, with the name of the package you want to install in quotes between the parentheses (note: you can use either single or double quotes). For example, if you want to install the package ggplot2, you would use: install.packages(\"ggplot2\") Try doing so in your R console! This command downloads the ggplot2 package from CRAN and installs it onto your computer. If you want to install multiple packages at once, you can do so by using a character vector (we’ll get back to exactly what that means in a later lesson in this course!), like: install.packages(c(\"ggplot2\", \"devtools\", \"lme4\")) If you want to use RStudio’s graphical interface (meaning you would point-and-click more than you would type into the console) to install packages, go to the Tools menu, and the first option should be “Install packages…” If installing from CRAN, select it as the repository and type the desired packages in the appropriate box. You can install through the console interface using the above commands or using the Install Packages menu option Select the appropriate repository and type in your desired packages 42.0.4.2 Installing from Bioconductor The BioConductor repository uses their own method to install packages. While you get started and learn to code in R, you will likely not be installing packages from Bioconductor; however, if you later on work in biology-focused fields, you’ll want to know about Bioconductor. So, we’ll cover this now so you know about Bioconductor, even if you don’t install most of your packages from this repository right now. First, to get the basic functions required to install through BioConductor, use: install.packages(\"BiocManager\") This makes the main install function of BioConductor, BiocManager::install(), available to you. Following this, you call the package you want to install in quotes, between the parentheses of the BiocManager::install command, like so: BiocManager::install(\"GenomicFeatures\") 42.0.4.3 Installing from GitHub This is a more specific case that you probably won’t run into too often as you just get started working in R. As packages are developed, the code is frequently put into a GitHub repository. At this point, as long as the repository is public, anyone can install the package in RStudio. However, most developers, once a package is complete, will submit it to CRAN (the first repository discussed above), making it stably available to all R users. Thus, most of the packages discussed throughout these courses will be available from CRAN. However, newer packages that are still under active development will likely have to be installed directly from GitHub. In the event you want to do this, you first must find the package you want on GitHub and take note of both the package name AND the author of the package. Check out this guide for installing from GitHub, but the general workflow is: install.packages(\"devtools\") - only run this if you don’t already have devtools installed. If you've been following along with this lesson, you may have installed it when we were practicing installations using the R console library(devtools) - more on what this command is doing immediately below this install_github(\"author/package\") replacing “author” and “package” with their GitHub username and the name of the package. 42.0.5 Loading packages Installing a package does not make its functions immediately available to you. First you must load the package into R; to do so, use the library() function. Think of this like any other software you install on your computer. Just because you’ve installed a program, doesn’t mean it’s automatically running - you have to open the program. Same with R. You’ve installed it, but now you have to “open” it. For example, to “open” the “ggplot2” package, you would run:library(ggplot2) NOTE: Unlike when you’re installing a package, when loading a package, you do not have to put the package name in quotes. There is an order to loading packages - some packages require other packages to be loaded first. These other packages are known as dependencies. When you install a new package, that new package’s manual/help pages will automatically determine what packages this new package is dependent upon and will install those packages as well. If you want to load a package using the RStudio interface, in the lower right quadrant there is a tab called “Packages” that lists out all of the packages and a brief description, as well as the version number, of all of the packages you have installed. To load a package just click on the checkbox beside the package name Find the package you want to load from the list of installed packages and check the box to load it 42.0.6 Updating, removing, unloading packages Once you’ve got a package, there are a few things you might need to know how to do: 42.0.6.1 Checking what packages you have installed If you aren’t sure if you’ve already installed a package, or want to check what packages are installed, you can use either of: installed.packages() or library() with nothing between the parentheses to check! In RStudio, that package tab introduced earlier is another way to look at all of the packages you have installed. 42.0.6.2 Updating packages Like your projects in GitHub, packages are version controlled. As updates are made to packages, the version on the package will change and be updated. To see if packages you’ve installed need an update, use the function old.packages(). This will identify all packages that have been updated since you installed them/last updated them. To update all packages, use update.packages(). If you only want to update a specific package, just use once again install.packages(\"packagename\") Within the RStudio interface, still in that Packages tab, you can click “Update,” which will list all of the packages that are not up to date. It gives you the option to update all of your packages, or allows you to select specific packages. If all of your packages are up to date you will get the message “All packages are up to date.” Using the Update menu, you can select all or some of the packages you have installed that you can update You will want to periodically check in on your packages and check if you’ve fallen out of date - be careful though! Sometimes an update can change the functionality of certain functions, so if you re-run some old code, the command may be changed or perhaps even outright gone and you will need to update your code too! 42.0.6.3 Unloading packages Sometimes you want to unload a package in the middle of a script - the package you have loaded may not play nicely with another package you want to use. To unload a given package you can use the detach() function. For example, detach(\"package:ggplot2\", unload=TRUE) would unload the ggplot2 package (that we loaded earlier). Within the RStudio interface, in the Packages tab, you can simply unload a package by unchecking the box beside the package name. 42.0.6.4 Uninstalling packages If you no longer want to have a package installed, you can simply uninstall it using the function remove.packages(). For example, remove.packages(\"ggplot2\") (Try that, but then actually re-install the ggplot2package - it’s a super useful plotting package!) Within RStudio, in the Packages tab, clicking on the “X” at the end of a package’s row will uninstall that package. 42.0.6.5 Sidenote: How do you know what version of R you have? Sometimes, when you are looking at a package that you might want to install, you will see that it requires a certain version of R to run. To know if you can use that package, you need to know what version of R you are running! One way to know your R version is to check when you first open R/RStudio - the first thing it outputs in the console tells you what version of R is currently running. If you didn’t pay attention at the beginning, you can type version into the console and it will output information on the R version you are running. Another helpful command is sessionInfo() - it will tell you what version of R you are running along with a listing of all of the packages you have loaded. The output of this command is a great detail to include when posting a question to forums - it tells potential helpers a lot of information about your OS, R, and the packages (plus their version numbers!) that you are using. In the output from sessionInfo(), you’ll note that the end of each package’s name has an underscore followed by a series of numbers. Those numbers indicate the packages version. For example, the version of ggplot2 installed in this session is version 2.2.1 (read version two point two point 1). This number will change (increase) every time developers make changes to this package. sessionInfo() shows you packages and versions 42.0.7 Using the commands in a function In all of this information about packages, we haven’t actually discussed how to use a package’s functions! While functions are discussed in greater detail in a later lesson in this course, for now, know that to use the contents of a package, you’ll use functions. First, you need to know what functions are included within a package. To do this, you can look at the man/help pages included in all (well-made) packages. In the console, you can use the help() function to access a package’s help files. Try help(package = \"ggplot2\") and you will see all of the many functions that ggplot2? provides. Within the RStudio interface, you can access the help files through the Packages tab (again) - clicking on any package name should open up the associated help files in the “Help” tab, found in that same quadrant, beside the Packages tab. Clicking on any one of these help pages will take you to that functions help page, that tells you what that function is for and how to use it. Once you know what function within a package you want to use, you simply call it in the console like any other function we’ve been using throughout this lesson. Once a package has been loaded, it is as if it were a part of the base R functionality. If you still have questions about what functions within a package are right for you or how to use them, many packages include “vignettes.” These are extended help files, that include an overview of the package and its functions, but often they go the extra mile and include detailed examples of how to use the functions in plain words that you can follow along with to see how to use the package. To see the vignettes included in a package, you can use the browseVignettes() function. For example, let’s look at the vignettes included in ggplot2:browseVignettes(\"ggplot2\") . You should see that there are two included vignettes: “Extending ggplot2” and “Aesthetic specifications.” Exploring the Aesthetic specifications vignette is a great example of how vignettes can be helpful, clear instructions on how to use the included functions. 42.0.8 Summary In this lesson, we’ve explored R packages in depth. We examined what a packages is (and how it differs from a library), what repositories are, and how to find a package relevant to your interests. We investigated all aspects of how packages work: how to install them (from the various repositories), how to load them, how to check which packages are installed, and how to update, uninstall, and unload packages. We took a small detour and looked at how to check what version of R you have, which is often an important detail to know when installing packages. And finally, we spent some time learning how to explore help files and vignettes, which often give you a good idea of how to use a package and all of its functions. If you still want to learn more about R packages, here is a great resource: Introduction to R Packages from Ken Rice and Timothy Thornton. 42.0.9 Additional Resources “R Packages”, by Hadley Wickham CRAN (Comprehensive R Archive Network): BioConductor: GitHub: Introduction to R Packages, from Ken Rice and Timothy Thornton 42.0.10 Slides and Video R Packages Slides "],["basic-commands-in-r.html", "Chapter 43 Basic Commands in R", " Chapter 43 Basic Commands in R Now that we’ve covered some essentials about R objects, we’ll go over some basic commands that will be helpful in working with data. 43.0.1 Functions In working with data, we will be making substantial use of functions. Functions in R carry out some task. They are always a word (or set of words connected by underscores or periods followed by a set of parentheses, so the general structure of a function in R would look something like this: function(input) function_name(input) The input to a function in R is known as an argument. Functions require at least one argument, but can require multiple different arguments, depending on the function. These inputs are often objects and other variables detailing how you wish to view, summarize, or manipulate these objects. Function outputs come in a variety of formats. They can return information about the contents of an object; they can return a manipulated version of an object; and they can create entirely new objects. In this lesson, we will cover some essential functions for exploring data. This will only consist of functions that return information about the contents of an object. As you learn more about R, you will learn about functions that can manipulate objects or create entirely new objects. To visually understand the anatomy of a function call (a term that describes the using of a function), let’s look at the following example: mean(x, trim = 0.1) We have an object x that should contain numbers, and we want to compute the mean of these numbers with the mean function. As stated above, all of the information inside the parentheses are function inputs (also called arguments), and they are separated by commas. In this command, I have supplied the object x and an additional argument trim that I set to be 0.1. The trim argument calls for a number between 0 and 0.5 and specifies the fraction of the observations in x to trim from the upper and lower ends of the data. Here, by including the trim argument, I am specifying that I want to take the mean of the middle 80% of the data. 43.0.2 What is this object? If someone were to write down a mystery noun for us to guess, our first question would likely be: “Is it a person, place, or thing?” When working with R objects, we will initially want similar types of information. Here we will go over some functions that can help in this regard. As discussed briefly in the last lesson, the class function returns the class of an R object. This is useful for determining if an object is an atomic vector, list, or some other type of object. If it is an atomic vector, this function tells you the type. &gt; x &lt;- 1:10 &gt; class(x) [1] &quot;integer&quot; &gt; y &lt;- c(1.1,2.2) &gt; class(y) [1] &quot;numeric&quot; &gt; class(mtcars) [1] &quot;data.frame&quot; The str function stands for “structure”, and it returns a description of the structure of an object. It tells you the class of an object, its size, and a preview of different components of the object. For example, when we call the str function on a data frame object (mtcars), we see that its class is data.frame, it has 32 rows and 11 columns, and a preview of each of the 11 columns, including the class of each column. In this example, all of the columns are numeric variables relating to features of different models of cars. &gt; str(mtcars) &#39;data.frame&#39;: 32 obs. of 11 variables: $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... $ disp: num 160 160 108 258 360 ... $ hp : num 110 110 93 110 175 105 245 62 95 123 ... $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... $ wt : num 2.62 2.88 2.32 3.21 3.44 ... $ qsec: num 16.5 17 18.6 19.4 17 ... $ vs : num 0 0 1 1 0 1 0 1 1 1 ... $ am : num 1 1 1 0 0 0 0 0 0 0 ... $ gear: num 4 4 4 3 3 3 3 4 4 4 ... $ carb: num 4 4 1 1 2 1 4 2 2 4 ... 43.0.3 How big is this object? After we determine generally what an object is, it is useful to know how much information it contains, how big it is. The dim function returns the dimensions of a rectangular object, such as a matrix or a data frame. The output is an integer vector with two components: first is the number of rows (which can also be obtained with nrow()), and second is the number of columns (which can also be obtained with ncol()). We saw previously that the str function provides the same information and more, so why would we use these functions instead? The str function provides this information by printing it to the screen for us to visually see, but it does not extract this information directly. If we need to use the dimensions later in the analysis as a variable, these functions provide a direct way to store this information. &gt; dim(mtcars) [1] 32 11 &gt; nrow(mtcars) [1] 32 &gt; ncol(mtcars) [1] 11 The length function returns the number of items in a vector object. We talked about this briefly last lesson that the number of things in your object is referred to as its length. Here, we can quickly calculate the length of an object by calling the length function. &gt; x &lt;- c(1, 10, 3) &gt; length(x) [1] 3 43.0.4 Are there named features of this object? Another way to explore an object in R is to see what components it has. In R, these components are designated with names. The names function can be used to get and set the names of an R object, most often an atomic vector or a list. For example, we can create an R object called prize_money that contains the prize money for first, second, and third places: prize_money &lt;- c(1000, 500, 250) If we want to label this vector with the prizes, we can use names combined with the assignment operator &lt;- and a character vector of labels: names(prize_money) &lt;- c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;) Later in our work, if we want to remind ourselves of the labels, we can use the names function by itself, which will print the names for the object. &gt; names(prize_money) [1] &quot;first&quot; &quot;second&quot; &quot;third&quot; Note that in many situations, it will be better practice to encapsulate the above information in a two-column data frame instead of a named vector as below. prize_info &lt;- data.frame( money = c(1000,500,250), place = c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;) ) This is more convenient for further work if you have other objects that have information on first, second, or third placing, but not prize money information. You’ll learn more about these concepts when you learn about “tidy data” in a later course. The colnames() and rownames() functions act analogously to the names function but are used for the column labels and row labels of a matrix or data frame. The numbers in square brackets at the beginning of the lines of printed output indicate the index of the first observation on the line. So for the row names, we can see that “Duster 360” is the seventh element. &gt; colnames(mtcars) [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; [11] &quot;carb&quot; &gt; rownames(mtcars) [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; colnames() and rownames() functions 43.0.5 What does this object look like? Sometimes we may just want to see the information contained in an object. Here we will discuss functions that allow you to see parts of objects. The print function displays the entire contents of an object. print(mtcars) Recall that in R, the Console is where commands can be typed and entered for R to run. When R is ready to accept a command a greater than sign will be displayed. An alternative to calling the print function is to simply type the name of the object in the Console and press enter. In general printing an entire object is not advisable just in case the object is quite large. In this case your screen would overflow with text! mtcars printing objects’ contents to the screen Safer alternatives to printing are the head and tail functions. The head function displays the beginning of an object. By default, it shows the first 6 items. If the object is a vector, head shows the first 6 entries. If the object is a rectangle, such as a matrix or a data frame, head shows the first 6 rows. The tail function is analogous to head but for the end of the object. &gt; head(mtcars) mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 &gt; tail(mtcars) mpg cyl disp hp drat wt qsec vs am gear carb Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.7 0 1 5 2 Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.9 1 1 5 2 Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.5 0 1 5 4 Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.5 0 1 5 6 Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.6 0 1 5 8 Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.6 1 1 4 2 head() and tail() can be used to see a portion of the data The summary function computes summary statistics for numeric data and performs tabulations for categorical data, which are called factors in R. &gt; summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species setosa :50 versicolor:50 virginica :50 The summary() function summarizes data The unique function shows only the unique elements of an object. For vectors, this returns the set of unique elements. For rectangles such as matrices and data frames, this returns the unique rows. This function is useful if we want to check the coding of our data. If we have sex information, then we expect the result of unique to be two elements. If not, there is likely some data cleaning that must be done. The unique function is also useful for simply exploring the values that a variable can take. In the example below, we can see that in the mtcars data frame, there are only cars with 6, 4, and 8 cylinders. Note that to extract the column corresponding to cylinders, we used a dollar sign followed by the column name: $cyl. This is an example of subsetting that you will learn in later lessons. &gt; unique(mtcars$cyl) [1] 6 4 8 &gt; dat &lt;- data.frame(a = c(1,1), b = c(2,2)) &gt; dat a b 1 1 2 2 1 2 &gt; unique(dat) a b 1 1 2 The unique() shows unique elements of an object 43.0.6 Errors, Warnings, and Messages In R, there are three types information that R may return to you to your screen to provide you with additional information. These come in the form of errors, warnings, and messages. While they will often look similar to one another, it’s important to understand the difference between them. The most serious of these messages is an error message. Errors indicate that the code you tried to run did not run successfully. If you receive an error message, you should carefully look back at your code to see what went wrong. Error messages cannot be ignored as they indicate that there was no way for the code to run. Something has to be fixed before moving forward. For example, the code here produces an error, since mtca is not a data frame or object in R. unique(mtca$cyl) errors Warnings are generally less serious than error messages. They are generated when the code executes (meaning, it runs without producing an error and stopping), but produces something unexpected. Warning messages should always be read, and then you, the person writing the code, has the option to decide whether or not the code that has generated the warning needs to be re-written. For example, the log function is only defined for numbers greater than zero. If, in R, you try to take the log of a negative number, you get an output (NaN): log(-1) This output means the code executed (there was no error), but you also get a warning letting you know that NaNs were produced. If you meant to take the log of a negative number, you would leave the code as is. However, if you did not intend to do this, the warning message helps clue you into the fact that you may want to revisit your code. warnings Last but not least, messages, in general, are simply there to provide you with more information. They do not indicate that you have done anything wrong. For example, if you were to run a function that creates a directory if it does not yet exist, the function may provide you a message informing you whenever a new directory has been created. This message would just be there to provide you with more information. No further action is generally necessary when a message is provided. messages Note that all three are in the same font and same color, so they’ll look similar in your RStudio Cloud console. Over time, you’ll get more comfortable dealing with and understanding the difference between the three. For now, be sure that to remember if you get an error, your code did not execute successfully. Go back and find what caused the error. 43.0.7 Summary In this lesson, you have been introduced to a number of commonly-used commands (functions) that are available to you in R. These will help you to determine the class of objects (class()), figure out how big an object is (length(), dim(), nrow(), ncol()), get an idea of what the object looks like (str(), head(), tail()), and summarize the data contained in the object (summary(), unique()), among many others. Understanding the functions discussed in this lesson and becoming very comfortable with what each of these does is incredibly important for moving forward and programming in R. Finally, we discussed errors, warnings, and messages in R. This is the foundation of what we’ll use throughout the rest of the course, so spend some time here and ensure that you understand what the code does in each example before moving on! 43.0.8 Slides and Video Basic commands in R Slides "],["getting-help-in-r.html", "Chapter 44 Getting Help in R", " Chapter 44 Getting Help in R In a lesson in an earlier course, we discussed some basic guidelines for carrying out an effective Google Search. Now that you’ve been introduced to the basics of R, we wanted to guide you to some incredibly helpful resources that can help you work through issues when you’re trying to write your own R code. 44.0.1 R Help: ? To access documentation directly within RStudio, you can type a question mark followed by the function, dataset, or object within the R Console directly. The output for this documentation will display in the Help window at the bottom-right hand of RStudio. For example, earlier in this course, you were introduced to the function summary() in R. If you later can’t remember what this function does, but you can remember the function, you can always type ?summary in your Console. The following will display in the Help tab: ?summary documentation In this documentation we see: A general description of what the summary() function can be used for What package the function is from – “base” means it’s part of the base installation in R, rather than from a specific package The syntax you should use to carry out this function Some sample code As you work in R, you’ll find that some documentation is more helpful than others. Some packages and functions have incredibly helpful documentation pages. Others are less helpful. A thing to remember is that humans are responsible for writing this documentation. It’s great when someone who’s really great at documenting software or who has the time to do so write great documentation pages. However, for those times when the documentation proves less than helpful, there are other places you can look to for help. 44.0.2 Debugging code It is likely that after looking at R documentation, you still will have questions, or might not know exactly how to fix your code. For more tips on debugging your code, go paraphrase this guide originally written by the Childhood Cancer Data Lab. 1) Carefully read any and all error messages This may seem like a silly thing to include as a tip, but it’s very easy to gloss over an error message without actually reading it. Often, R may be telling you exactly what is wrong, but if you don’t take the time to understand what the error message means, you will have trouble fixing the error. Error messages often refer to R terms (e.g.. “argument”, “directory”) so if you need a refresher on what some terms mean, we recommend going through one of the intro to R tutorials we recommend. Secondly, realize that just because you don’t receive an error message, doesn’t mean that your code did what you intended it to. You also will need to carefully review your code (and your results) to try to find “silent” bugs (situations where R did exactly what you asked, but you didn’t get what you intended). 2) Identify which line and phrase of code is the source of the error. If you ran many lines of code, you may not know which part of your code is the origin of the error message. Isolating the source of the error and trying to better understand your problem should be your first course of action. The best way to determine this, is by running each line, and each phrase by itself, one at a time. Chunk-out your code and test the individual bits of code. Do you have a lot of lines of code, a lot of arguments, or multiple functions at once? Try each piece by itself to narrow down what piece appears to be the origin of the problem. 3) Be sure that the code you think you have run has all successfully run and in order. It could be that the problem with your code isn’t that it doesn’t work as it is written, but that you didn’t run it or didn’t run it in the correct order. This should be one of the first things you check, while checking that the objects that you believe should be in your environment, are in your environment. It’s also good practice to be periodically quitting your current R session and starting a new one, in addition to clearing your R notebook output. If you are encountering problems and haven’t refreshed your R session, you may want to do that before further troubleshooting. In the course of troubleshooting, you will want to re-run all of your code, perhaps many many many times in order to get to the bottom of the problem. 4) Google your error message The main advantage to Googling your errors is that you are likely not the first person to encounter the problem. Certain phrases and terms in the error message will yield more fruitful search results then others. 5) Look at the documentation for a function to make sure you are using it correctly Once you’ve better determined the origin of the problem, you should use whatever documentation is available to you regarding the problematic code. When using a new function from a package you are unfamiliar with, it’s worthwhile to skim through the documentation so you know how to properly use the functions. For base R functions, Tidyverse functions, and some Bioconductor packages, the documentation will give you a lot of the information you need. However, you will also likely find that not all documentation is thorough or clear. As we discussed, objects have structures and types. Having input that doesn’t match the requirements that a function has can be a common source of errors. Pay special attention to what the documentation says about what kind of input and output the function is designed to use. Use the RStudio help bar Here’s a screenshot from the help window in RStudio. Note that here we searched for the levels function. R documentation includes information about what the expected arguments are as well as examples of how to use a function. Note here that this documentation tells us that the input for x is probably a factor. search_bar For Bioconductor package functions, look at their page on bioconductor.org The documentation on Bioconductor pages have information that can be valuable for troubleshooting. Vignettes can have good example workflows to get started with (can use the browseVignettes function for RStudio to open them). In addition, every Bioconductor package has a PDF reference where all the functions and objects for that package are described. They can take some getting used to, but generally can have helpful information. Google it again Because it’s unlikely your first attempt at Googling will lead you straight to an answer; this is something you should continue to try with different wordings. Through trial and error, and also Google algorithms learning about what you look for, your search results can eventually lead you to helpful examples and forums. Ask for help! 44.0.3 Tips on asking questions! In the introduction to this course, we discussed that asking questions is central to data science and its also a crucial part of learning programming! When you are working on something, you should first ask these questions to yourself. But data science is best done as a community effort, so before you reach the point of being crazily frustrated, ask a peer or a more experienced coder for help! When you are troubleshooting code there are few things you should ask yourself (and tell others you are asking). Having this information together will help you reach a solution more efficiently! 44.0.3.1 Things to include in your request for help: What is the goal of this code? What are you trying to do? Is this the best or only way to do that? Often times in R there are many ways to achieve the same outcome, so it may be worth considering if there’s another solution that bypasses the problem you are having. What is the code that is producing this error? What part of the code is sending the error you are seeing? Try Chunking your code – trying each part piece by piece, to zero in on the problematic part. Is the code formatted correctly? It only takes a single comma, incorrectly capitalized letter, missing quote, or parenthesis to break a whole set of code! What is the error or problematic outcome? What are you seeing that is making you think something is wrong? Is it an error message? if so copy and paste that error message verbatim. Is it data that’s formatted not how it should be? Show what that looks like either with a screenshot or example. 44.0.4 Summary In this lesson we discussed documentation, how to debug code and how to ask for help. All of these items can be tools in your tool belt for when your R programming adventures are not going as you hope. Remember that learning to program can be frustrating but with time and asking for help, you will get there! 44.0.5 Additional Community Resources The R community is a welcoming and helpful community. Many people go years as R users before they learn what a rich community there is out there. We’re hoping to change that by introducing new users to a number of resources that will help them feel more welcome to the large community of individuals using R! Below is a short list of ways to connect with the R community: R for Data Science Learning Community - a welcoming and helpful community for those new to R and data science Twitter - Using or searching the hashtag #rstats can be incredibly helpful and can connect you to others who use R ROpenSci - an online community of developers developing tools for open science R Project Help in R Tidyverse Help Documentation - more details on creating a reprex 44.0.6 Slides and Video Getting Help in R Slides "],["objects-in-r.html", "Chapter 45 Objects in R", " Chapter 45 Objects in R 45.0.1 What is an object? An object in R is something that contains information. In R there are a number of basic classes and types of objects. Classes - tell us what kind of data is being stored? Is it a number? A category? A word? Types - tell us what shape the data are being stored as. Is it a table? A series of items together (called a vector)? Or something with a different structure all together. 45.0.2 Storing objects In R, as with all programming languages, it is important to be able to store objects that we create so that we can use them in later code. The process of storing an object is called assignment, and it entails giving an object a name. For example, the following code creates an object called min_age and stores inside that object the value 21. min_age &lt;- 21 The &lt;- operator is called the assignment operator. After you run this code in R, you will see the object min_age show up in your Environment panel. Assignment Now if we tell R min_age it will print back to us the number 21. Having this minimum age variable stored in an object can be useful later if we have data where we only want to keep individuals who exceed this minimum age. 45.0.3 Printing objects Often we will want to print the contents of an object to see the information it contains. We can do this by clicking in the Console in RStudio Cloud (bottom left corner). The R prompt is indicated by the &gt; in the Console. This indicates that R is ready to accept a command from you. If we simply enter the number 21 at the R prompt, the 21 object will be printed, but you will not see an object come up under the Environment pane (top right corner). &gt; 21 [1] 21 &gt; min_age &lt;- 21 &gt; min_age [1] 21 The 1 in square brackets that gets displayed in the printed output is simply an index that is provided for convenience of reading in case the object contains several values. It indicates that the number 21 is the first number in this object. It also happens to be the only number in this object. Throughout this course and curriculum, when we display code without the &gt; indicating that we are not at the R prompt in the Console, we are emphasizing only the R command. When we display code with the &gt; indicating that we are at the R prompt in the Console, we want to emphasize the commands and how the output is displayed on the screen. 45.0.3.1 Classes of objects Five classes that you’ll be working with commonly are: Character - e.g. \"sharon\" \"marcus\" Integer - e.g. 1, 4 (whole numbers) Numeric - e.g. 1.2, 3.4, 4 Logical - only two options: TRUE or FALSE. Factor - red, red, blue, yellow (categories that could be repeated). We will describe each of these classes in more detail but first, why are these important anyway? 45.0.3.2 Why are classes important? Let’s discuss an example. If we asked: “What is Blue divided by 2 equal?” You would rightly tell us that question doesn’t even make sense and you can’t answer it. But if we asked: “What is 4 divided by 2 equal?”, then you could easily tell us 4/2 = 2. In the same way, R will throw errors at us if we ask it nonsensical questions or things that its not built to do. Because of this, we need to keep an eye on what kind of data classes we have, and what kinds of things we are asking R to do to make sure that those things make sense together. 45.0.4 Character Character objects in R can be created by surrounding a string in either double quotes or single quotes as in the following two examples. “This is a character object.” ‘This is also a character object.’ The example below shows how to store the above sentence character object in an object named my_char. my_char is a character vector of length 1. my_char &lt;- &quot;This is a character object.&quot; We can create a character vector named my_char_vec with multiple character objects using the concatenate function, c(). While we’ll discuss functions more in later lessons, the word concatenate means to link things together in a series, so this function links pieces of information together: my_char_vec &lt;- c(&quot;char object 1&quot;, &quot;char object 2&quot;) This character vector contains two different pieces of information. In R, the number of pieces of information in a vector is referred to as that vectors length. Thus, this vector is of length 2. 45.0.5 Integer Integers are whole numbers, such as 1, 23, or 1000. 1.2 is not an integer, as it contains a fraction of a number. Integer objects in R can be created by specifying an integer number followed by the letter “L”. The following creates an integer object called num and stores the value 1. num &lt;- 1L Without the letter “L”, the number will be recognized as a more general, numeric object (discussed below). We can create an integer vector with multiple items using the c function, the concatenation function. The following creates an integer vector of length 3 with the numbers 1, 10, and 3. num_vec &lt;- c(1L, 10L, 3L) We can also create an integer vector with the colon operator. The colon operator specifies to include all numbers between the value before the colon and the value after the colon. The following command creates an integer vector with the numbers 2, 3, 4, and 5. num_vec2 &lt;- 2:5 If we create longer vectors and print the output, we can see the use of having the square bracket indices at the beginning of the lines of the printed output. In this last example, we see that 4 is the first number in the vector, and 12 is the ninth number in the vector, as specified by the 9 in brackets to start the second line of output. &gt; 4:16 [1] 4 5 6 7 8 9 10 11 [9] 12 13 14 15 16 45.0.6 Numeric Numeric objects in R represent real numbers and are created by simply entering a number. Thus, while 1.2 is not an integer, it is a real number. Thus 1.2 could be stored as a numeric but not an integer. num1 &lt;- 1 num2 &lt;- 1.2 We can create a numeric vector with multiple items using the c function. num_vec &lt;- c(1.2, 9.8) As discussed previously, we can also use R as calculator. At the prompt, we can enter mathematical expressions without assignment to display the results as a calculator would. The operators for addition, subtraction, multiplication, division, and exponentiation in R are +, -, *, /, and ^ respectively. &gt; 1+5 [1] 6 &gt; 2-3 [1] -1 &gt; 4*2 [1] 8 &gt; 4/5 [1] 0.8 &gt; 3^2 [1] 9 45.0.7 Logical Logical objects in R represent true or false conditions and can be created by typing “TRUE” or “FALSE”. check_condition &lt;- TRUE check_condition &lt;- FALSE We can create a logical vector with multiple items using the c function. check_condition &lt;- c(TRUE, TRUE, FALSE) 45.0.8 Factor Factor objects contain information for categorical variables (e.g. color, shape), where there are a number of possible values the object can take, but these values are limited. For example, a categorical variable could include the colors of the rainbow. Here, values could be red, orange, yellow, green, blue, indigo, or violet. Thus, values could be one of seven different colors, but the categorical variable is limited to one of these seven values. To simplify this example and make factors explicitly clear, the following colors object is a character vector containing five pieces of color information. There are only two unique colors present: red and blue. These unique colors are called the levels of a factor. colors &lt;- c(&quot;red&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;blue&quot;) To create a factor object out of this character vector we can use the factor function or the as.factor function. Let’s try both and look at the objects created. &gt; colors_factor1 &lt;- factor(colors, levels = c(&quot;red&quot;, &quot;blue&quot;)) &gt; colors_factor1 [1] red red blue red blue Levels: red blue &gt; colors_factor2 &lt;- as.factor(colors) &gt; colors_factor2 [1] red red blue red blue Levels: blue red When we used the factor function we also specified the levels to be red and blue. The order of the levels we specified is important: first red, then blue. We can see that when we print this object the levels are listed in the order we specified. A quick way to create a factor object is with the coercion function as.factor. When we print this object, the levels are opposite to what we specified when we used the factor function because by default, the levels are specified in alphabetical order. Here the first level is blue and the second is red. The ordering of levels will be important in future courses when we cover data tidying, plotting, and statistical modeling. One last topic to cover with factors is labeling. We can control the displayed labels of a factor with another option with the factor function. This need often arises if we want to create a factor object from an integer object or from a character object with labels that we don’t like. In the example below, we see that we originally had ozone information encoded with integers. When we use the factor function to make a corresponding factor object, we specify both the unique levels present in the integer object and the desired labels with a character vector. The order of the specified levels should correspond to the order of the specified labels. The two examples, ozone_factor and ozone_factor2, create the same labeling of the original integer vector, but the order of the levels is different between the two approaches. In the first approach, the first level is low, the second is medium, and the third is high, which is the most natural ordering. In the second approach, the first level is medium, the second is low, and the third is high. &gt; ozone_levels &lt;- c(1,2,1,3,1,1) &gt; ozone_factor &lt;- factor(ozone_levels, levels = 1:3, labels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) &gt; ozone_factor [1] low medium low high low low Levels: low medium high &gt; ozone_factor2 &lt;- factor(ozone_levels, levels = c(2,1,3), labels = c(&quot;medium&quot;, &quot;low&quot;, &quot;high&quot;)) &gt; ozone_factor2 [1] low medium low high low low Levels: medium low high 45.0.9 Data frames Now that we’ve covered common basic data classes, we will now discuss data frames. Data frames are a more complex data type than the simple vectors than we’ve seen so far. Data frames organize data into a rectangular format where each column corresponds to a single variable and each row corresponds to an observation. So a row of a data frame contains an observation’s values for all variables. An example of a data frame is shown below: Data frame example We see along the columns different variables related to car properties, and each row gives information on those properties for a particular car model. Every column in a data frame is a simple vector of values all from the same class. Most often, the data that we work with can be represented with data frames. You will learn more about working with data frames in subsequent lessons in this course and also in later courses. 45.0.10 Missing values The last topic that we should discuss in our introduction to R objects is missing values. During nearly any type of data collection, there is information missing for one or more variables. Thus, it is important to understand how R handles missing values. Most missing values that you will deal with are encoded with NA in R. Below are some examples of creating objects of the various basic types we discussed above that contain missing values. &gt; char_vec &lt;- c(NA, &quot;two&quot;, &quot;four&quot;) &gt; char_vec [1] NA &quot;two&quot; &quot;four&quot; &gt; num_vec &lt;- c(1L, 10L, NA, 3L) &gt; num_vec [1] 1 10 NA 3 &gt; num_vec &lt;- c(1.2, 9.8, NA) &gt; num_vec [1] 1.2 9.8 NA &gt; logi_vec &lt;- c(TRUE, NA, FALSE, FALSE) &gt; logi_vec [1] TRUE NA FALSE FALSE &gt; factor_vec &lt;- as.factor(c(NA, &quot;apple&quot;, &quot;banana&quot;)) &gt; factor_vec [1] &lt;NA&gt; apple banana Levels: apple banana Another missing value that can arise in R is NaN which stands for “not a number.” This can arise in mathematical calculations, such as 0 divided by 0. &gt; 0/0 [1] NaN 45.0.11 Determining the class of an object In this lesson so far we have discussed how to create the five main classes of objects in R; however, we haven’t yet described how to determine the class of an object once its been stored. To do so, you would use the function class() and specify the class of the object within the parentheses: &gt; min_age &lt;- 21 &gt; class(min_age) [1] &quot;numeric&quot; &gt; min_age &lt;- 21L &gt; class(min_age) [1] &quot;integer&quot; &gt; colors &lt;- c(&quot;red&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;blue&quot;) &gt; class(colors) [1] &quot;character&quot; &gt; colors_factor1 &lt;- factor(colors, levels = c(&quot;red&quot;, &quot;blue&quot;)) &gt; class(colors_factor1) [1] &quot;factor&quot; As you can see, the class of the object specified within the parentheses is the class of that object. 45.0.11.1 Types of objects We store these different classes of objects in different ways. The ways this information is stored is referred to as the *type** of object. When talking about objects in R, it may be helpful to think of actual objects in every day life for comparison. For example, think of three objects: a bucket, a pot you would cook with, and a backpack. These three objects are clearly designed for and carry out different purposes. The bucket may be used to carry water to clean your floor, the pot to cook pasta, and the backpack to carry notebooks, but, we can agree that they are all objects, just different **types* of objects. The water, pasta, and notebooks would be the information contained in the object. In this real-life example, the “class” of the information may be “liquid”, “food”, and “paper”. Objects in real-life analogy The simplest type of object in R is called a vector, which is an object that can contain multiple items. Generally, each individual vector can only contain objects of the same class, but a certain type of vector, called a list, can contain objects of different classes. You will learn about lists in a later lesson. For now, it’s not important to understand the details of that last paragraph, but it is important to know that there are different types of objects and that these objects each hold information of a specific class. We’ll begin this lesson by looking at how to create objects in each of these five basic classes in R. 45.0.12 Summary In this lesson, we’ve discussed that within R information can be assigned to objects. We’ve covered the five main classes of objects in R and have started to touch on the different types of objects in R, but will discuss this in greater detail in later lessons in this course. We’ve discussed how to create each class of object in R as well as each class’ unique properties. Finally, we discussed how to determine the class of an object in R using the function class(). 45.0.13 Slides and Video Objects in R Slides "],["working-with-logicals.html", "Chapter 46 Working with Logicals", " Chapter 46 Working with Logicals Earlier in this course, you learned that one of the basic classes of objects in R is the class of logical objects which contain TRUE and FALSE values. Logicals come up very frequently in data management and analysis because they form the basis of conditional operations (if a condition is met, perform a task) and are instrumental in data exploration, visualization, and analysis. In this lesson, we will cover the tools you will need to work with logical values in R. As you work through this lesson, you’ll be inundated with TRUE and FALSE a lot. That is because there are only two options when it comes to logicals. However, these are incredibly important and helpful class of objects. So, take your time to understand each example. Copying and pasting the code into your own RStudio, running it, and spending time to understand the output will really help you understand how to work with logicals! 46.0.1 Logical operators One of the most common ways to create and combine logical objects is to use logical operators. Broadly speaking, operators are symbols that indicate some action. We introduced arithmetic operators in an earlier lesson for performing routine arithmetic calculations. There was + for addition, - for subtraction, * for multiplication, / for division, and ^ for exponentiation. Logical operators in R perform actions relating to logic checking and include the following: !: the “not” operator &amp;: the “and” operator |: the “or” operator (Shift + backslash() ) ==: the “equals” operator !=: the “not equal” operator &gt;: the “greater than” operator &gt;=: the “greater than or equal to” operator &lt;: the “less than” operator &lt;=: the “less than or equal to” operator %in%: the “contained in” operator Logical operators are used with one to several R objects in order to create logical objects. These logical objects are the result of checking conditions, and they store the answers to yes/no questions that you may ask throughout your work. Let’s look at several examples. We have data on ages of some students, and we have stored this information in the ages object. We have information on a common age cutoff that is applied to all students for a particular activity. This is stored in the common_cutoff object. For another activity, we have individualized age cutoffs for each student. This is stored in the indiv_cutoffs object. Let’s ask several yes/no questions relating to this data. ages &lt;- c(12, 17, 16, 13, 14) common_cutoff &lt;- 13 indiv_cutoffs &lt;- c(12, 12, 14, 14, 14) Do the students’ ages equal the cutoff? To answer this, we would use the “equals” operator ==. (Note: the equals operator requires two equals signs (==). You’ll recall that a single equals sign (=) is used for object assignment and is equivalent to &lt;- . Whenever you want to ask if two things are equal be sure you have both equals signs in your code!) Here, each number in the ages object is compared to 13. Only the fourth student meets this condition. &gt; ages == common_cutoff [1] FALSE FALSE FALSE TRUE FALSE The output from this code prints “TRUE” for the individual (the fourth person) who meets this condition. Do the students’ ages equal the individualized cutoffs? Here, each number in the ages object is compared to the corresponding number in the indiv_cutoffs vector. Only the first and fifth students meet this condition. &gt; ages == indiv_cutoffs [1] TRUE FALSE FALSE FALSE TRUE This is obvious in the output from R, where the first and the fifth values are TRUE, while the rest are FALSE. Usually cutoffs are a bound rather than a specification of an equality, so we may instead ask if the students older than the cutoff by using the “greater than” operator &gt;. &gt; ages &gt; common_cutoff [1] FALSE TRUE TRUE FALSE TRUE &gt; ages &gt; indiv_cutoffs [1] FALSE TRUE TRUE FALSE FALSE Are they at least as old as the cutoff? We can answer this with the “greater than or equal to” operator &gt;=. &gt; ages &gt;= common_cutoff [1] FALSE TRUE TRUE TRUE TRUE &gt; ages &gt;= indiv_cutoffs [1] TRUE TRUE TRUE FALSE TRUE If the cutoffs are upper bounds instead of lower bounds, we can answer similar questions as above using the “less than” &lt; and “less than or equal to” &lt;= operators. &gt; ages &lt; common_cutoff [1] TRUE FALSE FALSE FALSE FALSE &gt; ages &lt; indiv_cutoffs [1] FALSE FALSE FALSE TRUE FALSE &gt; ages &lt;= common_cutoff [1] TRUE FALSE FALSE TRUE FALSE &gt; ages &lt;= indiv_cutoffs [1] TRUE FALSE FALSE TRUE TRUE So far we have treated the common cutoff and the individualized cutoffs separately, and we have thus only used one logical operator at the time. We can use several logical operators simultaneously to answer more complex yes/no questions. Are the students older than the common cutoff and the individualized cutoffs? We can combine the “greater than” operator with the “and” &amp; operator. &gt; ages &gt; common_cutoff &amp; ages &gt; indiv_cutoffs [1] FALSE TRUE TRUE FALSE FALSE Are the students older than the common cutoff or the individualized cutoffs? We can combine the “greater than” operator with the “or” | operator. &gt; ages &gt; common_cutoff | ages &gt; indiv_cutoffs [1] FALSE TRUE TRUE FALSE TRUE Are the students older than the common cutoff but not the individualized cutoffs? We can answer this with the “not” operator or without it by reasoning through with the inequalities. In using the “not” operator, it is a good idea to wrap the condition that you are negating in parentheses to enhance clarity and avoid errors. &gt; ages &gt; common_cutoff &amp; !(ages &gt; indiv_cutoffs) [1] FALSE FALSE FALSE FALSE TRUE &gt; ages &gt; common_cutoff &amp; ages &lt;= indiv_cutoffs [1] FALSE FALSE FALSE FALSE TRUE When working with complex logical expressions, it can help to store different parts of the expression in their own objects. In reproducing the example above, we have stored the result of the logical operation dealing with the common cutoff in the meets_common_cut logical object. We have also stored the result of the logical operation dealing with the individual cutoffs in the not_meets_indiv_cut logical object. These two objects can be combined at the end in a more readable expression. &gt; meets_common_cut &lt;- ages &gt; common_cutoff &gt; not_meets_indiv_cut &lt;- !(ages &gt; indiv_cutoffs) &gt; meets_common_cut [1] FALSE TRUE TRUE FALSE TRUE &gt; not_meets_indiv_cut [1] TRUE FALSE FALSE TRUE TRUE &gt; meets_common_cut &amp; not_meets_indiv_cut [1] FALSE FALSE FALSE FALSE TRUE Although these examples have all used numbers, logical operators can also be used for character and factor objects. Let’s start with character objects. For comparing character objects, you will primarily use the “equals” == and “not equal” != operators. For example, we have a character vector of colors. Are the colors “red”? &gt; colors &lt;- c(&quot;red&quot;, &quot;red&quot;, &quot;green&quot;, &quot;orange&quot;, &quot;blue&quot;) &gt; colors == &quot;red&quot; [1] TRUE TRUE FALSE FALSE FALSE Are the colors not “blue”? &gt; colors != &quot;blue&quot; [1] TRUE TRUE TRUE TRUE FALSE Here it is useful to introduce the “contained in” operator %in%. This operator checks if the elements in the left hand object are contained in the right hand object. Are “red” and “purple” contained in this set of colors? The length of the output is the same as the length of the left hand side. We ask about two colors, “red” and “purple”, and we see that “red” is contained in the colors object but “purple” is not. &gt; c(&quot;red&quot;, &quot;purple&quot;) %in% colors [1] TRUE FALSE If we had reversed the command, we would instead be asking, “Are the colors in the colors object contained in the red and purple set?” Only the instances of “red” will be marked as TRUE. &gt; colors %in% c(&quot;red&quot;, &quot;purple&quot;) [1] TRUE TRUE FALSE FALSE FALSE When dealing with logical operations with factors, we can only use the “equals” == and “not equal” != operators. Usually we will want to compare factor objects with values of their labels. Let’s look at logical operations for the following factor object containing height category information. &gt; height_factor &lt;- factor(c(2,1,2,3,1), levels = 1:3, labels = c(&quot;short&quot;, &quot;average&quot;, &quot;tall&quot;)) &gt; height_factor [1] average short average tall short Levels: short average tall Although we create this factor object from integers, comparing it to the value 1 will not give desired results. The intention in comparing it to the integer 1 is to mark the short individuals with TRUE. We can do this by either coercing the factor object to an integer object with as.integer or by comparing the factor to the string label “short”. &gt; height_factor == 1 [1] FALSE FALSE FALSE FALSE FALSE &gt; as.integer(height_factor) [1] 2 1 2 3 1 ## coerce object to be an integer &gt; as.integer(height_factor) == 1 [1] FALSE TRUE FALSE FALSE TRUE ## compare to label directly &gt; height_factor == &quot;short&quot; [1] FALSE TRUE FALSE FALSE TRUE When we coerce the object to e an integer, we get the expected output. The second and final outputs are TRUE, corresponding to the values of “1” in the height_factor object. The output is the same for when the labels are directly compared. The output here returns TRUE for any places in the height_vector object where the factor label is (equal to) “short”. 46.0.2 Logical functions So far we have used logical operators to ask yes/no questions on a unit-by-unit basis. That is, asking the question for each data observation. This has given us TRUE/FALSE answers for each unit. We might also want to summarize the results of these multiple responses with questions such as “Do all units meet the condition?” or “Do any (at least one) units meet the condition?” For the first question, “Do all units meet the condition?”, we can use the all function. The all function takes a logical object as input and returns TRUE if all values in the logical object are TRUE, and it returns FALSE otherwise. Are all student ages equal to the individual cutoffs? Are all ages greater than or equal to zero? &gt; all(ages == indiv_cutoffs) [1] FALSE &gt; all(ages &gt;= 0) [1] TRUE For the second question, “Do any units meet the condition?”, we can use the any function. The any function takes a logical object as input and returns TRUE if at least one of the values in the logical object is TRUE, and it returns FALSE otherwise. Are any of the student ages equal to the common cutoff? Are any ages greater than 100? &gt; any(ages == common_cutoff) [1] TRUE &gt; any(ages &gt; 100) [1] FALSE Often we will want to combine the asking of yes/no questions with “who” and “how many” questions. Who meets the condition? How many units meet the condition? For the first question, “Who meets the condition?”, we can use the which function. The which function takes a logical object as input and returns the indices of TRUE values. In this example, we see that the first and second colors are the ones that are contained within the red and purple set. &gt; colors %in% c(&quot;red&quot;, &quot;purple&quot;) [1] TRUE TRUE FALSE FALSE FALSE &gt; which(colors %in% c(&quot;red&quot;, &quot;purple&quot;)) [1] 1 2 To answer, “How many units meet this condition?”, we can make use of the sum and mean functions. The idea here is that logical values have a correspondence with the integer values of 0 and 1. TRUE values correspond to 1, and FALSE values correspond to 0. Thus when we create a logical object, we can use sum to count the number of TRUE values, and we can use mean to compute the fraction of TRUE values. ## assign logical to ages that are greater than ## or equal to indiv_cutoffs &gt; meets_indiv_cut &lt;- ages &gt;= indiv_cutoffs &gt; meets_indiv_cut [1] TRUE TRUE TRUE FALSE TRUE ## sum that object &gt; sum(meets_indiv_cut) [1] 4 ## get the mean of that object &gt; mean(meets_indiv_cut) [1] 0.8 Here, the sum of the meets_indiv_cut is 4. When you sum a logical, R returns the number of TRUE responses. Similarly, when you take the mean() of an object of class logical, you get the proportion of responses that were TRUE. Here, that’s 4 out of 5, or 0.8. 46.0.3 Summary This lesson walked you through how to work with operators and logical objects. This will be incredibly helpful as you start to manipulate and clean data. Having a thorough understanding of this class of objects and how to work with them will serve you well going forward. 46.0.4 Slides and Video Working with Logicals Slides "],["data-frames-1.html", "Chapter 47 Data Frames", " Chapter 47 Data Frames TODO: Write about data frames 47.0.1 Slides and Video Slides "],["r-markdown.html", "Chapter 48 R Markdown", " Chapter 48 R Markdown We’ve spent a lot of time getting R and RStudio working, learning about projects and version control - you are practically an expert at this! There is one last major functionality of R/RStudio that we would be remiss to not include in your introduction to R - R Markdown! 48.0.1 What is R Markdown? R Markdown is a type of document that allows you to generate fully reproducible reports. In these documents, text , code, and the results of the code are all combined in one place. In fact, these lessons are written using what you’ve already learned about Markdown and all the R code you’ve recently mastered! To refresh your memory, this is how we use plain text in Markdown formatting: Markdown review Throughout this lesson we’ll remind you of what you learned in the previous lesson on Markdown and discuss all the new things you’ll be able to do with R Markdown documents! R Markdown documents generally take one of two file extensions: .Rmd, .rmd. If a file ends with either of these two file extensions (ie Project_Analysis.Rmd), then you know it’s an R Markdown document. While this type of file is a plain text file, it can be rendered (“Knit”) into HTML pages, PDFs, Word documents, or slides! We’ll get into exactly what that means in just a second! .Rmd to PDF 48.0.2 Why use R Markdown? One of the main benefits is the reproducibility of using R Markdown. Since you can easily combine text and code chunks in one document, what this means for a data science project is that you can easily integrate an introduction about what your project question is and where your data came from and the code that you are running, the results of that code, some pretty plots and figures, and your conclusions all in one document. Sharing what you did, why you did it and how it turned out becomes so simple - and that person you share it with can re-run your code and get the exact same answers you got. That’s what we mean about reproducibility. In addition to being reproducible, there will be times that you’re working working on a project that takes many weeks or months to complete. In these cases, you want to be able to see what you did a long time ago (and perhaps be reminded exactly why you were doing this). By using an R Markdown document, you’ll be able to see exactly what you did previously, what code you used AND the results of that code! Another major benefit to R Markdown is that since it is plain text, it works very well with version control systems, such as git and GitHub. It is easy to track what character changes occur between commits; unlike other formats that aren’t plain text. For example, in one version of this lesson, I may have forgotten to bold this word. When I catch my mistake, I can make the plain text changes to signal I would like that word bolded, and in the commit, you can see the exact character changes that occurred to now make the word bold. Check out this video that the RStudio developers released about R Markdown and what it is! 48.0.3 Getting started with R Markdown The best way to follow along for the rest of this lesson is to open up RStudio Cloud, and follow along on your own step-by-step. In the process, you’ll get to generate your first R Markdown document! Generating and working with RMarkdown documents is incredibly easy when working within RStudio (or RStudio Cloud). To get started in RStudio Cloud, go to File &gt; New File &gt; R Markdown.. . R Markdown… If a window pops up specifying that you need to install and update a few packages before using R Markdown, click “Yes” to install those updates. At this point, you will be presented with the following window: R Markdown You’ll want to add a Title to this document and put your name in the Author box. Title and Author information filled out When you are done entering this information, click OK, and a new .Rmd document will open with a little explanation on R Markdown files. R Markdown document There are three main sections of an R Markdown document. The first is the YAML at the top, bounded by the three dashes. This is where you can specify details like the title, your name, the date, and what kind of document you want output. If you filled in the blanks in the window earlier, these will be filled out for you. The spacing of this section matters, so if you edit anything here and then get an error when you try to Knit your document, it may be worth returning to this section to make sure spacing is as it should be. Also on this page, you can see text sections. In this section, text should be written in Markdown. This means that the “## R Markdown” will appear as an H2 header when the document is rendered. and Knit will be bold, as discussed in a previous lesson. And finally, you will see code chunks. These are bounded by the triple backticks. These are pieces of R code, and are referred to as “code chunks”. These code in these chunks can run right from within your document - and the output of this code will be included in the document when you Knit it. The easiest way to see how each of these sections behave is to produce the HTML! To do so, you’ll learn how to knit the document below. 48.0.4 “Knitting” documents When you want to preview an R Markdown document and when you are finished with an R Markdown document, you’ll want to “knit” the plain text and code from your .Rmd into your final document. To do so with the R Markdown that opened with your R Markdown file, click on the “Knit” button along the top of the source panel. Knit When you do so, it will prompt you to save the document. For now, we’ll type “test_document” into the box. (However, when you’re generating these documents for projects, you’ll want to be sure that this document is saved in the appropriate directory, which is likely the raw_code directory. Click “Save.” Save .Rmd Upon saving the document, you should see a document like this appear in a new window: Knit HTML So here you can see that the content of the header was rendered into a title, followed by your name and the date. The text chunks produced a section header called “R Markdown” which is followed by two paragraphs of text. Following this, you can see the R code summary(cars), importantly, followed by the output of running that code. And further down you will see code that ran to produce a plot, and then that plot. This is one of the huge benefits of R Markdown - rendering the results to code inline. Go back to the R Markdown file that produced this HTML and see if you can see how you signify you want text bolded. (Hint: Look at the word “Knit” and see what it is surrounded by). Additionally, feel free to change the text in this document or add additional code. Then, click on “Knit” again and see how the changes alter the HTML that is produced. Upon Knitting to HTML, an additional file will now be saved in the same directory where you saved your .Rmd file. However, as expected, this file will have the extension .html. If you make changes and re-knit your file, this HTML file will be re-generated and all changes will be saved in this file. Saved HTML file One final note on knitting. In this example, we have Knit to HTML (a format that can be easily viewed in any web browser), but you can also knit to a PDF or Word document (among other options). To Knit to a different output format, click on the arrow to right of the Knit icon to expose a drop-down menu. Select the output document you’d like from this list. The new file type will be generated and saved in the same directory where the .Rmd file is, but with the appropriate extension (i.e. .pdf if you selected “Knit to PDF”). Feel free to play around with how these different file output options look when you Knit! Other file output options when Knitting 48.0.5 Summary In this lesson we introduced you to R Markdown documents, discussing what they are and why you should use them. We briefly reviewed Markdown formatting, but if you are unclear on what Markdown is, feel free to go back to your previous Markdown lesson. In addition to introducing the what and why, we got you started with actually using R Markdown. Hopefully, you were able to generate and knit your first R Markdown document! Finally, this just touched on the basics of R Markdown. There are a number of options you can specify to display your code chunks in varied ways, different changes that can be made to your YAML to customize your output documents, and ways to create tables and use citations that we did not discuss. As you use R Markdown more and more, you’ll get more acquainted with these capabilities. For now, it’s great to know the basics and that there are more advanced features! 48.0.6 Additional Resources R Markdown Documentation, from RStudio R Markdown video, from RStudio Basic R Markdown cheatsheet “R Markdown cheatsheet” 48.0.7 Slides and Video R Markdown Slides "],["using-paths-in-code.html", "Chapter 49 Using Paths in Code", " Chapter 49 Using Paths in Code Now that you know what a file path is and how to navigate to different directories using both the Terminal and the R Console, we’ll discuss how to include file paths when coding. 49.0.1 Relative and absolute paths Relative and absolute paths were discussed in an earlier lesson in this course. This is a very brief review: 49.0.1.1 Relative paths Relative paths give a path to the destination folder based on where you are right now (your current working directory). Relative paths 49.0.1.2 Absolute paths Absolute paths give a path to the destination folder based on the root directory of a file system. Absolute paths 49.0.2 Directions analogy So, to return to analogy of giving someone directions. Imagine that your friend plans to go from the town square, then to the library, and finally to the bakery. In this analogy, the town square represents the root directory, a universal starting location. If your friend is currently at the library and asks you for directions, you would likely tell them how to go from the library (where they are) to the bakery (where they want to go). This represents a relative path – taking you from where you are currently to where you want to be. Alternatively, you could give them directions from the Town square, to the library, and then to the bakery. This represents an absolute path, directions that will always work in this town, no matter where you are currently, but that contain extra information given where your friend is currently. Directions and paths analogy 49.0.3 Paths in projects In this course, you’ve learned how to organize your project folders and name your files for every data science project you complete. Setting up projects in this way not only helps keep you organized and your file naming consistent, but it also sets you up to easily refer to many different files while you’re writing code. Often you’ll find yourself writing some code in your raw_code folder, but you’ll want to read in some data that are in your raw_data folder. The good thing is that since everything for this project is together in a subfolders within a single project folder, you can accomplish this easily. 49.0.3.1 Use relative paths in projects To easily reference back to a dataset in your raw_data folder where you have a file called dataset.csv, you’ll want to use a relative path. You’ll set your path relative to the project folder. In this example, you will have set your project directory as /cloud/directory and you would reference your relative path data/dataset.csv. relative path to dataset.csv Since you’ve already defined where your starting point is for this project (/cloud/directory), you’ll be able to and should refer to every folder and every file easily with relative paths. 49.0.3.2 Relative paths make sharing projects easier The reason relative paths for each project are the correct approach is because if you share this project with someone else with a different computer, you would likely share the project file and all the subdirectories. If you were to share this with someone else and relative paths were used throughout all the code in your project, that new person would be able to follow along and run all your code without any problems. Using relative paths enables sharing However, you are not likely to (and shouldn’t!) share all the contents of your entire computer with another person. If you had used absolute paths that work for your computer, rather than relative paths, none of the paths will make any sense on the person’s computer whom you’ve shared your content with. To enable sharing with someone else, you should always use relative paths in your code that are relative to the project folder. Thankfully, there’s an easy way in R to make that happen! Absolute paths prohibit sharing 49.0.4 The here package We haven’t yet discussed what an R package is or what the basic commands in R are. However, we have covered file organization at this point and how to navigate within R. With that knowledge, we’re now going to discuss how to use the here package. While we’ll define in more depth what packages are, at this point, think of packages as something that allows you to accomplish something that you wouldn’t have been able to otherwise or that wouldn’t have been as easy to accomplish without the package. We’re going to discuss using a single R package now, called here. To get started using the here package (or any R package!), it first has to be installed (using the install.packages() function) and then loaded in (using the library() function). Note that the package name in the install.packages() function has to be in quotes but for library() it doesn’t have to. The code to copy and paste into your R console is below: install.packages(&quot;here&quot;) library(here) 49.0.5 Why to use here Okay, so if we’re discussing packages later, why discuss this one package now? Well, here is a package specifically designed to help you deal with file organization when you’re coding. This package allows you to define in which folder all your relative paths should begin within a project. 49.0.5.1 Setting your project directory After installing and loading the here package, to set your project directory using here(), you’ll simply type the command here(). You’ll notice that the output of here() and getwd() in this case is the same; however, what they’re doing behind the scenes is different. getwd() - shows the directory you are in currently here() - sets the directory to use for all future relative paths The here() function is what you want to use to set your project directory so that you can use it for future relative paths in your code. While in this case it also happened to be in the same directory you were in, it doesn’t have to be this way. The here() function looks to see if you have a .Rproj file in your project. If then sets your base directory to whichever directory that file is located. here() sets your project directory for future reference using here() So, if we were to change our current directory and re-type here() in the Console, you’ll note that the output from here() does not change because it’s still looking for the directory where .Rproj is. here() does not care what your current working directory is Note: In cases where there is no .Rproj file, here() will look for files other than a .Rproj file. You can read about those cases in the fine print here. But for most of your purposes, here() will behave as we just discussed. 49.0.5.2 Get files paths using here() After setting your project folder using here(), R will then know what folder to use to define any and all other paths within this project. For example, if you wanted to include a path to a file named “intro_code.R” in your raw_code directory, you would simply specify that in your code like this: here(&quot;code&quot;, &quot;raw_code&quot;, &quot;intro_code.R&quot;) This code says start from where I’ve already defined the project starts (here()), then look in the folders code and then raw_code, for the file “intro_code.R.” The syntax is simplified when using here(). Each subdirectory or file in the path is in quotes and simply separated by commas within the here() function, and voila you have the relative path you’re looking for relative to here(). The output from this code includes the correct file path to this file, just as you wanted! using here to get a file path 49.0.5.3 Where you should use this You should use here() to set the base project directory for each data science project you do. And, you should use relative paths using here() throughout your code any time you want to refer to a different directory or sub-directory within your project using the syntax we just discussed. 49.0.6 Additional Resources here, here, by Jenny Bryan here documentation, by Kirill Müller 49.0.7 Slides and Video Using Paths in Code Slides "],["introduction-to-markdown.html", "Chapter 50 Introduction to Markdown", " Chapter 50 Introduction to Markdown Markdown is a basic markup language designed to be displayed on the web and is part of writing an R Markdown document. With a few basic commands, you can create polished documents that can be used to: Communicate your results to others Provide daily/weekly reports of your employer 50.0.1 How to use Markdown If you know how to type you know how to use Markdown! Writing with Markdown is the exact same task as writing in a text editor like Microsoft Word. The only difference is that all the fancy buttons and options are removed and instead replaced with a series of commands that you can type to format your text. 50.0.2 Markdown Example Here’s a small example of what Markdown can do! You can see everything in this document is written as plain text, with just letters and basic symbols. An example markdown file Now you can see how that text appears when it is rendered in Markdown. Even though it was created with plain text, it appears with italics, bolding, different sized text, and even an image! A rendered markdown file 50.0.3 Main commands Three major formatting basics of Markdown are headers, bold and italicized text, and lists. Headers help you separate sections of your document, bold or italicized format allows you to emphasize important points in your document, and lists help you orderly arrange your ideas. 50.0.3.1 Headers Headers are straightforward. To create a header, you simply add a # sign right before the text you want to make a header. Keep in mind the # must be on the beginning of a new line (no text on the line before it). The more #’s you add before the text, the smaller the header will be. For example here is a list of headers you can use ordered from largest to smallest. # Largest ## Slightly less large ### Even less large #### Even smaller ##### Smaller still ###### Smallest shown here (but you can go smaller!) The reason why this did not register as a header is because it is formatted it as a comment. By inserting three tick marks before and after the block of text you wish to comment, it will not execute any formatting. Without the tick marks here is what we get! A rendered markdown file The headers look as we wanted them too. Thus headers should not be included in code chunks. If pound signs (#) are within a code chunk, Markdown will consider them to be comments, rather than headers. 50.0.3.2 Bolded and italicized text Creating bolded and italicized text is also very straightforward. Use a double asterisk (**) before and after the text you want to be bold and a single asterisk (*) before and after text you want to italicize. So in this sentence **what you want to bold** is shown **bolded** and *what you want to italicize* is shown in *italics*. See the results here: So in this sentence **what you want to bold** will be shown what you want to bold and *what you want to italicize* will be shown what you want to italicize. 50.0.3.3 Lists Lists are a useful way to organize your ideas or tasks. In Markdown, you can make your lists numbered or non-numbered. To make a numbered list, just put the number and a period in front of the item. As with headers, you do need to make sure your first number is on a new line (no text on the line before it!) 1. First item 2. Second item 3. Third item This becomes: First item Second item Third item For non-numbered lists, you can use your choice of asterisks (*), pluses (+), or minuses (-) to indicate list items: * First item * Second item OR + First item + Second item OR - First item - Second item All become: First item Second item You can create sub-items for your list by indenting (using multiple spaces or Tab) before the number or the asterisk/plus/minus. Make the number or symbol of the sub-item line up with the text of the item above it! 1. First item 2. Second item 1. Sub-item 2. Sub-item 3. Third item * Sub-item * Sub-item This becomes: First item Second item Sub-item Sub-item Third item Sub-item Sub-item If you want to cross off items on your list (as you do them, perhaps) you can create a strike-through using double tildes (~~). 1. ~~First item~~ 2. Second item 1. ~~Sub-item~~ 2. Sub-item This becomes: First item Second item Sub-item Sub-item 50.0.4 More complicated editing There are many more text modifiers you can use for Markdown. A short instructional guide can be found here. You will see some more of these commands later in this module, but you might want to bookmark the above link now for future reference! 50.0.5 Links Links to content on the internet can be included in a Markdown document as well. The format for a link is to put what you want your link to say in square brackets followed immediately by the web address where the link should go inside of parentheses, like this: [What you want your link to say](Web address where the link should go) For example if you want the link to go to www.google.com when clicked, then you’d replace the text in the parentheses and write: [What you want your link to say](www.google.com) This is what it would look like in your rendered Markdown file: What you want your link to say If you want to change the text of the link itself, you just change what’s in the square brackets. For example, you might want the sentence: If you don’t know the answer, you should look it up on Google, where the word Google would be a link to www.google.com. You could do that by putting Google into square brackets, with the web address www.google.com following immediately in parentheses, like this: If you don&#39;t know the answer, you should look it up on [Google](www.google.com). This would be shown as: If you don’t know the answer, you should look it up on Google. You can insert images in a Markdown document as well. This is done in a similar manner to links. For images you can add ![Image Caption](/path_to_image/image_name.png). The link can be the web location of an image or the local address of an image. For instance, if you type ![Yosemite National Park](https://commons.wikimedia.org/wiki/Yosemite_National_Park#/media/File:Half_Dome_from_Glacier_Point,_Yosemite_NP_-_Diliff.jpg) will show this. Yosemite National Park 50.0.6 Slides and Video Introduction to Markdown Slides "],["csv-excel-and-tsv-files.html", "Chapter 51 CSV, Excel, and TSV Files", " Chapter 51 CSV, Excel, and TSV Files In this lesson, we’ll discuss a few of the main file types used to store tabular data. To review briefly, tabular data are the type of data stored in spreadsheets. Information from different variables are stored in columns and each observation is stored in a different row. The values for each observation is stored in its respective cell. 51.0.1 CSV files Comma-separated values (CSV) files allow us to store tabular data in a simple format. CSVs are plain-text files, which means that all the important information in the file is represented by text (where text is numbers, letters, and symbols you can type on your keyboard). For example, consider a dataset that includes information about the heights and blood types of three individuals. You could make a table that has three columns (names, heights, and blood types) and three rows (one for each person) in Google Docs or Microsoft Word. However, there is a better way of storing this data in plain text without needing to put them in table format. CSVs are a perfect way to store these data. In the CSV format, the values of each column for each person in the data are separated by commas and each row (each person in our case) is separated by a new line. This means your data would be stored in the following format: sample CSV Notice that CSV files have a .csv extension at the end. You can see this above at the top of the file. One of the advantages of CSV files is their simplicity. Because of this, they are one of the most common file formats used to store tabular data. Additionally, because they are plain text, they are compatible with many different types of software. CSVs can be read by most programs. Specifically, for our purposes, these files can be easily read into R (or Google Sheets, or Excel), where they can be better understood by the human eye. Here you see the same CSV opened in Google Slides, where it’s more easily interpretable by the human eye: CSV opened in Google Slides As with any file type, CSVs do have their limitations. Specifically, CSV files are best used for data that have a consistent number of variables across observations. For example, in our example, there are three variables for each observation: “name”, “height”, and “blood_type”. If, however, you had eye color and weight for the second observation, but not for the other rows, you’d have a different number of variables for the second observation than the other two. This type of data is not best suited for CSVs. However, whenever you have information the same number of variables across all observations, CSVs are a good bet! 51.0.2 Downloading CSV files If you entered the same values used above into Google Slides first and wanted to download this file as a CSV to read into R, you would enter the values in Google slides, and then click on “File” and then “Download” as and choose “Comma-separated values (.csv, current sheet)”. The dataset that you created will be downloaded as a CSV file on your computer. Make sure you know the location of your file (if on a Chromebook, this will be in your “Downloads” folder). Download as CSV file 51.0.3 Reading files into RStudio Cloud Now that you have a CSV file, let’s discuss how to get it into RStudio Cloud! Log in to your RStudio Cloud account. Create a new project. On the RStudio workspace that you see, click on Upload under Files on the bottom right corner of the screen. On the window that pops up click on Choose File. Upload a file on RStudio Cloud Now, find where you saved the file (for instance “Downloads”) and click on OPEN. After this, the window closes automatically and you’ll be back in your workspace on RStudio Cloud. You will see that your CSV file now appears among other files. (A reminder: if you were working on a data science project, this would go in your “raw_data” directory. For this example, however, we’ll keep it in “cloud/project”) Find local file Now, while the file has now been uploaded to your RStudio Cloud project, it’s important to recognize the file is not yet imported to your R environment as an object. We’ll do that now! The best way to accomplish this is using the function read_csv() from the readr package. (Note, if you haven’t installed the readr package, you’ll have to do that first.) Inside the parenthesis of the function, write the name of the file in quotes, including the file extension (.csv). Make sure you type the exact file name. Save the imported data in a data frame called df_csv. Your data will now be imported into R environment. If you use the command head(df_csv) you will see the first several rows of your imported data frame: ## install.packages(&quot;readr&quot;) library(readr) ## read CSV into R df_csv &lt;- read_csv(&quot;sample_data - Sheet1.csv&quot;) ## look at the object head(df_csv) read_csv() Above, you see the simplest way to import a CSV file. However, as with many functions, there are other arguments that you can set to specify how to import your specific CSV file, a few of which are listed below. However, as usual, to see all the arguments for this function, use ?read_csv within R. col_names = FALSE to specify that the first row does NOT contain column names. skip = 2 will skip the first 2 rows. You can set the number to any number you want. Helpful if there is additional information in the first few rows of your data frame that are not actually part of the table. n_max = 100 will only read in the first 100 rows. You can set the number to any number you want. Helpful if you’re not sure how big a file is and just want to see part of it By default, read_csv() converts blank cells to missing data (NA). Note that the read_csv() function is a part of a family of functions that all have similar names. For example, if you need to read in a TSV file, you can use read_tsv() function. If you need to read in an RDS file, you can use the read_rds() function. Note that there is a function read.csv which is available by default in R. It’s not quite as nice to use, but you will likely see this function in others’ code, so we just want to make sure you’re aware of it. 51.0.4 Writing CSV files into RStudio Cloud The readr family of functions also includes writing functions. If you want to write a CSV, TSV, or RDS file you can use the write_csv(), write_tsv() or write_rds() functions! In this example, we can write the iris data to a CSV file by providing two arguments. The first is what data frame we would like to write to a CSV file. In this case, we want to write iris data frame to a file. The second argument is what the filename we should save to this to a file named \"iris_data.csv\". Note that the ## install.packages(&quot;readr&quot;) library(readr) write_csv(iris, &quot;iris_data.csv&quot;) 51.0.5 Excel files While CSV files hold plain text as a series of values separated by commas, an Excel (or .xls or .xlsx) file holds information in a workbook that comprises both values and formatting (colors, conditional formatting, font size, etc.). You can think of Excel files a fancier CSV file. While this may sound appealing, we’ll remind you that CSV files can be read by many different pieces of software, Excel files can only be viewed in specific pieces of software, and thus are generally less flexible. That said, many people save their data in Excel, so it’s important to know how to work with them in RStudio Cloud. Let’s go back to the Google Sheet that we created and instead of downloading the file locally as as CSV, download it as Microsoft Excel (.xlsx) file. Download as Excel file Save the file where you can find it. Similar to the CSV file, first, upload the file into your RStudio Cloud workspace. 51.0.6 Reading Excel files into RStudio Cloud To read this file into R, we’ll have to use a different function than above, as this file is not a CSV file. We’ll use the read_excel() function from the readxl package. Install the package first and then use the function read_excel() from the package read the Excel file into your R Environment. As above, by default, read_excel() converts blank cells to missing data (NA). ## install and load package install.packages(&quot;readxl&quot;) library(readxl) df_excel &lt;- read_excel(&quot;sample_data.xlsx&quot;) head(df_excel) Find local file 51.0.7 Text files Another common form of data is text files that usually come in the form of TXT or TSV file formats. Like CSVs, text files are simple, plain-text files; however, rather than columns being separated by commas, they are separated by tabs (represented by “ in plain-text). Like CSVs, they don’t allow text formatting (i.e. text colors in cells) and are able to be opened on many different software platforms. This makes them good candidates for storing data. 51.0.8 Reading TSV files into RStudio Cloud The process for reading these files into R is similar to what you’ve seen so far. We’ll again use the readr package, but we’ll instead use the read_tsv() function. ## read TSV into R df_tsv &lt;- read_tsv(&quot;sample_data - Sheet1.tsv&quot;) ## look at the object head(df_tsv) 51.0.9 Reading TXT files into RStudio Cloud Sometimes, tab-separated files are saved with the .txt file extension. TXT files can store tabular data, but they can also store simple text. Thus, while TSV is the more appropriate extension for tabular data that are tab-separated, you’ll often run into tabular data that individuals have saved as a TXT file. In these cases, you’ll want to use the more generic read_delim() function from readr. Google Sheets does not allow tab-separated files to be downloaded with the .txt file extension (since .tsv is more appropriate); however, if you were to have a file “sample_data.txt” uploaded into your RStudio Cloud project, you could use the following code to read it into your R Environment, where “ specifies that the file is tab-delimited. ## read TXT into R df_txt &lt;- read_delim(&quot;sample_data.txt&quot;, delim = &quot;\\t&quot;) ## look at the object head(df_txt) This function allows you to specify how the file you’re reading is in delimited. This means, rather than R knowing by default whether or not the data are comma- or tab- separated, you’ll have to specify it within the argument delim in the function. read_delim() is a more generic version of read_csv(). What this means is that you could use read_delim() to read in a CSV file. You would just need to specify that the file was comma-delimited if you were to use that function. 51.0.10 Exporting Data in R to CSV The last topic of this lesson is about how to export data from R. So far we learned about reading data into R. However, sometimes you would like to share your data with others and need to export your data from R to some format that your collaborators can see. As discussed above, CSV format is a good candidate because of its simplicity and compatibility. Let’s say you have a data frame in the R environment that you would like to export as a CSV. To do so, you could use write_csv() from the readr package. Since both methods are fairly similar, let’s look at the one from readr package. Since we’ve already created a data frame named df_csv, we can export it to a CSV file using the following code. After typing this command, a new CSV file called my_csv_file.csv will appear in the Files section. write_csv(df_csv, path = &quot;my_csv_file.csv&quot;) You could similar save your data as a TSV file using the function write_tsv() function. We’ll finally note that there are default R functions write.csv() and write.table() that accomplish similar goals. You may see these in others’ code; however, we recommend sticking to the intuitive and quick readr functions discussed in this lesson. 51.0.11 Slides and Video CSV, Excel, and TSV Files Slides "],["importing-data-from-google-sheets.html", "Chapter 52 Importing Data from Google Sheets 52.1 Recommended places to get data", " Chapter 52 Importing Data from Google Sheets In the last lesson we discussed how to read various file types into R. In each of these examples, we first had to upload the file into our RStudio Cloud project before we could read the file into R using one of the read_*() functions. What if we could cut out that first step, eliminating the need to upload the file into our project? This way, we could just use one function to read data directly into RStudio Cloud. This is capable thanks to data stored Google Sheets and the fantastic R package googlesheets4. Additionally, using this approach, we can read in and analyze data hosted on Google Sheets in real-time. This means that as the data are updated over time, you can read the data into R and analyze it in its current state. Then, when the data are updated, you just re-run your code, and you’ll get an updated analysis. To see what we mean specifically, let’s take a look at an example. Imagine you’ve sent out a survey to your friends asking about how they spend their day. Let’s say you’re mostly interested in knowing the hours spent on work, leisure, sleep, eating, socializing, and other activities. So in your Google Sheet you add these six items as columns and one column asking for your friends names. To collect this data, you then share the link with your friends, giving them the ability to edit the Google Sheet. Survey Google Sheets Your friends will then one-by-one complete the survey. And, because it’s a Google Sheet, everyone will be able to update the Google Sheet, regardless of whether or not someone else is also looking at the Sheet at the same time. As they do, you’ll be able to pull the data and import it to R for analysis at any point. You won’t have to wait for everyone to respond. You’ll be able to analyze the results in real-time by directly reading it into R from Google Sheets, avoiding the need to download it each time you do so. In other words, every time you import the data from the Google Sheets link using the googlesheets4 package, the most updated data will be imported. Let’s say, after waiting for a week, your friends’ data look something like this: Survey Data 52.0.1 The googlesheets4 package The googlesheets4 package allows R users to take advantage of the Google Sheets API. In the first lesson in this course we mentioned that an API allows different application to communicate with one another. In this case, Google has released an API that allows other software to communicate with Google Sheets and retrieve data and information directly from Google Sheets. The googlesheets4 package enables R users (you!) to then easily access that API and retrieve your Google Sheets data. Using this package is is the best and easiest way to analyze and edit Google Sheets data in R. In addition to the ability of pulling data, you can also edit a Google Sheet or create new sheets. Like any other package, we first need to install and attach the package. 52.0.1.1 Getting Started with googlesheets4 install.packages(&quot;googlesheets4&quot;) library(googlesheets4) Now, let’s get to importing your survey data into R. Every time you start a new session, you need to authenticate the use of googlesheets4 package with your Google account. This is a great features as it ensures that you want to allow access to your Google Sheets and allows the Google Sheets API to make sure that you should have access to the files you’re going to try to access. The command gs_auth(new_user = TRUE) will open a new page in your browser that asks you which Google account’s Google Sheets you’d like to give access to. Click on the appropriate Google user to provide googlesheets4 access to the Google Sheets API. Authenticate After you click “ALLOW”, giving permission for the googlesheets4 package to connect to your Google account, you will likely be shown a screen where you will be asked to copy an authentication code. Copy this authentication code and paste it in your RStudio Cloud console. Allow 52.0.1.2 Navigating googlesheets4: gs_ls() and gs_title() Once authenticated, you can use the command gs_ls() to list all your worksheets on Google Sheets as a table. In order to access a specific sheet, in this case the sheet that you created and named “survey”, you need to use the function gs_title(). We’ll assign this information to the object survey_sheet. survey_sheet &lt;- gs_title(&quot;survey&quot;) If you type the name of the sheet correctly, you will see a message that says Sheet successfully identified: “survey”. Sheet successfully identified 52.0.1.3 Reading data in using googlesheets4: gs_read() At this point, you can read the data into R using the function gs_read() with the survey_sheet object output from gs_title() as your input to gs_read(): survey_data &lt;- gs_read(survey_sheet) Sheet successfully read into R There are additional (optional) arguments to gs_read(), some are similar to those in read_csv() and read_excel(), while others are more specific to reading in Google Sheets: skip = 1 : will skip the first row of the Google Sheet ws = 1 : specifies that you want googlesheets4 to read in the first worksheet in your Google Sheet col_names = FALSE : specifies that the first row is not column names range = \"A1:G5\" : specifies the range of cells that we like to import is A1 to G5. n_max = 100 : specifies the maximum number of rows that we want to import is 100. 52.0.1.4 Adding rows and editing cells In addition to reading in data from Google Sheets directly using the googlesheets4 package, you can also modify your Google Sheet directly through R. For example, you can edit a cell or add a row to your sheet. Let’s say you’d like to add your own respond to the survey. For this you can use the command gs_add_row(). Note that the input argument specifies what you would like to add in the new row. If everything goes well, you will get a message saying Row successfully appended. my_response &lt;- c(&quot;Me&quot;, 10, 8, 2, 2, 1, 1) gs_add_row(survey_sheet, input = my_response) gs_add_row() If you now check the sheet on Google Sheets, you will see the appended row. Survey Data with Added Row To edit a specific cell you can use the command gs_edit_cell() but you will have to tell googlesheets4 which specific cell to edit. Let’s say we want to change the value of the cell D4 from 0 to 2. For this we will use the gs_edit_cells() function. The anchor argument points to the cell that we want to modify and the input argument contains the new value that we want to assign to the cell. gs_edit_cells(survey_sheet, anchor = &quot;D4&quot;, input = 2) gs_edit_cells() If you were to return to your Google Sheets, you’d notice that cell D4 now has a 2, rather than a 0 in it! 52.0.2 Importing CSV files from the web This lesson has focused on getting data from Google Sheets into RStudio Cloud; however, sometimes the data you need to work with is elsewhere online but you’d like to store it in a Google Sheet. While we will later learn that you can import them directly into R, it’s good to know that you can also import CSV files hosted on the web directly into Google Sheets. For instance, the dataset here is a CSV file containing countries GDPs (national incomes). In order to import the file directly to Google Sheets, open a blank Google Sheets document as we learned before. In the first cell (top left corner) type in =importData(\"https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv\"). Make sure to include the equal sign (=) in the beginning. importing data directly into Google Sheets This will import all the data to your Google Sheets document. You can then use the steps discussed above any time you want to work with these data in RStudio Cloud. data in Google Sheets 52.0.3 Summary In this lesson, we’ve introduced the R package googlesheets4. We’ve discussed the need for authentication and have demonstrated a number of its basic capabilities. We’ve walked through an example of how to read a Google Sheet into R and how to add and edit content directly to your Google Sheet from R. We also briefly covered how to import CSV data into Google Sheets directly. While we’ve covered the basics, there are certainly a number of additional capabilities of the package, so feel free to explore even more! 52.0.4 Additional Resources googlesheets4 on GitHub - includes an incredibly helpful README from Jenny Bryan on the basic functions of the package as well as a table with brief descriptions of all the functions googlesheets4 vignette - a more in-depth tutorial at the packages’ functionality from Jenny Bryan and Joanna Zhao 52.0.5 Slides and Video Importing Data from Google Sheets Slides 52.1 Recommended places to get data TODO: Where to get data "],["finding-data.html", "Chapter 53 Finding Data", " Chapter 53 Finding Data Now that we know what data are, how to work with them in RStudio Cloud, and how to get them into RStudio Cloud, if you have a question you want to answer with data, where do you find data to work with? In some cases you’ll have to create your own data set but in other cases you can find data that others have already generated and start from there! In this lesson, we’ll discuss the difference between public and private data and direct you to a number of resources where you can find helpful data sets for data science projects! 53.0.1 Public versus Private Data Before discussing where to find data, we need to know the difference between private and public data. Private data are datasets to which a limited number of people or groups have access. There are many reasons why a dataset may remain private. If the dataset has personally-identifiable information within it (addresses, phone numbers, etc.), then the dataset may remain private for privacy reasons. Or, if the dataset has been generated by a company, they may hang onto it so that they have an advantage over their competitors. Often, you will not not have access to private data (although sometimes you can request and gain access to the data or pay for the data to get access). But that’s OK because, in general, public data are freely-available. Unlike private data generated by companies, data generated by governments are often made public and are available to anyone for use. 53.0.2 Publicly-available data As a data scientist, there’s a good chance you may work with private company data as part of your job. However, before you have that job, it’s great practice to work with datasets that are publicly-available and waiting for you to use them! In this section, we’ll direct you to sources of different datasets where you can find a dataset of interest to you and get working with it! 53.0.2.1 Open Datasets There are a number of companies dedicated to compiling datasets into a central location and making these data easy to access. Two of the most popular are Kaggle and data.world. On each site, you’ll have to register for a free account. After registering you’ll have access to many different types of datasets! Explore what’s available there and then start playing around with a dataset that interests you! kaggle and data.world are great places to look for datasets Publicly-available datasets are also curated at Awesome Public Datasets, so feel free to look around there as well! 53.0.2.2 Government Data Government data can provide a wealth of information to a data science. Government data sets cover topics from education and student loan debt to climate and weather. They include business and finance datasets as well as law and agriculture data. Here we provide lists of governments’ open data to just give you and idea of how many datasets are out there. This will only include a tiny portion of what cities and federal governments’ data are available for you to use. So, if there’s a place whose data you want to work with, look on Google for “open data” from that place! 53.0.2.2.1 US Data If you’re interested in working with government data from the United States, data.gov is place to get datasets that have been released by the the United States government. Here you can find hundreds of thousands of datasets. These data cover many topics, so if you’re interested in working with government data, data.gov datasets is a great place to start! data.gov has hundreds of thousands of datasets 53.0.2.2.2 Census Data The US Census is responsible for collecting data about the people within the United States and United States’ economy every ten years. These data are also accessible online and they can be worked with in R using the very helpful tidycensus package! The US Census provides data about the US people and economy 53.0.2.2.3 Open City Data The US’s federal government is of course not the only place to obtain government data. More and more cities across the world are starting to release open data at the city level. A few of these cities and their respective open city data links are provided below: Baltimore, MD (USA) Cincinnati, OH (USA) Las Vegas, NV (USA) New York City, NY (USA) San Francisco, CA (USA) Toronto, Ontario (Canada) Additionally, to see a summary of what datasets are available from cities across the USA, check out the US Open City Data Census from the Sunlight Foundation. US City Open Data Census 53.0.2.2.4 Global Data In addition to the United States, there are many other countries providing access to open data with more and more providing access and updated datasets each year. These include (but are not limited to!) datasets from many countries within Africa and Latin America as well as Canada, Ireland, Japan, Taiwan, and the UK. Additionally, to see what datasets are available globally, the Global Open Data Index is a great place to start! Global Open Data Index 53.0.2.3 APIs We’ve mentioned APIs previously, but it’s important to include them here as well. APIs provide access to data you’re interested in obtaining from websites. There are APIs for so many of the websites you access regularly. Google, Twitter, Facebook, and GitHub (among many others) all have APIs that you can access to obtain the dataset you’re interested in working with! 53.0.2.4 Company Data Finally, we mentioned above that companies often keep their data private for a number of reasons, and that’s ok! When companies do release their data, they will often be found on websites like Kaggle and data.world. If there is a company whose data you’re interested in, you can search for the company’s data on either of these two data repositories or on on the company’s website directly to see if they provide the data there or if you can scrape their website to obtain the information you need! There may not always be a way to get the exact dataset you’re looking for, but you can often find something that will work! 53.0.3 Data You Already Have Sometimes, it’s not about finding data someone else has already collected on a bunch of individuals in a population. Rather, getting data sometimes just involves taking a look at things you already have but just haven’t yet realized are data you can analyze. For example, MP4 files you’ve bought and have on your computer are data! They can be analyzed using tuneR and seewave. You could use this type of data to categorize the music in your library or to build a model that takes data on what songs were already big hits to determine what qualities of a song predict that it may be a big hit. Alternatively, you could scrape the websites you frequently visit (using rvest!) to answer interesting questions. For example, if you were interested in writing a really great title for the newest video of your pet doing something super cute, you might scrape the web for titles of pet videos that have recently gone viral. You could then craft the perfect title to use when you upload your pet video. Granted, this may not be an example answering the most important type of data science question; however, writing up how you did this would make a really great blog post, which is something we’ll discuss in a lesson in a few courses! Finally, social networking websites like Facebook and Twitter, collect a lot of data about you as an individual. You have access to this information through the websites APIs, but can also download data directly. After news of the Facebook and Cambridge Analytica data breach, many articles were published about how to download your Facebook data. These data can be downloaded and then analyzed to look at trends in your data over time. How many pictures have you uploaded and been tagged in over time - has that changed? What topics do you most frequently discuss in Messenger? Or, maybe you’re interested in mapping the places you’ve been based on where you’ve checked in. All of these data can be analyzed from data that are already there, just waiting for you to work with them! In all, sometimes getting the data just means realizing the data you already have at your disposal, figuring how to get the data into a format you can use, and then working with the data using the tools you have! 53.0.4 Summary In this lesson, our goal was to give you an idea of where to find data so that you can start working on interesting data science projects. Once you’ve located an interesting dataset, use the skills learned throughout this course to get the data into R. Then, get wrangling! Before you know it you’ll be more than halfway through an interesting data science project. Often finding and wrangling the data take up the most time! 53.0.5 Slides and Video Finding Data Slides "],["internet-safety.html", "Chapter 54 Internet Safety", " Chapter 54 Internet Safety Just like driving a car, there are inherent risks to using the Internet and doing data analysis on the cloud. These risks shouldn’t mean that you should always be fearful about your online safety, however, they should make you more aware that there are consequences if you are not cautious. Internet safety (or online safety) revolves around being knowledgeable about what these risks are, knowing how to deal with risks that arise when working online, and working hard to increase personal safety against security risks associated with using the Internet. The goal of Internet safety is to maximize personal safety and minimize security risks. We’ll discuss the basics of this below, but know that there are people whose entire careers are dedicated to Internet safety, so this will simply touch on the basics. 54.0.1 WiFi WiFi is the technology that enables you to wirelessly connect to the Internet. Computers, smartphones, video-game consoles, and TVs are among the many types of devices that are WiFi-compatible. As is often the case, increased access to the Internet comes with increased risk to network security. 54.0.1.1 Public WiFi Completely-open and free public WiFi, or Internet access that does not require a password or a screen to login from is the least secure type of network. When connected to public WiFi, be extra vigilant. Avoid working with sensitive data while on a completely open and public network, and do not make online purchases while on this network. 54.0.1.2 Semi-Open WiFi Semi-open WiFi networks are networks potentially open to everyone, but that may require a password (maybe one that is printed on your receipt at a coffee shop) or may require you to login by providing an e-mail address. When given the choice, opt to connect to these networks rather than completely-open public WiFi networks. 54.0.1.3 Password-protected WiFi The most secure option, however, is when you connect to a password-protected WiFi network, so use password-protected WiFi whenever you have the option. WiFi at your home should absolutely be password-protected. 54.0.1.4 Use HTTPS Whenever Possible The “S” in HTTPS stands for secure. So, what does HTTP stand for? HTTP refers to “Hyper Text Transfer Protocol.” You’re likely most familiar with these letters as being part of your website. When you type “www.gmail.com” into your Chrome browser, Chrome redirects you to “https://mail.google.com/mail/u/0/#inbox.” HTTP refers to how the data are sent from your browser (where you typed “www.gmail.com”) and the website to which you’re trying to connect (www.gmail.com). When the web address starts with https:// rather than http://, this means that the data sent over your Internet connection are encrypted. Encryption is a process that generates a message that cannot be decoded by anyone without a key. Thus, if someone were to intercept your encrypted data as it were transferred over the Internet, they may be able to intercept your data, but they wouldn’t be able to decipher the information, as they wouldn’t have access to the key. When a website is using encryption (https://), there will be a padlock to the left of your web address bar to indicate that the HTTPS connection is in effect. When sharing sensitive information on the Internet (ie a credit card number or personal health information), it should only ever be done on a secure (encrypted) network. 54.0.2 Passwords In the age of apps for everything and technology being everywhere, you likely have a lot of requests daily for passwords. While they may seem like an annoyance, using passwords, and importantly, using good passwords is worth the effort. 54.0.2.1 Strong Passwords Strong passwords may be harder to remember, but that’s the point. You don’t want someone else to be able to easily guess your password. Characteristics of Strong Passwords: Use a combination of random letters Use both capital and lower case letters Include numbers, letters, and symbols Disperse the letters and symbols throughout the password (not just at the beginning and the end) Has at least 12 characters What to Avoid when Creating A Password: Avoid using names of you or anyone in your family Do not include the words “Passcode” or “Password” Avoid using sequential numbers (i.e. 123) Avoid using your telephone number Don’t make obvious substitutions to words (i.e. avoid simply replacing the letter “o” in a word with the number “0”) 54.0.2.2 Utilize Passwords When given the option, use a password. Do not opt out of using a password to log in to your phone or your computer. When asked to set a password, do so, and make it a good one. In addition to setting passwords, make sure you have multiple different passwords. Do not use the same password for all your most important accounts. If someone were to log onto your WiFi network, you wouldn’t also want that person to be able to gain access to your credit card, Gmail, bank account, and/or Facebook account. Use different passwords for different accounts. 54.0.2.3 When to Change Passwords If your password was set by a third-party company (say your Internet provider), you should change your password right away. Otherwise, it’s a good practice to change passwords to your most sensitive information (i.e. WiFi, credit cards/banking, etc.) at least every six months. 54.0.2.4 Never Share Passwords A final word on passwords: never share them. Reputable companies will never ask for them. Your bank will never require you to tell it to them. And, neither will the IRS. If someone is asking for your password, it is almost certainly a scam. 54.0.3 Good Internet behavior On the Internet there are few basic guidelines to follow that will help you be a good citizen and help keep you safe. This list is surely not exhaustive, but it’s a good start. When online: * Don’t be a jerk * Never share your passwords * Think before you click * Don’t click on links sent to you from people you don’t know * Don’t click on links from someone you do know if it doesn’t seem like something they would send (i.e. an email with a weird subject line that doesn’t sound like them or a link in an email that says “Vacation Pix” when they wouldn’t normally send those pictures, wouldn’t use the word “Pix”, or haven’t recently been on a trip) 54.0.4 Online Scams While we would love if everyone on the Internet behaved well (and most people do!), there are of course bad actors. To avoid getting caught up in an online scam, beware of: people/websites posing as people from a trustworthy company who attempt to obtain your private information - emails asking for credit card numbers or passwords are scams people who call and ask for passwords to accounts and who seem to know a lot about your family and claim to be from law enforcement. This is likely a scam. You can always hang up and call your local law enforcement directly to be sure. people/websites offering prices that are way too low for housing or big purchases on the Internet. These are likely a scam. 54.0.5 Malware &amp; Spyware Finally, malware and spyware are software designed to be malicious. The goal of malware and spyware is to collect your private information (usernames, passwords, credit card numbers) without you ever knowing. This software often acts through e-mail or other software. By avoiding clicking on suspicious links and not downloading software with which you’re not familiar, you can avoid the issues caused by malicious software. 54.0.6 Security on a Chromebook Because Chromebooks do not run a typically operating system, they are much more secure than other laptops. While explained in greater depth on Google’s support documentation, Chromebooks have certain advantages over other laptops when it comes to security: Automatic updates - ensure that your Chromebook is never behind on security updates Sandboxing - each web page runs in its own environment (sandbox), so if one page is infected, that page won’t affect other tabs or apps running at the time. Verified Boot - every time the Chromebook starts up, it does a self-check to detect any issues with security. Encryption - web apps on a Chromebook store all data safely in the cloud with encryption, making it resistant to tampering 54.0.7 Slides and Video Internet Safety Slides "],["data-privacy.html", "Chapter 55 Data Privacy", " Chapter 55 Data Privacy In the previous lesson, we covered good practices when connecting to WiFi and working on the Internet. We noted that data are safer when they’re encrypted, but we didn’t go into much more detail than that. In this lesson we’ll cover what data privacy is, why it’s important, and discuss encryption in slightly more detail. Again, remember that there are people who dedicate their entire careers to data privacy. This lesson simply touches on the basics. Feel free to search on the Internet to learn even more about Data Privacy! 55.0.1 What is Data Privacy? Data privacy is: {cite: “Wikipedia”, url: “https://en.wikipedia.org/wiki/Information_privacy”} &gt; the “relationship between the collection and dissemination of data, technology, the public expectation of privacy, and the legal and political issues surrounding them.” This complex definition correctly suggests that data privacy is not a simple matter. A simpler definition of data privacy would maybe be how to keep personal and private information safe. Concerns arise with data privacy whenever there is personally identifiable information (PII) or sensitive information that is being collected, stored, used, (and eventually destroyed and deleted). When handled appropriately, only people who should have access to the information do. When mishandled, this information could be accessed by others who should not have that information. Data are everywhere, so it’s incredibly important to think about data privacy early on in every single data science project. It’s much better to be too vigilant than to make a mistake, allow data to fall into the wrong hands, and have to try to clean up the mess, as you’ll see in a few examples below. So, think of data privacy concerns early and often to avoid making a mistake. 55.0.2 Personally Identifiable Information In the US, Personally Identifiable Information, often simply referred to by the terms initials, PII, is any “information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual. This could be a first and last name, a picture of someone’s face, a driver’s license number, a date of birth, an address, an individual’s genetic code, or a telephone number, among many other pieces of information. All of these pieces of information could help identify a person. It’s these type of data that must be handled extremely carefully. When you sign up for an app on your computer or phone, you likely provide that company with some PII. You often give them your name and your address (among other information). You likely assume that this company will handle your data appropriately, and, if everyone is following the rules, they will. This means they won’t share it with others, use it for purposes other than those for which you’ve given them permission, or allow others companies/people to steal your information. However, as reported regularly in the news, companies do not always handle your data as they should. We’ll discuss what concerns you should have as you’re working with other people’s data and how data should be handled. 55.0.3 What is encryption? To review from the last lesson, when data are encrypted, all the information is jumbled into a code that can only be decoded by someone who has the key. This means that if data are intercepted while being transferred, the person who has intercepted the data will not be able to understand the data, as they won’t have access to the key and will only have the completely jumbled information. It is a security measure to help keep data safe. 55.0.3.1 Working in RStudio Cloud In earlier lessons, you’ve been working in RStudio Cloud and will continue to do so as your hone your data science skills. Data on RStudio Cloud are encrypted at rest (when they’re sitting in your project) and in transit (when they’re being uploaded or downloaded). This means that, if intercepted, the person who has intercepted the data will not be able to decipher the information contained, as they don’t have the key. However, if you download data from RStudio Cloud and store them directly on your computer, they are no longer encrypted. If you have PII in a dataset that is stored on your laptop directly, that information is not protected. So, be careful working with datasets that contain PII that have been downloaded to your computer. 55.0.3.2 HTTPS An additional reminder: websites that have https:// (rather than just http://) also use encryption for data transfer, increasing security for data that are transferred. When working with PII and transferring data, be sure that the websites you’re working with are using HTTPS. 55.0.4 Human Security Human security is the concept that individual people (rather than just countries) should be kept safe and secure. With regards to data science, this means that when working on the Internet, regulations and laws should be made not just to protect the security of a nation, but rather to protect every individual and their data. Data Science projects should NOT: * increase risk or harm * pose threats to individuals * make individuals’ PII publicly-available or susceptible to theft * break any laws * share data with other groups/companies without the consent of the individuals * saved data insecurely 55.0.5 Computer Security Computer Security (or cybersecurity) is {cite: “Wikipedia”, url: “https://en.wikipedia.org/wiki/Computer_security”} &gt; “the protection of computer systems from the theft and damage to their hardware, software or information, as well as from disruption or misdirection of the services they provide.” This means that, in addition to keeping individuals’ data safe (maximizing human security), data science projects must also consider how to ensure that the computers and software they use and create are designed in a secure manner. For data science projects, this means that data being transferred over the Internet should be done so safely (using encryption) and that software you develop or use should not post PII or other sensitive to the Internet. 55.0.6 Open Science There is an important movement in science currently where individuals promote what is known as open science. Practitioners of open science support making their scientific studies as transparent as possible. Specifically, they provide all the data, programming code, and software necessary to repeat their analyses. Open science is great for the scientific community and public, as everyone has access to the tools and data used. However, it is not without its privacy risk. Open Science practitioners are still responsible for protecting PII. This means that individual-level information (names, dates of birth, addresses, etc.) must all be removed from one’s dataset before it is released to the public. Being a supporter and practitioner of open science is great, but you must always ensure that when you’re releasing and sharing data, you are not inadvertently putting others at risk. 55.0.6.1 Open Data Open data are data that are freely-available to anyone. Local and federal governments as well as many scientists make their data freely-available to the public. Open data are wonderful in that anyone can work with them. Sharing data is a great thing! But, sharing must be done with the caveats already mentioned. Individual-level information (PII) should be removed from datasets prior to release. Individuals should not be identifiable from data freely-available on the Internet. 55.0.6.2 Open-source Software Like open data, open-source software are software that are designed to be freely-available to anyone. This means that the software code is all available, so others can not only download and use the software for free, but also can download the code and modify it for their own purposes. The R programming language is itself an open-source project and all packages made for R are also open-source. This means that programming in R will always be free, and the code will always be publicly-available. 55.0.7 Data Breaches To understand data privacy, it’s good to know definitions and best practices, but it’s also important to learn from past mistakes. Companies have not always handled data securely. Here, we’ll discuss a few famous data breaches and touch on what went wrong so these errors can be avoided in the future. 55.0.7.1 Facebook In March of 2018, The New York Times and The Guardian both broke stories about how data from at least 50 million Facebook profiles were used by a company called Cambridge Analytica to build profiles of individual US voters, allowing individuals be to targeted with personalized political advertisements. While the details are provided in the links provided above, briefly here, the data were mined from individuals who had consented for their data to be used for academic purposes. However, Cambridge Analytica was collecting these data for non-academic purposes and collecting data from friends of these individuals who had consented to have their data collected but who had not consented to have their data used. This data breach at Facebook demonstrated that Facebook did not have sufficient protocols in place to protect user data. As a result, Mark Zuckerberg, Facebook’s CEO, has had to testify before Congress and the company has promised to make changes to improve data security. 55.0.7.2 Equifax In the Fall of 2017 Equifax, a credit-reporting agency, disclosed that partial driver’s license information was stolen from 2.4 million US consumers. This hack was traced back to a “preventable software flaw”. In other words, in March of 2017, Equifax identified a weakness in a piece of software they were using. However, they did not move to fix that weakness quickly. Partial drivers licenses were stolen from May until June of 2017. Thus, Equifax knew about the problem before any data were actually breached. The entire breach could have been avoided. Prioritizing security and moving to fix problems immediately upon realizing an issue is critically important. 55.0.7.3 Ashley Madison In July of 2015, Ashley Madison, a website that helps people cheat on their spouses, was hacked and personal information, including e-mail addresses, from 32 million site member’s were stolen and published. The windfall rippled through society, leading to resignations, divorces and suicides. The “Impact Team,” the group of hackers responsible for this hack, publicly stated that part of the reason they decided to release the data was because Ashley Madison had been charging users a $19 fee to completely erase their profile information, but that Ashley Madison had failed to actually scrub these data from their records. The security lesson here is that there should always be a mechanism by which users can remove themselves from a dataset. In the European Union, the General Data Protection Regulation (GDPR) has stated that, by law, companies must have this feature built-in. Users should always be able to remove themselves from a dataset. 55.0.7.4 OKCupid In May of 2016, researchers scraped profiles from 70,000 users on OKCupid, an online dating site, and made them completely open to the public. These researchers did not (1) have permission from OKCupid, (2) obtain informed consent from the users, nor did they (3) remove PII from the data prior to release. Since their original release on The Open Science Framework, given the issues with the dataset just mentioned and the fact that the collection of the data did not follow OKCupid’s Terms of Service, the dataset was taken down. However, hundreds of people had already downloaded the data at that point. In this case, a set of researchers did not comply with the Terms of Service they agreed to by signing up for OKCupid. While it was likely not illegal to obtain the data, as OKCupid made the data sort-of-public, it was certainly unethical, as the researchers did not take individual data security practices into consideration. So, even when you’re not necessarily doing something illegal, you can still do something unethical that does not follow good data privacy practices. 55.0.7.5 Strava A similar example of using data legally but with unintended negative consequences occurred when data from Strava, a popular fitness-tracking app, gave away the location of secret US army bases throughout the world in late 2017. Individual users would use the app to track their activity; however, in foreign countries, where Strava-users are almost exclusively foreign military personnel, bases can be identified easily from Strava heatmaps, which show all the activity tracked by its app users, as they are the only individuals contributing to the maps in those areas. The lesson to be learned here is that when releasing data, always consider possible unintended consequences. Think hard about the implications of your data and your analyses. Being vigilant and always considering data privacy and possible unintended consequences of your work are incredibly important. 55.0.8 Conclusions Hopefully we’ve explained a number of considerations to take into account when working with and sharing data. Data are powerful. It’s important to use them responsibly. Be careful with PII Fix security issues immediately Keep individuals’ data safe Don’t steal data Even if it’s legal, it may not be right or ethical Consider unintended consequences of your work 55.0.9 Slides and Video Data Privacy Slides "],["ethical-data-science.html", "Chapter 56 Ethical Data Science", " Chapter 56 Ethical Data Science From the emails automatically marked as spam in your Inbox and facial recognition on Facebook to the targeted advertisements you see whenever you’re online, data science has made its way into our everyday lives. Often, this is a positive because data scientists generally set out to improve the world (say, by analyzing crime data in hopes of reducing violent crime) or to make our lives easier (by preventing spams in our mailboxes, for example). However, data science projects are certainly not without negative consequences. We discussed some of the companies who have run up against issues properly securing user data in the last lesson; however, protecting the privacy of users’ data is not the only time data scientists should consider the ethics of their work. In fact, ethical considerations should be made from the start of a project and should never stop being made. We’ll discuss what we mean by that in this lesson. When we talk about the ethics of data science, we’re talking about how to use data to improve the lives of individuals in our society in the world without causing harm to any groups with our work. We’re talking about putting in the work ahead of time to avoid unintended negative consequences of our work. Rather than acting surprised when groups are inadvertently harmed or only dealing with unintended consequences after they occur and harm others, an ethical data scientist will consider whether they are doing any harm at each step along the way. 56.0.1 Data Science Team Data science projects can be done by an individual; however, more often, they are carried out by a team of individuals who are all interested in using data to answer an interesting question. Whether it’s one person setting out to answer the question or a team working to answer this question, it’s important at this outset of a project to really think about whether all the necessary individuals are on the team. For example, if a group of data scientists were setting out to reduce crime in a neighborhood, it would be in their best interest to either be very familiar with that neighborhood (say, live there themselves) or to talk to individuals who currently live in that neighborhood to be as informed as possible before they set out to analyze their data. By working with individuals who have more knowledge about the neighborhood than someone who has never been there, the team will be less likely to make incorrect assumptions or leave out critical pieces of information when analyzing the neighborhood’s data. 56.0.2 The Data After ensuring that the team you’ve assembled to answer the question is the right team to do so, there are many considerations to be made when collecting data. 56.0.2.1 Sampling Bias When data are collected, it’s difficult to ever get information about an entire population. Thus, when data are conducted, researchers will typically get data from a subset of individuals within the population (a process called sampling) and then infer something about the entire population using what they learned from the subset of individuals. They will try to ensure that their subset is a random subset of the population. However, whenever sampling of a population is done, there’s a chance for sampling bias. Sampling bias occurs whenever the sample of the population collected does not accurately reflect the population as a whole. For example, if the population you’re interested in studying is half female and half male, but the subset of people you’ve sampled is made up of 70% females and 30% males, then your sample is biased. Having a plan to avoid sampling bias is an important first step in the process of data collection. Checking the data after the data have been collected to ensure that the sample is not biased is an equally important step. When data are collected by survey for example, they may be sent out to an equal number of males and females; however, maybe more males respond than females. Even though your plan was solid, your responses are biased. This has to be accounted for during the analysis, as your responses do not accurately represent the population as a whole. And to be clear, gender is not the only consideration to make when sampling. Samples can be biased by many factors including (but not limited to) race and ethnicity, age, income, and education. Sampling bias should always be avoided both when planning to collect data and after the data are collected. 56.0.2.2 Informed Consent In addition to collecting data in an unbiased manner, data must be collected ethically. This means that individuals must consent to participating in data collection. Informed consent requires that the individual agreeing to share their information knows what data are being collected, has been informed of any possible consequences, and has been provided full knowledge of any risks or benefits of participation. If data are collected on individuals and later on a data scientist wants to use those data for a different purpose, they can only do so if the initial consent allowed for the data to be used in this manner. Alternatively, if the data are de-identified, they may be able to be used for future analysis; however, this must be done with care. 56.0.2.3 Privacy While discussed in a previous lesson, for completion’s sake, we’ll discuss again here. When collecting personally-identifiable information, these data must be protected. They should not be shared without the participants’ consent and they should be stored in a secure manner. 56.0.2.4 Withdrawal of consent If an individual consents to their data being collected and later changes their mind, they have every right to do so. It is your responsibility as the person collecting the data to have an effective plan for removing any data already collected from that individual. 56.0.3 The Analysis After avoiding sampling bias, collecting data ethically, avoiding privacy issues in data storage, there are still a number of ethical considerations to take into account during ones analysis. While we don’t discuss the details in these courses, machine learning is currently a popular way to analyze data. In general, it uses existing data to predict how individuals will behave in the future. This means that the any biases in the data used to build the model (the existing data) will likely be perpetuated in the predictions. This means that, for example, in predictive policing, where data scientists are trying to predict where crimes are more likely to happen, if the data used to build the model (often referred to as an algorithm) come from crimes that have occurred in primarily black neighborhoods, they are going to predict that crime happens more in primarily black neighborhoods. Then, if police officers are placed in these neighborhoods, they are going to find more crime, not because crime has increased, but just because there are more of them in the neighborhood now. Essentially, any biases in the data used initially are going to be perpetuated in the models they generate. This means that it is critically important that data scientists fully know and understand the data their working with, its biases, and its limitations. Further, even when something like race is predictive in the model, it’s important for a data scientist to consider whether or not that variable should be included. Are you absolutely positive that race is the important variable and it’s not just that you have a biased sample? Instead, if you’re trying to predict crimes, it’s likely best to use data about crimes that have occurred and where they have occurred in the model rather than race, since race is not a measure of what you’re interested in modeling. Considering the implications of ones work when carrying out an analysis is incredibly important, and making decisions that do not unnecessarily harm any group of people is critical It was previously common for analysts to say that “data do not lie” and “algorithms are impartial,” but recent history has shown that that is simply not the case. Data are collected by humans, and humans are not without their biases. The best way to avoid bias in your data is to be aware of this and constantly check to make sure you’re not disadvantaging groups of people with your analyses. Before considering any data analysis and publishing your results, make sure: You have gone through your data and have made sure there is not any major flaw in your data collection. Data can be biased. You can’t use the result of a study that is mostly based on data from men to say anything about women. You have checked for common mistakes in your analysis and know that your methodology is valid and defensible. Messing up the data for a single variable can drastically change the result of your analysis. The results of your work can not be used to harass people, especially minorities, in any way. Your analysis is independent of your opinion about the specific problem you’re trying to solve using data. When carrying out an analysis, you should be looking for the answer to a question, but be careful not to want a specific answer. By wanting the analysis to go a certain way, you can subconsciously analyze the data to get that answer. It’s best just to collect the data ethically and analyze it carefully. Then, the answer is whatever the answer from the analysis says it is. You can do awesome things with your data science skills: cure diseases, analyze health data, prevent climate change, improve your city, or fact check politicians. Don’t let your biases or mistakes get in the way. 56.0.4 After the Algorithm Finally, after someone answers an awesome data science question with their really great analysis and tell the world, they often think their job is done. However, if you’ve designed an algorithm that is going to predict something going forward or that is going to continue to be used, it is your job to maintain that algorithm. That means that it’s your job to check for biases after the fact. Is your analysis disadvantaging groups of people? If it is, should it be? Does something need to be changed. There has to be a way for you to update your algorithm going forward. If something is continuing to be used by others, your job isn’t done once you’ve built the algorithm. It’s your job to check for biases after the fact and to update your algorithm should there be a need. 56.0.4.1 Ethical Questions to Answer To summarize this lesson up to this point, be sure to answer all of these questions for every data science project you carry out: Does the team on this project include all the necessary individuals to avoid bias in our analysis? Does our data collection plan address ways to avoid sampling bias? Are the data we’ve collected / the data we’re using to answer the question of interest biased? In what ways? Has informed consent been obtained from all participants? Do we have a mechanism do remove an individual’s data from our dataset if they so choose? Are the variables we’ve chosen to use for our analysis appropriate? Do they discriminate against anyone? Is our analysis transparent? Do we understand how and why we’re getting the answer we’re getting? Have we considered possible negative or unintended consequences of our analysis and its results? Do we have a way to update our analysis/algorithm going forward should biases in the results be found? 56.0.5 Ethics in Data Science Now that we’ve discussed the ethical considerations to be made before and throughout every data science project, we’ll discuss a few data science projects that were recently covered the popular media due to the questionable ethics of the project. We present these examples not only to highlight the ethics of the particular project, but also to state the importance of considering the implications of your work. It is not enough to argue that you just “did the analysis” but “didn’t think of the implications” of the work. As a data scientist it is your responsibility to both do the analysis and consider the implications of your work. 56.0.5.1 Data Science in Sentencing In April of 2017, Wired reported in an opinion piece that courts were using artificial intelligence to sentence criminals and made the claim that such practices must be put to an end. The piece explained that courts and corrections departments across the United States collect data on defendants that are then used in an algorithm to determine the “risk” that defendant poses. This aim of this algorithm is to determine how likely it is that the individual will commit another crime. These likelihoods of reoffending from the algorithm are then used to make decisions about how to set bail, what the sentence should be, and the details of that individual’s parole. These tools are often built by private companies. This means that exactly how they work and what data are used to assess risk are not disclosed. The article in Wired highlights the use of Compas, one of these risk-assessment tools developed by a private company and used by the Department of Corrections in Wisconsin, in a judge’s decision to give a man a long sentence, in part because of his “high risk” score from the algorithm. In a courtroom, however, because the specifics of how this algorithm works are not disclosed, a judge and jury would not be able to determine whether or not the likelihood of reoffending was calculated accurately by the algorithm. Initially, arguments were made that removing human biases and judgment from bail, sentencing, and parole decisions would be for the benefit of society. This initial goal was a noble goal that would improve society. However, over time, biases in the data used to generate these algorithms that perpetuated into biases in the algorithms’ outcomes, the lack of transparency in how they work, and failure to check for inequities and biases in the algorithms after they were put in place have led to unfair decisions being made. While individuals may have been looking to improve society with their algorithm at the outset of this project (or at least that argument can be made), lack of considerations of the implications of their work and lack of transparency in the process of generating and using the algorithm have led to questionable ethics in the use of algorithms to make sentencing decisions. 56.0.6 Artificial Intelligence in the Military In March of 2018, Gizmodo reported that Google was helping the US Department of Defense use artificial intelligence to analyze drone footage, a project that started in April of 2017. The project between Google and the Defense department is called Project Maven, and the goal of this project was initially to take drone footage and accurately identify objects (such as vehicles) and to track individuals in the footage collected. A number of Google employees were upset that Google would provide resources to the military that would be used for surveillance in drone operations. Due to the fact that in other non-military situations the use of machine learning has led to biased outcomes, other employees felt there needed to be further discussion about the ethics in developing and using machine learning technology before it was deployed by the military. In response to these concerns, a Google spokesperson stated that Google is working “to develop policies and safeguards”, that the technology is being used for “non-offensive uses only.” In this and many large data science projects where machine learning and artificial intelligence are being used in situations where lives could be negatively impacted, the project would benefit from taking ethical considerations into account and discussing these in a transparent way before deploying the technology. Developing policies and safeguards after the fact is not enough. 56.0.6.1 Facial Recognition in Law Enforcement In May of 2018, the ACLU reported that Amazon had teamed up with law enforcement agencies to use Amazon’s face recognition technology, Rekognition. The ACLU called this new technology, which can quickly scan images to “identify, track, and analyze people in real time” both “powerful” and “dangerous.” This story was picked up by many news sources, including a piece in the New York Times Proponents of using facial recognition technology in law enforcement cite that such technology can help locate and identify criminals more quickly than we would have been able to in the past and that it will help “keep residents and visitors…safe”. Proponents also argue that those who use the technology do so within the limits of the law. Opponents, like the ACLU, however, cite the civil liberties and civil rights concerns that constant surveillance with using facial recognition technology pose. The ACLU argues that there is substantial “capacity for abuse” and due to this, that citizens should not be watched by the government any time they walk outside, that facial recognition systems threaten freedom, and that the deployment of these technologies post a greater threat to communities that are already unfairly targeted by the political climate. Concerns with the technology cite that anyone can be identified, not just criminals, a problem for civil liberties. Opponents further question the accuracy of the technology. Inaccuracies, which would misidentify individuals and suggest they were guilty of a crime when they were in fact not is clearly a problem. Further, there are concerns that accuracy varies based on gender and race, which if true, poses a clear bias in the use of this technology for the identification of criminals as certain groups of individuals would be misidentified more frequently than others. 56.0.7 Additional Resources Ethical Checklist for Data Science, by Alan Fritzler Weapons of Math Destruction, by Cathy O’Neil Automating Inequality, by Virginia Eubanks Courts are Using AI to Sentence Criminals. That must Stop Now, by Jason Tashea in Wired Machine Bias, by Julia Angwin, Jeff Larson, Surya Mattu and Lauren Kirchner at ProPublica Amazon Teams Up With Law Enforcement to Deploy Dangerous New Face Recognition Technology, by Matt Cagle and Nicole A. Ozer with the ACLU Amazon Pushes Facial Recognition to Police. Critics See Surveillance Risk., by Nick Wingfield at the New York Times Google Is Helping the Pentagon Build AI for Drones, by Kate Conger and Dell Cameron at Gizmodo 56.0.8 Slides and Video Ethical Data Science Slides "],["data-in-r.html", "Chapter 57 Data in R", " Chapter 57 Data in R You’ve already been working with data throughout this set of courses. You’ve generated your own data in Google Sheets (i.e. collected data from Leanpub). You’ve worked with datasets that are included in RStudio automatically (i.e. iris and mtcars). And, you’ve generated R Markdown documents and pushed code to GitHub, creating even more data! But, we haven’t formalized exactly what all the different types of data are in R, how to access them, and what the various file types in R are. We’ll discuss all of that in this lesson. Then, throughout the following lessons in this course, you’ll learn how to work with data in R. Specifically, you’ll learn how to get data into a usable format for data analysis. This process is called data wrangling, and we’ll use datasets available to you from R and RStudio to learn the necessary tools for you to excel at data wrangling. Finally, to give you an idea of where we’re going, once you have a set of skills down to functionally work with data, in the next course in this series you’ll learn about lots of different places where you can get data and how to get them into R, so you can continue to practice the data wrangling skills you’ll learn here! 57.0.1 File Types in R In previous lessons we talked about R Markdown documents (which have the file extension .rmd or .Rmd) and we’ve saved R script files (which have the file extension .r or .R), but we haven’t formally discussed what all the various types of files are used for in detail or about what other possible file types exist in R. So, we’ll do that now! Before discussing further details about each type of file, we’ll point out that the file extension (what comes after the period in the file name) specifies what type of file you’re working with. While the extension matters (.R is different than .Rmd), capitalization does not matter for file extensions (.r is the same as .R). Just something to keep in mind as you start working with these types of files. That said, while the computer will know what type of file it is regardless of capitalization, when you’re writing code, capitalization does matter. If you try to read in a file named “script.r” but accidentally specify “script.R”, your code won’t be able to find the file. We mention this now so as you start saving files you save files using consistent capitalization). The capitalization in each of the sections below is the capitalization we recommend. We’ll summarize this here before walking through each one. For following file extensions, we recommend the following capitalization: Scripting files: .R R Markdown: .Rmd Saved R Objects: .rda Serialized R Objects: .rds R Project files .Rproj 57.0.1.1 R Script file (.R) The most basic file type in R uses the .R file extension. R Script files contain code written in the R programming language. As you want to write R code and save this code, you’ll save it as a .R file. To get started writing an R Script file, you’ll go to rstudio.cloud and click on File &gt; New File &gt; RScript along the menu at the top. This will open ups a blank R Script file. R Script In this R Script is where you would write R code. As you write code, you’ll want to save this file. Here, in this example, you can see the R code we’ve written and that this file has been saved as “script_test.R.” .R file 57.0.1.2 R Markdown (.Rmd) We’ve also introduced R Markdown files previously. As a refresher, R Markdown documents use Markdown syntax and include code chunks with R code that will be run when the document is “Knit” into its final format (which can be PDF, HTML, or Word documents among others. To get started writing an R Markdown document, you’ll go to rstudio.cloud and click on File &gt; New File &gt; R Markdown… After filling out the information in the pop-up window and clicking OK, an R Markdown document will open up. R Markdown In this document you’ll use Markdown syntax outside of code chunks and R code in the code chunks to generate your reports. .Rmd file R Markdown documents are great at producing reproducible reports that walk people through your data science process from start to finish. 57.0.1.3 Saved R objects (.rda, .RData) As you write R code (say, in an .R file), you will inevitably create objects. For example, in the code you see here, mpg is an object created by this code that contains the data from the mpg column of the mtcars data frame and cyl an object from the cyl column of the mtcars data frame. mpg &lt;- mtcars$mpg cyl &lt;- mtcars$cyl mpg and cyl are objects If I were to run these two lines of code, they would show up in the Console, and the objects mpg and cyl would now be visible in the Environment tab. mpg and cyl visible in Environment tab Often you’ll create objects that you won’t need to save. However, from time to time you’ll make changes to a data frame or generate an object that you’ll want to use later. To save an object and use it later, you can save it as an R data file. These files contain objects that can be saved directly from and read directly into R using the commands save() and load(). And, in particular, R data files can save multiple objects. To save the two objects mpg and cyl into an R Data file, you would do the following: save(mpg, cyl, file=&quot;mtcars_objects.rda&quot;) save The syntax for save requires you to specify the objects you want to save, separated by commas. Then, the filename you want this R data file to have is specified using the file= argument. When this line of code is run, the specified file (here, mtcars_objects.rda) appears in the Files tab within RStudio, demonstrating that this file has been created. If in the future, if you were to want to load the objects mpg and cyl back into your R session, you would do this using load(). To do that here, we’ll first have to remove these objects from RStudio. To accomplish this, click on the broom in the Environment tab of RStudio Cloud. broom icon removes all objects from R session After clicking “Yes” to confirm that you want to remove all objects, you’ll see that mpg and cyl are no longer in your RStudio environment. They have been removed from RStudio. Empty Environment To load them back in from mtcars_objects.rda, you would do the following: load(&quot;mtcars_objects.rda&quot;) Note that you need to put quotes around the filename to specify that this is a file and not an object in R. A second note is a reminder about file paths. Here, the file we want is in the directory we’re working in. If that were not the case, you would have to specify the path to the file within the quotation marks (i.e. “path/to/file/mtcars_objects.rda”) When you run this line of code, you’ll see that cyl and mpg are once again available objects in your RStudio Environment tab! load loads objects in .rda file back in To recap, when you want to save multiple objects to be read in at a later time, you’ll save them as an R data file (.rda). R Data files are generated using the save() function and read into R using the load() command. 57.0.1.4 Serialized R objects (.rds) Serialized R object files are similar to R data files with the exception that they can only save a single R object at a time. When you only want to save a single object (say, mpg), these files are the best option. To save a serialized R object file, you’ll use the function saveRDS(). To read a serialized object file into R, you’ll use the function readRDS(). For example, to save the mpg object you would use the following: saveRDS(mpg, file=&quot;mpg.rds&quot;) saveRDS This will generate the file mpg.rds. To read this file back in, we’ll first remove all objects from R Studio using the broom icon in the Environment tab and will then use the readRDS() function. broom icon to clean up Environment Unlike with .rda objects, when you read a .rds object back in, to make the object available, you have to assign the object a variable name. Otherwise, the contents of the object will just print to your Console. This is helpful because it doesn’t matter what the name of the object was when you saved it. As long as you know the filename, you can pick a new object name. Here, we assign the serialized R object file to mpg, but we could have chosen a different object name. mpg &lt;- readRDS(&quot;mpg.rds&quot;) readRDS 57.0.1.5 R Project files (.Rproj) R Projects are incredibly helpful files. In their simplest form, by working within an R Project and saving an .Rproj file, you are always able to pick back up on a project from where you left off. Fortunately, RStudio Cloud uses R projects automatically. You may have noticed that there is a “project.Rproj” file in your Files tab. This is an R Project file. RStudio Cloud will start a “project.Rproj” file within each project you start. This file will then track your project as you write code and create objects. R Project files Then, when you return to this project, your .Rproj file will: start a new R session load the .RData file in your project’s main directory file if there is one (this is the same directory where your .Rproj file is) load the .Rhistory file into the RStudio History tab set the current working directory to the project directory. make previously edited documents available in the Files tab restore RStudio settings to what they were the last time the project was closed. This allows you to pick back up from where you left off! Then, when you leave to work on a different project, your .RData will be saved and your .Rproj file updated so that you can pick up from where you left off the next time you sign in! 57.0.2 Datasets in R Now that we’ve covered the main types of R files you’ll be working with and generating in RStudio, we’ll move on to formally discussing the datasets available within R and RStudio/RStudio Cloud. You’ve previously seen and worked with datasets that are available to you in R. Specifically, you’ve seen examples that used the iris and mtcars datasets in previous lessons. However, we haven’t covered how to find all available datasets that are included in R automatically, so we’ll do that now. To access a list of all the available datasets within R, you’ll type data() into your Console. This will open up a file called “R data sets”. You can scroll through this list to get a sense of what data sets are available. The name of the data set is in the first column while a brief description of the dataset is in the second column. R data sets If one of these datasets looks interesting to you, say the “Orange” dataset, you can get more detailed information about the dataset by using help function in R (?). ?Orange This opens up an explanation in the Help tab of RStudio Cloud. Here, you can see a description of the dataset and can scroll to see what variables are included in this dataset. Finally, at the bottom of the Help window, you’ll see examples of how to work with the dataset! Orange dataset Help page 57.0.3 Datasets in Packages In addition to the datasets available by default to you in R, many packages (but not all!) also contain datasets that you can use. To see a list of what datasets are available from a specific package, you can again use the data() function, but you’ll want to specify the name of the package using the package= argument For example, to see a list of the datasets available from the ggplot2 package, you would want to use the following: data(package=&quot;ggplot2&quot;) datasets available from ggplot2 package As before, this function will open up a list of the available datasets within that package. In order to use any of these datasets, however, you’ll have to load the package using the library() function. After loading the package, you can then access the Help pages for a dataset as previously using ?. library(ggplot2) ?msleep msleep from ggplot2 package dataset Help page 57.0.4 Other types of data in R In addition to datasets included automatically in R/RStudio and those that are in R packages, there are lots of other types of data that can be read into R. This could be data from a Google Sheet or an Excel spreadsheet or data from a website. In the lessons in the next course we’ll discuss a number of other types of files and master how to get them into R, so just know that’s coming up! For the remaining lessons in this course, however, we’ll stick to using datasets included in R and those included in specific R packages. 57.0.5 Summary In this lesson we’ve covered the main file formats that are used within R. Make sure you’re comfortable with what the various file extensions mean and in what scenarios you would use the different file extensions. Additionally, we discussed how to access datasets that are available by default in RStudio as well as those that are available through specific R packages. You already have so much data at you fingertips, and we’re just getting started! 57.0.6 Additional Resources R Studio Projects R Data files 57.0.7 Slides and Video Data in R Slides "],["tidy-data.html", "Chapter 58 Tidy Data", " Chapter 58 Tidy Data The idea of tidy data was formalized in 2014 in a paper written by a leader in the data science field, Hadley Wickham. The principles of tidy data, which are discussed below, provide a standard way of formatting a data set. A tidy dataset follows a number of rules relating to how rows, columns, and spreadsheets are matched up with observations, variables, and types. 58.0.1 Why Tidy Data? Tidy data-sets, by design, are easier to manipulate, model, and visualize. By starting with data that are already in a tidy format or by spending the time at the beginning of a project to get data into a tidy format, the remaining steps of your data science project will be easier. 58.0.2 Data Terminology We’ve previously discussed what the rows and columns in a spreadsheet are. Here, we’ll discuss what is meant by observations, variables, and types, all of which are used to explain the principles of tidy data. 58.0.2.1 Variables Variables in a spreadsheet are the different categories of data that will be collected. They are the different pieces of information that can be collected or measured on each person. Here, we see there are 7 different variables: ID, LastName, FirstName, Sex, City, State, and Occupation. The names for variables are put in the first row of the spreadsheet. Variables 58.0.2.2 Observations The measurements taken from a person for each variable are called observations. Observations for each individual are stored in a single row, with each observation being put in the appropriate column for each variable. Observations 58.0.2.3 Types Often, data are collected for the same individuals from multiple sources. For example, when you go to the doctor’s office, you fill out a survey about yourself. That would count as one type of data. The measurements a doctor collects at your visit, however, would be a different type of data. Types 58.0.3 Principles of Tidy Data Each variable you measure should be in one column. Principle #1 of Tidy Data Each different observation of that variable should be in a different row. Principle #2 of Tidy Data There should be one spreadsheet for each “type” of data. Principle #3 of Tidy Data If you have multiple spreadsheets, they should include a column in each spreadsheet (with the same column label!) that allows them to be joined or merged. Principle #4 of Tidy Data 58.0.4 Rules for Tidy Spreadsheets In addition to these four principles, there are a number of rules to follow when entering data into a spreadsheet, or when re-organizing untidy data that you have already been given for a project into a tidy format. They are rules that will help make data analysis and visualization easier down the road. They were formalized in a paper called “Data organization in spreadsheets”, written by two prominent data scientists, Karl Broman and Kara Woo. In this paper, in addition to ensuring that the data are tidy, they suggest following these guidelines when entering data into spreadsheets: Be consistent Choose good names for things Write dates as YYYY-MM-DD No empty cells Put just one thing in a cell Don’t use font color or highlighting as data Save the data as plain text files We’ll go through each of these to make sure we’re all clear on what a great tidy spreadsheet looks like. 58.0.4.1 Be consistent Being consistent in data entry and throughout an analysis is key. It minimizes confusion and makes analysis simpler. For example, here we see sex is coded as “female” or “male.” Those are the only two ways in which sex was entered into the data. This is an example of consistent data entry. You want to avoid sometimes coding a female’s sex as “female” and then entering it as “F” in other cases. Simply, you want to pick a way to code sex and stick to it. With regard to entering a person’s sex, we were talking about how to code observations for a specific variable; however, consistency also matters when you’re choosing how to name a variable. If you use the variable name “ID” in one spreadsheet, use the same variable name (“ID”) in the next spreadsheet. Do not change it to “id” (capitalization matters!) or “identifier” or anything else in the next spreadsheet. Be consistent! Consistency matters across every step of the analysis. Name your files in a consistent format. Always code dates in a consistent format (discussed further below). Avoid extra spaces in cells. If you’re careful about and consistent in data entry, it will be incredibly helpful when you get to analysis. Be Consistent! 58.0.4.2 Choose good names for things Choosing good variable names is important. Generally, avoid spaces in variable names and file names. You’ll see why this is important as we learn more about programming, but for now, know that “Doctor Visit 1” is not a good file name. “doctor_visit_v1” is much better. Stick to using underscores instead of spaces or any other symbol when possible. The same thing goes for variable names. “FirstName” is a good variable name while “First Name” with a space in the middle of it is not. Additionally, make sure that file and variable names are as short as possible while still being meaningful. “F1” is short, but it doesn’t really tell you anything about what is in that file. “doctor_visit_v1” is a more meaningful file name. We know now that this spreadsheet contains information about a doctor’s visit. ‘v1’ specifies version 1 allowing for updates to this file later which would create a new file “doctor_visit_v2.” Choose good names 58.0.4.3 Write dates as YYYY-MM-DD When entering dates, there is a global ‘ISO 8601’ standard. Dates should be encoded YYYY-MM-DD. For example if you want to specify that a measurement was taken on February 27th, 2018, you would type 2018-02-27. YYYY refers to the year, 2018. MM refers to the month of February, 02. And DD refers to the day of the month, 27. This standard is used for dates for two main reason. First, it avoids confusion when sharing data across different countries, where date conventions can differ. By all using ISO 8601 standard conventions, there is less room for error in interpretation of dates. Secondly, spreadsheet software often mishandles dates and assumes that non-date information are actually dates and vice versa. By encoding dates as YYYY-MM-DD, this confusion is minimized. YYYY-MM-DD 58.0.4.4 No empty cells Simply, fill in every cell. If the data is unknown for that cell, put ‘NA.’ Without information in each cell, the analyst is often left guessing. In the spreadsheets below, on the left, is the analyst to assume that the empty cells should use the date from the cell above? Or are we to assume that the date for that measurement is unknown? Fill in the date if it is known or type ‘NA’ if it is not. That will clear up the need for any guessing on behalf of the analyst. On the spreadsheet to the right, the first two rows have a lot of empty cells. This is problematic for the analysis. This spreadsheet does not follow the rules for tidy data. There is not a single variable per column with a single entry per row. These data would have to be reformatted before they could be used in analysis. No empty cells 58.0.4.5 Put just one thing in a cell Sometimes people are tempted to include a number and a unit in a single cell. For weight, someone may want to put ‘165 lbs’ in that cell. Avoid this temptation! Keep numbers and units separate. In this case, put one piece of information in the cell (the person’s weight) and either put the unit in a separate column, or better yet, make the variable name weight_lbs. That clears everything up for the analyst and avoids a number and a unit from both being put in a single cell. As analysts, we prefer weight information to be in number form if we want to make calculations or figures. This is facilitated by the first column called “Weight_lbs” because it will be read into R as a numeric object. The second column called “Weight”, however, will be read into R as a character object because of the “lbs”, which makes our desired tasks more difficult. One thing per cell 58.0.4.6 Don’t use font color or highlighting as data Avoid the temptation to highlight particular cells with a color to specify something about the data. Instead, add another column to convey that information. In the example below, 1.1 looks like an incorrect value for an individual’s glucose measure. Instead of highlighting the value in red, create a new variable. Here, on the right, this column has been named ‘outlier.’ Including ‘TRUE’ for this individual suggests that this individual may be an outlier to the data analyst. Doing it in this way ensures that this information will not be lost. Using font color or highlighting however can easily be lost in data processing, as you will see in future lessons. No highlighting or font color 58.0.4.7 Save the data as plain text files The following lessons will go into detail about which file formats are ideal for saving data, such as text files (.txt) and comma-delimited files (.csv). These file formats can easily be opened and will never require special software, ensuring that they will be usable no matter what computer or analyst is looking at the data. 58.0.4.8 Tidy Data Summary The data entry guidelines discussed here and a few additional rules have been summarized below and are available online for reference. Naming Guidelines Most importantly, however, remember that tidy data are rectangular data. The data should be a rectangle with each variable in a separate column and each entry in a different row. All cells should contain some text, so that the spreadsheet looks like a rectangle with something in every cell. Tidy Data = rectangular data 58.0.5 Additional resources Hadley Wickham’s paper on Tidy Data Data Organization in Spreadsheets How to Share Data for Collaboration Data Carpentry’s Data Organization in Spreadsheets Karl Broman’s Data Organization blog post 58.0.6 Slides and Video Tidy Data Slides "],["untidy-data.html", "Chapter 59 Untidy Data", " Chapter 59 Untidy Data We’ve just spent a while discussing the principles of tidy data as well as a number of guidelines on how to correctly enter data into spreadsheets. At this point, you may think “I got it. Make my data rectangular! I’ll do it.” But, the reality is that most data are untidy. If you are not the one entering the data but are instead handed the data from someone else to do a project, more often than not, those data will be untidy. Untidy data are often referred to simply as messy data. The following common problems seen in messy data sets again come from Hadley Wickham’s paper on tidy data. After briefly reviewing what each common problem is, we will then take a look at a few messy data sets. We’ll finally touch on the concepts of tidying untidy data, but we won’t actually do any practice yet. That’s coming soon! 59.0.1 Common problems with messy data sets Column headers are values but should be variable names. A single column has multiple variables. Variables have been entered in both rows and columns. Multiple “types” of data are in the same spreadsheet. A single observation is stored across multiple spreadsheets. 59.0.2 Examples of untidy data To see some of these messy datasets, let’s explore three different sources of messy data. 59.0.2.1 Examples from Data Organization in Spreadsheets In each of these examples, we see the principles of tidy data being broken. Each variable is not a unique column. There are empty cells all over the place. The data are not rectangular. Data formatted in these messy ways are likely to cause problems during analysis. Examples from Data Organization in Spreadsheets For a specific example, Miles McBain, a data scientist from Brisbane, Australia set out to analyze Australian survey data on Same Sex marriage. Before he could do the analysis, however, he had a lot of tidying to do. He annotated all the ways in which the data were untidy, including the use of commas in numerical data entry, blank cells, junk at the top of the spreadsheet, and merged cells. All of these would have stopped him from being able to analyze the data had he not taken the time to first tidy the data. Luckily, he wrote a Medium piece including all the steps he took to tidy the data. Miles McBain’s’ tidying of Australian Same Sex Marriage Postal Survey Data Inspired by Miles’ work, Sharla Gelfand decided to tackle a messy data set from Toronto’s open data. She similarly outlined all the ways in which the data were messy including, names and address across multiple cells in the spreadsheet, merged column headings, and lots of blank cells. She has also included the details of how she cleaned these data in a blog post. While the details of the code may not make sense yet, it will shortly as you get more comfortable with the programming language, R. Sharla Gelfand’s tidying of Toronto’s open data 59.0.3 Tidying untidy data There are a number of actions you can take on a dataset to tidy the data depending on the problem. These include: filtering, transforming, modifying variables, aggregating the data, and sorting the order of the observations. There are functions to accomplish each of these actions in R. While we’ll get to the details of the code in a few lessons, it’s important at this point to be able to identify untidy data and to determine what needs to be done in order to get those data into a tidy format. Specifically, we will focus in here on a single messy data set. This is dataset D from the ‘Data Organization in Spreadsheets’ example of messy data provided above. We note the blank cells and that the data are not rectangular. Messy data set To address this, these data can be split into two different spreadsheets, one for each type of data. Spreadsheet A included information about each sample. Spreadsheet B includes measurements for each sample over time. Note that both spreadsheets have an ‘id’ column so that the data can be merged if necessary during analysis. The ‘note’ column does have some missing data. Filling in these blank cells with ‘NA’ would fully tidy these data. We note that sometimes a single spreadsheet becomes two spreadsheets during the tidying process. This is OK as long as there is a consistent variable name that links the two spreadsheets! Tidy version of the messy data set 59.0.4 Slides and Video Tidy Data Slides "],["reshaping-data.html", "Chapter 60 Reshaping Data", " Chapter 60 Reshaping Data 60.0.1 Data Formats Tidy data generally exist in two forms: wide data and long data. Both types of data are used and needed in data analysis, and fortunately, there are tools that can take you from wide-to-long and from long-to-wide. This makes it easy to work with any tidy data set. We’ll discuss the basics of what wide and long data are and how to go back and forth between the two in R. Getting data into the right format will be crucial later when summarizing data and visualizing it. 60.0.1.1 Wide Data Wide data has a column for each variable and a row for each observation. Data are often entered and stored in this manner. This is because wide data are often easy to understand at a glance. For example, this is a wide data set: Wide dataset This is a dataset we’ve looked at in a previous lesson. As discussed previously, it’s a rectangular and tidy dataset. Now, we can also state that it is a wide dataset. Here you can clearly see what measurements were taken for each individual and can get a sense of how many individuals are contained in the dataset. Specifically, each individual is in a different row with each variable in a different column. At a glance we can quickly see that we have information about four different people and that each person was measured in four different ways. 60.0.1.2 Long Data Long data, on the other hand, has one column indicating the type of variable contained in that row and then a separate row for the value for that variable. Each row contains a single observation for a single variable. Below is an example of a long data set: Long dataset This long dataset includes the exact same information as the previous wide dataset; it is just stored differently. It’s harder to see visually how many different measurements were taken and on how many different people, but the same information is there. While long data formats are less readable than wide data at a glance, they are a lot easier to work with during analysis. Most of the tools we’ll be working with use long data. Thus, to go from how data are often stored (wide) to working with the data during analysis (long), we’ll need to understand what tools are needed to do this and how to work with them. 60.0.2 R Packages Converting your data from wide-to-long or from long-to-wide data formats is referred to as reshaping your data. There are two primary packages in R that will help you reshape your data: tidyr and reshape2. We’ll walk through the important functions of these two packages and work through a few examples using the functions in each. However, as with most helpful packages in R, there is more functionality than what is discussed here, so feel free to explore the additional resources at the bottom to learn even more. Reshaping data For these examples, we’ll work with the airquality dataset available in R. The data in this dataset includes “Daily air quality measurements in New York, May to September 1973.” This is a wide dataset because each day is in a separate row and there are multiple columns with each including information about a different variable (ozone, solar.r, wind, temp, month, and day). We can see the first few lines of this dataset using the following code: head(airquality) Air quality dataset Again, wide data are easy to decipher at a glance. We can see that we have six different variables for each day, with each one of these variables (measurements) being stored in a separate column. 60.0.2.1 tidyr Within tidyr, there are two functions to help you reshape your data. gather(): go from wide data to long data spread(): go from long data to wide data To get started, you’ll need to be sure that the tidyr package is installed and loaded into your RStudio session. install.packages(&quot;tidyr&quot;) library(tidyr) 60.0.2.1.1 gather() As data are often stored in wide formats, you’ll likely use gather() a lot more frequently than you’ll use spread(). This will allow you to get the data into a long format that will be easy to use for analysis. In tidyr, gather() will take the airquality dataset from wide to long, putting each column name into the first column and each corresponding value into the second column. Here, the first column will be called key. The second column will still be value. ## use gather() to reshape from wide to long gathered &lt;- gather(airquality) ## take a look at first few rows of long data head(gathered) gather dataset However, it’s very easy to change the names of these columns within gather(). To do so you define what the key and value columns names should be within gather(): ## to rename the column names that gather provides, ## change key and value to what you want those column names to be gathered &lt;- gather(airquality, key=&quot;variable&quot;, value=&quot;value&quot;) ## take a look at first few rows of long data head(gathered) gather column names changed However, you’re likely not interested in your day and month variable being separated out into their own variables within the key column. In fact, knowing the day and month associated with a particular data point helps identify that particular data point. To account for this, you can exclude day and month from the variables being included in the key column by specifying all the variables that you do want included in the key column. Here, that means specifying ozone, solar.r, wind, and temp. This will keep day and month in their own columns, allowing each row to be identified by the specific day and month being discussed. ## in gather(), after key and value, you can specify which variables ## you want included in the long format ## it will leave the other variables as is gathered &lt;- gather(airquality, key=&quot;variable&quot;, value=&quot;value&quot;, ozone, solar.r, wind, temp) ## take a look at first few rows of long data head(gathered) gather specifying which variables to include in long format Now, when you look at the top of this object, you’ll see that month and day remain in the data frame and that variable combines information from the other columns in airquality (ozone, solar.r, wind, temp). This is still a long format dataset; however, it has used month and day as IDs when reshaping the data frame. 60.0.2.1.2 spread() To return your long data back to its original form, you can use spread(). Here you specify two columns: the column that contains the names of what your wide data columns should be (key=variable) and the column that contains the values that should go in these columns (value=value). The data frame resulting from spread() will have the original information back in the wide format (again, the columns will be in a different order). But, we’ll discuss how to rearrange data in the next lesson! ## use gather() to reshape from wide to long spread_data &lt;- spread(gathered, key=variable, value=value) ## take a look at the spread data head(spread_data) ## compare that back to the original head(airquality) spread data 60.0.2.2 reshape2 As with many things in R, there is more than one way to solve a problem. While tidyr provides a more general solution for reshaping data, reshape2 was specifically designed for reshaping data. The details aren’t particularly important yet, but later on as you carry out your own analyses it will be good to know about both packages. To get started using reshape2, you’ll have to first install the library and load it into your R session: ## install the package install.packages(&#39;reshape2&#39;) ## load the package into R Session library(reshape2) There are two main functions within the reshape2 package: melt(): go from wide data to long data dcast(): go from long data to wide data 60.0.2.2.1 melt() The melt() function will allow you to get the data into a long format that will be easy to use for analysis. When you melt a dataset with the default options, melt() will take every column, put the column name into a variable column, and then put the values of those variables into a value column. For the airquality data set, below we first assign the melted data frame to the object melted. Then we take a look at the top (head()) and bottom(tail()) of this melted data frame (melted). ## puts each column name into the &#39;variable&#39; column ## puts corresponding variable&#39;s value in &#39;value&#39; column melted &lt;- melt(airquality) ## let&#39;s take a look at the top of the melted data frame head(melted) ## and at the bottom of that melted data frame tail(melted) When you run this code you see that each column from the original data frame (ozone, solar.r, wind, temp,month, and day) are now repeated in the variables column, and each days’ value for that variable is now in the value column. This is now a long format dataset! melted data Now, to use month and day as identifiers as we did with tidyr above, the approach is slightly different. With gather(), you specified the column names that you wanted to gather and omitted the column names that you wanted to retain as identifiers. With melt() you will do the opposite. You will specify day and month as identifiers for the dataset and omit the remaining variables. You’ll want to use the following syntax: ## melt the data frame ## specify each row using month and day melted &lt;- melt(airquality, id.vars = c(&quot;month&quot;,&quot;day&quot;)) ## look at the first few rows of the melted data frame head(melted) melted data frame using IDs Despite the slight change in how the code was specified, the result here using melt() is the same as what was achieved above using gather(). 60.0.2.2.2 cast You’ll likely have to go from long-to-short format less frequently; however, it’s good to know there are two approaches to accomplishing this within reshape2 whenever it is necessary. acast(): taking a long frame and returning a matrix/array/vector dcast(): taking a long frame and returning a data frame To return our melted data back into its original wide form, we’ll use dcast(). The syntax here separates what should be used as an identifier for each row in the resulting wide format (month + day below) and which column includes the values that should be the column headers (variable below). These two pieces of information are separated by a tilde (~). ## to get our data back to its original form ## specify which columns should be combined to use as identifiers ## and which column should be used to specify the columns original &lt;- dcast(melted, month + day ~ variable) head(original) head(airquality) dcast to obtain original data As you can see, aside from the column order changing, the information in original is the same as what was in the data frame we started with (airquality). While reshaping data may not be the most exciting topic, having this skill will be indispensable as you start working with data. It’s best to get these skills down early! 60.0.3 Additional Resources tidyr, part of the tidyverse and developed by Hadley Wickham and Lionel Henry reshape2, developed by Hadley Wickham tidyr tutorial by Hadley Wickham reshape2 tutorial by Sean C. Anderson tidyr vs reshape2 by Alberto Giudici 60.0.4 Slides and Video Reshaping Data Slides "],["reshaping-data-1.html", "Chapter 61 Reshaping Data", " Chapter 61 Reshaping Data 61.0.1 Data Formats Tidy data generally exist in two forms: wide data and long data. Both types of data are used and needed in data analysis, and fortunately, there are tools that can take you from wide-to-long and from long-to-wide. This makes it easy to work with any tidy data set. We’ll discuss the basics of what wide and long data are and how to go back and forth between the two in R. Getting data into the right format will be crucial later when summarizing data and visualizing it. 61.0.1.1 Wide Data Wide data has a column for each variable and a row for each observation. Data are often entered and stored in this manner. This is because wide data are often easy to understand at a glance. For example, this is a wide data set: Wide dataset This is a dataset we’ve looked at in a previous lesson. As discussed previously, it’s a rectangular and tidy dataset. Now, we can also state that it is a wide dataset. Here you can clearly see what measurements were taken for each individual and can get a sense of how many individuals are contained in the dataset. Specifically, each individual is in a different row with each variable in a different column. At a glance we can quickly see that we have information about four different people and that each person was measured in four different ways. 61.0.1.2 Long Data Long data, on the other hand, has one column indicating the type of variable contained in that row and then a separate row for the value for that variable. Each row contains a single observation for a single variable. Below is an example of a long data set: Long dataset This long dataset includes the exact same information as the previous wide dataset; it is just stored differently. It’s harder to see visually how many different measurements were taken and on how many different people, but the same information is there. While long data formats are less readable than wide data at a glance, they are a lot easier to work with during analysis. Most of the tools we’ll be working with use long data. Thus, to go from how data are often stored (wide) to working with the data during analysis (long), we’ll need to understand what tools are needed to do this and how to work with them. 61.0.2 R Packages Converting your data from wide-to-long or from long-to-wide data formats is referred to as reshaping your data. There are two primary packages in R that will help you reshape your data: tidyr and reshape2. We’ll walk through the important functions of these two packages and work through a few examples using the functions in each. However, as with most helpful packages in R, there is more functionality than what is discussed here, so feel free to explore the additional resources at the bottom to learn even more. Reshaping data For these examples, we’ll work with the airquality dataset available in R. The data in this dataset includes “Daily air quality measurements in New York, May to September 1973.” This is a wide dataset because each day is in a separate row and there are multiple columns with each including information about a different variable (ozone, solar.r, wind, temp, month, and day). We can see the first few lines of this dataset using the following code: head(airquality) Air quality dataset Again, wide data are easy to decipher at a glance. We can see that we have six different variables for each day, with each one of these variables (measurements) being stored in a separate column. 61.0.2.1 tidyr Within tidyr, there are two functions to help you reshape your data. gather(): go from wide data to long data spread(): go from long data to wide data To get started, you’ll need to be sure that the tidyr package is installed and loaded into your RStudio session. install.packages(&quot;tidyr&quot;) library(tidyr) 61.0.2.1.1 gather() As data are often stored in wide formats, you’ll likely use gather() a lot more frequently than you’ll use spread(). This will allow you to get the data into a long format that will be easy to use for analysis. In tidyr, gather() will take the airquality dataset from wide to long, putting each column name into the first column and each corresponding value into the second column. Here, the first column will be called key. The second column will still be value. ## use gather() to reshape from wide to long gathered &lt;- gather(airquality) ## take a look at first few rows of long data head(gathered) gather dataset However, it’s very easy to change the names of these columns within gather(). To do so you define what the key and value columns names should be within gather(): ## to rename the column names that gather provides, ## change key and value to what you want those column names to be gathered &lt;- gather(airquality, key=&quot;variable&quot;, value=&quot;value&quot;) ## take a look at first few rows of long data head(gathered) gather column names changed However, you’re likely not interested in your day and month variable being separated out into their own variables within the key column. In fact, knowing the day and month associated with a particular data point helps identify that particular data point. To account for this, you can exclude day and month from the variables being included in the key column by specifying all the variables that you do want included in the key column. Here, that means specifying ozone, solar.r, wind, and temp. This will keep day and month in their own columns, allowing each row to be identified by the specific day and month being discussed. ## in gather(), after key and value, you can specify which variables ## you want included in the long format ## it will leave the other variables as is gathered &lt;- gather(airquality, key=&quot;variable&quot;, value=&quot;value&quot;, ozone, solar.r, wind, temp) ## take a look at first few rows of long data head(gathered) gather specifying which variables to include in long format Now, when you look at the top of this object, you’ll see that month and day remain in the data frame and that variable combines information from the other columns in airquality (ozone, solar.r, wind, temp). This is still a long format dataset; however, it has used month and day as IDs when reshaping the data frame. 61.0.2.1.2 spread() To return your long data back to its original form, you can use spread(). Here you specify two columns: the column that contains the names of what your wide data columns should be (key=variable) and the column that contains the values that should go in these columns (value=value). The data frame resulting from spread() will have the original information back in the wide format (again, the columns will be in a different order). But, we’ll discuss how to rearrange data in the next lesson! ## use gather() to reshape from wide to long spread_data &lt;- spread(gathered, key=variable, value=value) ## take a look at the spread data head(spread_data) ## compare that back to the original head(airquality) spread data 61.0.2.2 reshape2 As with many things in R, there is more than one way to solve a problem. While tidyr provides a more general solution for reshaping data, reshape2 was specifically designed for reshaping data. The details aren’t particularly important yet, but later on as you carry out your own analyses it will be good to know about both packages. To get started using reshape2, you’ll have to first install the library and load it into your R session: ## install the package install.packages(&#39;reshape2&#39;) ## load the package into R Session library(reshape2) There are two main functions within the reshape2 package: melt(): go from wide data to long data dcast(): go from long data to wide data 61.0.2.2.1 melt() The melt() function will allow you to get the data into a long format that will be easy to use for analysis. When you melt a dataset with the default options, melt() will take every column, put the column name into a variable column, and then put the values of those variables into a value column. For the airquality data set, below we first assign the melted data frame to the object melted. Then we take a look at the top (head()) and bottom(tail()) of this melted data frame (melted). ## puts each column name into the &#39;variable&#39; column ## puts corresponding variable&#39;s value in &#39;value&#39; column melted &lt;- melt(airquality) ## let&#39;s take a look at the top of the melted data frame head(melted) ## and at the bottom of that melted data frame tail(melted) When you run this code you see that each column from the original data frame (ozone, solar.r, wind, temp,month, and day) are now repeated in the variables column, and each days’ value for that variable is now in the value column. This is now a long format dataset! melted data Now, to use month and day as identifiers as we did with tidyr above, the approach is slightly different. With gather(), you specified the column names that you wanted to gather and omitted the column names that you wanted to retain as identifiers. With melt() you will do the opposite. You will specify day and month as identifiers for the dataset and omit the remaining variables. You’ll want to use the following syntax: ## melt the data frame ## specify each row using month and day melted &lt;- melt(airquality, id.vars = c(&quot;month&quot;,&quot;day&quot;)) ## look at the first few rows of the melted data frame head(melted) melted data frame using IDs Despite the slight change in how the code was specified, the result here using melt() is the same as what was achieved above using gather(). 61.0.2.2.2 cast You’ll likely have to go from long-to-short format less frequently; however, it’s good to know there are two approaches to accomplishing this within reshape2 whenever it is necessary. acast(): taking a long frame and returning a matrix/array/vector dcast(): taking a long frame and returning a data frame To return our melted data back into its original wide form, we’ll use dcast(). The syntax here separates what should be used as an identifier for each row in the resulting wide format (month + day below) and which column includes the values that should be the column headers (variable below). These two pieces of information are separated by a tilde (~). ## to get our data back to its original form ## specify which columns should be combined to use as identifiers ## and which column should be used to specify the columns original &lt;- dcast(melted, month + day ~ variable) head(original) head(airquality) dcast to obtain original data As you can see, aside from the column order changing, the information in original is the same as what was in the data frame we started with (airquality). While reshaping data may not be the most exciting topic, having this skill will be indispensable as you start working with data. It’s best to get these skills down early! 61.0.3 Additional Resources tidyr, part of the tidyverse and developed by Hadley Wickham and Lionel Henry reshape2, developed by Hadley Wickham tidyr tutorial by Hadley Wickham reshape2 tutorial by Sean C. Anderson tidyr vs reshape2 by Alberto Giudici 61.0.4 Slides and Video Reshaping Data Slides "],["tidying-data.html", "Chapter 62 Tidying Data", " Chapter 62 Tidying Data So far we’ve discussed what tidy and untidy data are. We’ve (hopefully) convinced you that tidy data are the right type of data to work with. And, more than that, hopefully we’ve explained that data are not always the tidiest when they come to you at the start of a project. An incredibly important skill of a data scientist is to be able to take data from an untidy format and get it into a tidy format. We’ve started to discuss how to do this in the last lesson where we learned to reshape data. In this lesson, we’ll discuss a number of other ways in which data can be tidied and the necessary tools to tidy data. These skills are often referred to as data wrangling. They are skills that allow you to wrangle data from the format they’re currently in into the format you actually want them in. As this is an incredibly important topic, this will be a long lesson covering a number of packages and topics. Take your time working through it and be sure to understand all of the examples! data wrangling example 62.0.1 dplyr Within R, there is a package specifically designed for helping you wrangle data. This package is called dplyr and will allow you to easily accomplish many of the data wrangling tasks necessary. In this lesson, we will cover a number of functions that will help you wrangle data using dplyr: %&gt;% - pipe operator for chaining a sequence of operations glimpse() - get an overview of what’s included in dataset filter() - filter rows select() - select, rename, and reorder columns rename() - rename columns arrange() - reorder rows mutate() - create a new column group_by() - group variables summarize() - summarize information within a dataset left_join() - combining data across data frame If you have not already, you’ll want to be sure this package is installed and loaded: install.packages(&#39;dplyr&#39;) library(dplyr) 62.0.2 tidyr We will also return to the tidyr package. The same package that we used to reshape our data will be helpful when tidying data. The main functions we’ll cover from tidyr are: unite() - combine contents of two or more columns into a single column separate() - separate contents of a column into two or more columns If you have not already, you’ll want to be sure this package is installed and loaded: install.packages(&#39;tidyr&#39;) library(tidyr) 62.0.3 janitor The third package we’ll include here is the janitor package. This package provides tools for cleaning messy data. The main functions we’ll cover from janitor are: clean_names() - clean names of a data frame tabyl() - get a helpful summary of a variable If you have not already, you’ll want to be sure this package is installed and loaded: install.packages(&#39;janitor&#39;) library(janitor) 62.0.4 skimr The final package we’ll discuss here is the skimr package. This package provides a quick way to summarize a data frame. We’ll discuss its most useful function here: skim() - summarize a data frame If you have not already, you’ll want to be sure this package is installed and loaded: install.packages(&#39;skimr&#39;) library(skimr) 62.0.5 The Pipe Operator Before we get into the important functions within dplyr, it will be very useful to discuss what is known as the pipe operator. The pipe operator looks like this in R: %&gt;%. Whenever you see the pipe %&gt;%, think of the word “then”, so if you saw the sentence “I went to the the store and %&gt;% I went back to my house,” you would read this as I went to the store and then I went back to my house. The pipe tells you to do one thing and then do another. Generally, the pipe operator allows you to string a number of different functions together in a particular order. If you wanted to take data frame A and carry out function B on it in R, you could depict this with an arrow pointing from A to B: A –&gt; B Here you are saying, “Take A and then feed it into function B.” In R syntax, from what you’ve seen so far, what is depicted by the arrow above would be carried out by calling the function B on the data frame object A: B(A) Alternatively, you could use the pipe operator (%&gt;%): A %&gt;% B However, often you are not performing just one action on a data frame, but rather you are looking to carry out multiple functions. We can again depict this with an arrow diagram. A –&gt; B –&gt; C –&gt; D Here you are saying that you want to take data frame A and carry out function B, then you want to take the output from that and then carry out function C. Subsequently you want to take the output of that and then carry out function D. In R syntax, we would first apply function B to data frame A, then apply function C to this output, then apply function D to this output. This results in the following syntax that is hard to read because multiple calls to functions are nested within each other: D(C(B(A))) Alternatively, you could use the pipe operator. Each time you want take the output of one function and carry out something new on that output, you will use the pipe operator: A %&gt;% B %&gt;% C %&gt;% D Below we’ll use this pipe operator a lot. Essentially, it takes output from the left hand side and feeds it into a function on the right hand side. You’ll get a better understanding of how it works as you run the code below. But, when in doubt remember that the pipe operator should be read as then. 62.0.6 Filtering Data When working with a large dataset, you’re often interested in only working with a portion of the data at any one time. For example, if you had data on people from ages 0 to 100 years old, but you wanted to ask a question that only pertained to children, you would likely want to only work with data from those individuals who were less than 18 years old. To do this, you would want to filter your dataset to only include data from these select individuals. Filtering can be done by row or by column. We’ll discuss the syntax in R for doing both. Please note that the examples in this lesson and the organization for this lesson were adapted from Suzan Baert’s wonderful dplyr tutorials. Links to the all four tutorials can be found in the “Additional Resources” section at the bottom of this lesson. For the examples below, we’ll be using a dataset from the ggplot2 package called msleep. (You’ll learn more about this package in a later course on data visualization.) This dataset includes sleep times and weights from a number of different mammals. It has 83 rows, with each row including information about a different type of animal, and 11 variables. As each row is a different animal and each column includes information about that animal, this is a wide dataset. To get an idea of what variables are included in this data frame, you can use glimpse(). This function summarizes how many rows there are (Observations) and how many columns there are (Variables). Additionally, it gives you a glimpse into the type of data contained in each column. Specifically, in this data set, we know that the first column is name and that it contains a character vector (chr) and that the first three entires are “Cheetah”, “Owl monkey”, and “Mountain beaver.” It works similarly to the summary() function covered in an earlier course. ## install packages if you haven&#39;t already install.packages(&#39;ggplot2&#39;) ## load package library(ggplot2) ## take a look at the data glimpse(msleep) Glimpse of msleep dataset 62.0.6.1 Filtering Rows If you were only interested in learning more about the sleep times of “Primates,” we could filter this dataset to include only data about those mammals that are also Primates. As we can see from glimpse(), this information is contained within the order variable. So to do this within R, we use the following syntax: msleep %&gt;% filter(order == &quot;Primates&quot;) Note that we are using the equality == comparison operator that you learned about in the previous course. Also note that we have used the pipe operator to feed the msleep data frame into the filter() function. This is shorthand for: filter(msleep, order == &quot;Primates&quot;) Filtered to only include Primates Here, we have a smaller dataset of only 12 mammals (as opposed to the original 83) and we can see that the order variable column only includes “Primates.” But, what if we were only interested in Primates who sleep more than 10 hours total per night? This information is in the sleep_total column. Fortunately, filter() also works on numeric variables. To accomplish this, you would use the following syntax, separating the multiple filters you want to apply with a comma: msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) Note that we have used the “greater than” comparison operator with sleep_total. Now, we have a dataset focused in on only 5 mammals, all of which are primates who sleep for more than 10 hours a night total. Numerically filtered dataset We can obtain the same result with the AND &amp; logical operator instead of separating filtering conditions with a comma: msleep %&gt;% filter(order == &quot;Primates&quot; &amp; sleep_total &gt; 10) Note that the number of columns hasn’t changed. All 11 variables are still shown in columns because the function filter() filters on rows, not columns. 62.0.6.2 Selecting Columns While filter() operates on rows, it is possible to filter your dataset to only include the columns you’re interested in. To select columns so that your dataset only includes variables you’re interested in, you will use select(). Let’s start with the code we just wrote to only include primates who sleep a lot. What if we only want to include the first column (the name of the mammal) and the sleep information (included in the columns sleep_total, sleep_rem, and sleep_cycle)? We would do this by starting with the code we just used, adding another pipe, and using the function select(). Within select, we specify which columns we want in our output. msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_total, sleep_rem, sleep_cycle) Data with selected columns Now, using select() we see that we still have the five rows we filtered to before, but we only have the four columns specified using select(). Here you can hopefully see the power of the pipe operator to chain together several commands in a row. Without the pipe operator, the full command would look like this: select(filter(msleep, order == &quot;Primates&quot;, sleep_total &gt; 10), name, sleep_total, sleep_rem, sleep_cycle) 62.0.6.3 Renaming Columns select() can also be used to rename columns. To do so, you use the syntax: new_column_name = old_column_name within select. For example, to select the same columns and rename them total, rem and cycle, you would use the following syntax: msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, total=sleep_total, rem=sleep_rem, cycle=sleep_cycle) Data with renamed columns names with select() It’s important to keep in mind that when using select() to rename columns, only the specified columns will be included and renamed in the output. If you, instead, want to change the names of a few columns but return all columns in your output, you’ll want to use rename(). For example, the following, returns a data frame with all 11 columns, where the column names for three columns specified within rename() function have been renamed. msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% rename(total=sleep_total, rem=sleep_rem, cycle=sleep_cycle) Data with renamed columns names using rename() 62.0.7 Reordering In addition to filtering rows and columns, often, you’ll want the data arranged in a particular order. It may order the columns in a logical way, or it could be to sort the data so that the data are sorted by value, with those having the smallest value in the first row and the largest value in the last row. All of this can be achieved with a few simple functions. 62.0.7.1 Reordering Columns The select() function is powerful. Not only will it filter and rename columns, but it can also be used to reorder your columns. Using our example from above, if you wanted sleep_rem to be the first sleep column and sleep_total to be the last column, all you have to do is reorder them within select(). The output from select() would then be reordered to match the order specified within select(). msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) Here we see that sleep_rem name is displayed first followed by sleep_rem, sleep_cycle, and sleep_total, just as it was specified within select(). Data with reordered columns names 62.0.7.2 Reordering Rows Rows can also be reordered. To reorder a variable in ascending order (from smallest to largest), you’ll want to use arrange(). Continuing on from our example above, to now sort our rows by the amount of total sleep each mammal gets, we would use the following syntax: msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;% arrange(sleep_total) Data arranged by total sleep in ascending order While arrange sorts variables in ascending order, it’s also possible to sort in descending (largest to smallest) order. To do this you just use desc() with the following syntax: msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;% arrange(desc(sleep_total)) By putting sleep_total within desc(), arrange() will now sort your data from the primates with the longest total sleep to the shortest. Data arranged by total sleep in descending order arrange() can also be used to order non-numeric variables. For example, arrange() will sort character vectors alphabetically. msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;% arrange(name) Data arranged alphabetically by name If you would like to reorder rows based on information in multiple columns, you can specify them separated by commas. This is useful if you have repeated labels in one column and want to sort within a category based on information in another column. In the example here, if there were repeated primates, this would sort the repeats based on their total sleep. msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;% arrange(name, sleep_total) 62.0.8 Creating new columns You will often find when working with data that you need an additional column. For example, if you had two datasets you wanted to combine, you may want to make a new column in each dataset called dataset. In one dataset you may put datasetA in each row. In the second dataset, you could put datasetB. This way, once you combined the data, you would be able to keep track of which dataset each row came from originally. More often, however, you’ll likely want to create a new column that calculates a new variable based on information in a column you already have. For example, in our mammal sleep dataset, sleep_total is in hours. What if you wanted to have that information in minutes? You could create a new column with this very information! The function mutate() was made for all of these new-column-creating situations. This function has a lot of capabilities. We’ll cover the basics here. Returning to our msleep dataset, after filtering and re-ordering, we can create a new column with mutate(). Within mutate(), we will calculate the number of minutes each mammal sleeps by multiplying the number of hours each animal sleeps by 60 minutes. msleep %&gt;% filter(order == &quot;Primates&quot;, sleep_total &gt; 10) %&gt;% select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;% arrange(name) %&gt;% mutate(sleep_total_min = sleep_total * 60) Mutate to add new column to data 62.0.9 Separating Columns Sometimes multiple pieces of information are merged within a single column even though it would be more useful during analysis to have those pieces of information in separate columns. To demonstrate, we’ll now move from the msleep dataset to talking about another dataset that includes information about conservation abbreviations in a single column. To read this file into R, we’ll use the httr package, which will be discussed in detail in a future lesson. For now, however, know that we’re using this to read in a file from the Internet using the code below. ## if not already installed, you&#39;ll have to run the following line of code ## install.packages(&#39;httr&#39;) ## install.packages(&#39;readr&#39;) ## load the libraries library(httr) library(readr) ## download file GET(&quot;https://raw.githubusercontent.com/suzanbaert/Dplyr_Tutorials/master/conservation_explanation.csv&quot;, write_disk(tf &lt;- tempfile(fileext = &quot;.csv&quot;))) conservation &lt;- read_csv(tf) ## take a look at this file head(conservation) Conservation data set In this dataset, we see that there is a single column that includes both the abbreviation for the conservation term as well as what that abbreviation means. Recall that this violates one of the tidy data principles covered in the first lesson: Put just one thing in a cell. To work with these data, you could imagine that you may want these two pieces of information (the abbreviation and the description) in two different columns. To accomplish this in R, you’ll want to use separate() from tidyr. The separate() function requires the name of the existing column that you want to separate (conservation abbreviation), the desired column names of the resulting separated columns (into = c(\"abbreviation\", \"description\")), and the characters that currently separate the pieces of information (sep = \" = \"). We have to put conservation abbreviation in back ticks in the code below because the column name contains a space. Without the back ticks, R would think that conservation and abbreviation were two separate things. This is another violation of tidy data! Variable names should have underscores, not spaces! conservation %&gt;% separate(`conservation abbreviation`, into = c(&quot;abbreviation&quot;, &quot;description&quot;), sep = &quot; = &quot;) The output of this code shows that we now have two separate columns with the information in the original column separated out into abbreviation and description. Output of separate() 62.0.10 Merging Columns The opposite of separate() is unite(). So, if you have information in two or more different columns but wish it were in one single column, you’ll want to use unite(). Using the code forming the two separate columns above, we can then add on an extra line of unite() code to re-join these separate columns, returning what we started with. conservation %&gt;% separate(`conservation abbreviation`, into = c(&quot;abbreviation&quot;, &quot;description&quot;), sep = &quot; = &quot;) %&gt;% unite(united_col, abbreviation, description, sep = &quot; = &quot;) Output of unite() 62.0.11 Cleaning up column names While maybe not quite as important as some of the other functions mentioned in this lesson, a function that will likely prove very helpful as you start analyzing lots of different datasets is clean_names() from the janitor package. This function takes the existing column names of your dataset, converts them all to lowercase letters and numbers, and separates all words using the underscore character. For example, there is a space in the column name for conservation. clean_names() will convert conservation abbreviation to conservation_abbreviation. These cleaned up column names are a lot easier to work with when you have large datasets. conservation %&gt;% clean_names() clean_names() output 62.0.12 Combining data across data frames There is often information stored in two separate data frames that you’ll want in a single data frame. There are many different ways to join separate data frames. They are discussed in more detail in this tutorial from Jenny Bryan. Here, we’ll demonstrate how the left_join() function works, as this is used frequently. Let’s try to combine the information from the two different datasets we’ve used in this lesson. We have msleep and conservation. msleep contains a column called conservation. This column includes lowercase abbreviations that overlap with the uppercase abbreviations in the abbreviation column in the conservation dataset. To handle the fact that in one dataset the abbreviations are lowercase and the other they are uppercase, we’ll use mutate() to take all the lowercase abbreviations to uppercase abbreviations using the function toupper(). We’ll then use left_join() which takes all of the rows in the first dataset mentioned (msleep, below) and incorporates information from the second dataset mentioned (conserve, below), when information in the second dataset is available. The by = argument states what columns to join by in the first (“conservation”) and second (“abbreviation”) datasets. This join adds the description column from the conserve dataset onto the original dataset (msleep). Note that if there is no information in the second dataset that matches with the information in the first dataset, left_join() will add NA. Specifically, for rows where conservation is “DOMESTICATED” below, the description column will have NA because “DOMESTICATED”” is not an abbreviation in the conserve dataset. ## take conservation dataset and separate information ## into two columns ## call that new object `conserve` conserve &lt;- conservation %&gt;% separate(`conservation abbreviation`, into = c(&quot;abbreviation&quot;, &quot;description&quot;), sep = &quot; = &quot;) ## now lets join the two datasets together msleep %&gt;% mutate(conservation = toupper(conservation)) %&gt;% left_join(conserve, by = c(&quot;conservation&quot; = &quot;abbreviation&quot;)) Data resulting from left_join It’s important to note that there are many other ways to join data, which are covered in more detail on this dplyr join cheatsheet from Jenny Bryan. For now, it’s important to know that joining datasets is done easily in R using tools in dplyr. As you join data frames in your own work, it’s a good idea to refer back to this cheatsheet for assistance. 62.0.13 Grouping Data Often, data scientists will want to summarize information in their dataset. You may want to know how many people are in a dataset. However, more often, you’ll want to know how many people there are within a group in your dataset. For example, you may want to know how many males and how many females there are. To do this, grouping your data is necessary. Rather than looking at the total number of individuals, to accomplish this, you first have to group the data by the gender of the individuals. Then, you count within those groups. Grouping by variables within dplyr is straightforward. 62.0.13.1 group_by() There is an incredibly helpful function within dplyr called group_by(). group_by() groups a dataset by one or more variables. On its own, it does not appear to change the dataset very much. The difference between the two outputs below is subtle: msleep msleep %&gt;% group_by(order) group_by() output In fact, the only aspect of the output that is different is that the number of different orders is now printed on your screen. However, in the next section, you’ll see that the output from any further functions you carry out at this point will differ between the two datasets. 62.0.14 Summarizing Data Throughout data cleaning and analysis it will be important to summarize information in your dataset. This may be for a formal report or for checking the results of a data tidying operation. 62.0.14.1 summarize() Continuing on from the previous examples, if you wanted to figure out how many samples are present in your dataset, you could use the summarize() function. msleep %&gt;% select(order) %&gt;% summarize(N=n()) This provides a summary of the data with the new column name we specified above (N) and the number of samples in the dataset. Note that we could also obtain the same information by directly obtaining the number of rows in the data frame with nrow(msleep). Summarize with n() However, if you wanted to count how many of each different order of mammal you had. You would first group_by(order) and then use summarize(). This will summarize within group. msleep %&gt;% group_by(order) %&gt;% select(order) %&gt;% summarize(N=n()) The output from this, like above, includes the column name we specified in summarize (N). However, it includes the number of samples in the group_by variable we specified (order). group_by() and summarize with n() There are other ways in which the data can be summarized using summarize(). In addition to using n() to count the number of samples within a group, you can also summarize using other helpful functions within R, such as mean(), median(), min(), and max(). For example, if we wanted to calculate the average (mean) total sleep each order of mammal got, we could use the following syntax: msleep %&gt;% group_by(order) %&gt;% select(order, sleep_total) %&gt;% summarize(N=n(), mean_sleep=mean(sleep_total)) summarize using mean() 62.0.14.2 tabyl() In addition to using summarize() from dplyr, the tabyl() function from the janitor package can be incredibly helpful for summarizing categorical variables quickly and discerning the output at a glance. Again returning to our msleep dataset, if we wanted to get a summary of how many samples are in each order category and what percent of the data fall into each category we could call tabyl on that variable. For example, if we use the following syntax, we easily get a quick snapshot of this variable. msleep %&gt;% tabyl(order) summarize using tabyl() from janitor Note, that tabyl assumes categorical variables. If you want to summarize numeric variables summary() works well. For example, this code will summarize the values in msleep$awake for you. summary(msleep$awake) summarize numeric variables 62.0.14.3 skim() When you would rather get a snapshot of the entire dataset, rather than just one variable, the skim() function from the skimr package can be very helpful. The output from skim() breaks the data up by variable type. For example, the msleep data set is broken up into character and numeric variable types. The data are then summarized in a meaningful way for each. This function provides a lot of information about the entire data set. So, when you want a summarize a dataset and quickly get a sense of your data, skim() is a great option! skim(msleep) summarize entire dataset using skim() from skimr 62.0.15 Conclusion We have gone through a number of ways to work with data in this lesson. Mastering the skills in this lesson will provide you with a number of critical data science skills. Thus, running the examples in this lesson and practicing on your own with other data sets will be essential to succeeding as a data scientist. 62.0.16 Additional Resources dplyr, part of the tidyverse janitor, from Sam Firke dplyr tutorials by Suzan Baert Part 1 Part 2 Part 3 Part 4 janitor tutorial by dplyr join cheatsheet by Jenny Bryan Note: a lot of the examples in this lesson were modified from the dplyr tutorials by Suzan Baert. To get an even deeper understanding of how to tidy data using dplyr, take a look at all of her dplyr tutorials. 62.0.17 Slides and Video Tidying Data Slides "],["working-with-strings.html", "Chapter 63 Working with Strings", " Chapter 63 Working with Strings 63.0.1 Strings review Strings were introduced in an earlier lesson; however, to review briefly here: A string is a sequence of characters, letters, numbers or symbols. So within R, you could create a string using this syntax. Note that the string begins and ends with quotation marks: stringA &lt;- &quot;This sentence is a string.&quot; Multiple strings can be stored within vectors. So, if you have multiple vectors that you want to store in a single object, you could do so by using c() around the strings you want to store and commas to separate each individual string: objectA &lt;- c( &quot;This sentence is a string.&quot;, &quot;Short String&quot;, &quot;Third string&quot; ) 63.0.2 stringr stringr is a package within the tidyverse specifically designed to work well with strings. All functions within this package start with str_, as you’ll see below. There are many helpful functions within the stringr package. We’ll only review the basics here, but if you’re looking to accomplish something with a string and aren’t sure how to approach it, the stringr package is a good first place to look. To install and load the stringr package, you’ll use the following: # If not already installed, you&#39;ll need to install the package install.packages(&quot;stringr&quot;) # load package into R library(stringr) The best way to work through this lesson is to copy and paste every line of code into your RStudio window and see if the output makes sense to you. Working with strings and regular expressions is best learned by practice. 63.0.2.1 Available functions As we’ll only cover a few of the functions within stringr in this lesson, it’s important to remember that if you start typing “str_” within RStudio, a list of the many options will show up. str_ image 63.0.3 String basics When working with strings, some of the most frequent tasks you’ll need to complete are to: Determine the length of a string Combine strings together Subset strings 63.0.3.1 String length Returning to our object with three strings from earlier in the lesson, we can determine the length of each string in the vector. objectA &lt;- c( &quot;This sentence is a string.&quot;, &quot;Short String&quot;, &quot;Third string&quot; ) str_length(objectA) str_length output Here we see that the first string has a length of 26. If you were to go back and count the characters in the first string, you would see that this 26 includes each letter, space, and period in that string. The length of a string does not just could the letters in its length. The length includes every character. The second and third strings each have length 12. 63.0.3.2 Combining strings: str_c() If you were interested in combining strings, you’d want to use str_c. str_c( &quot;Good&quot;, &quot;Morning&quot;) str_c However, the output from this doesn’t look quite right. You may want a space between these two words when you combine the two strings. That can be controlled with the sep argument. str_c( &quot;Good&quot;, &quot;Morning&quot;, sep=&quot; &quot;) 63.0.3.3 Subsetting strings: str_sub() Often, it’s important to get part of a string out. To do this, you’ll want to subset the string using the str_sub() function. For example, if you wanted only the first three characters in the string below, you would specify that within str_sub(). object &lt;- c( &quot;Good&quot;, &quot;Morning&quot;) str_sub(object, 1, 3) str_sub output You can also use negative numbers to count from the end of the string. For example, below we see code that returns the last three positions in the string. object &lt;- c( &quot;Good&quot;, &quot;Morning&quot;) str_sub(object, -3, -1) str_sub output counting from end of string 63.0.3.4 String sorting: str_sort() Finally, if you wanted to sort a string alphabetically, str_sort() can help you accomplish that. names &lt;- c(&quot;Keisha&quot;, &quot;Mohammed&quot;, &quot;Jane&quot;) str_sort(names) str_sort() output sorts strings 63.0.4 Regular expressions Above we discuss the basics of working with strings within stringr. However, working with strings becomes infinitely easier with an understanding of regular expressions. Regular expressions (regexps) are used to describe patterns within strings. They can take a little while to get the hang of but become very helpful once you do. With regexps, instead of specifying that you want to extract the first three letters of a string (as we did above), you could more generally specify that you wanted to extract all strings that start with a specific letter or that contain a specific word somewhere in the string using regexps. We’ll explore the basics of regexps here. The use them in stringr, the general format is function(string , pattern = regexp), which you’ll see used in practice below. The set of functions from stringr we’ll cover are listed below We’ll cover a number of helpful stringr functions: str_view() - View the first occurrence in a string that matches the regex str_view_all() - View all occurrences in a string that match the regex str_count() - count the number of times a regex matches within a string str_detect() - determine if regex is found within string str_subset() - return subset of strings that match the regex str_extract() - return portion of each string that matches the regex str_replace() - replace portion of string that matches the regex with something else 63.0.4.1 Anchors If interested in finding a pattern at the beginning (^) or end ($) of a string, you can specify that using a regexp. For example, if you wanted to only look at names that started with the letter “M”, you would specify that using a regexp. The pattern you would include would be \"^M\" to identify all strings that start with the letter M. To specify those strings that end with a capital M, you would specify the pattern \"$M\". 63.0.4.2 Show matches: str_view() To get comfortable with using regexps with strings, str_view() can be very helpful. The output from str_view() highlights what portion of your string match the pattern specified in your regexp with a gray box. For example, to we’ll start using anchors and str_view() below: names &lt;- c(&quot;Keisha&quot;, &quot;Mohammed&quot;, &quot;Jane&quot;, &quot;Mathieu&quot;) ## identify strings that start with &quot;M&quot; str_view(names, &quot;^M&quot;) str_view() identifies names that start with M In this first example we see in the Viewer Panel that str_view has identified the names that start with the letter M. However, if you try to match strings that end with the letter “M”, no match is found. ## identify strings that end with &quot;M&quot; str_view(names, &quot;M$&quot;) str_view() does not identify any names that end with M To identify names by that end with the letter “a”, you would use the following. ## identify strings that end with &quot;a&quot; str_view(names, &quot;a$&quot;) str_view() identifies names that end with a Note, however, that regexps are case sensitive. To match patterns, you have to consider that “A” and “a” are different characters. ## identify strings that end with &quot;A&quot; str_view(names, &quot;A$&quot;) str_view() does not identify any names that end with A 63.0.4.3 Count matches: str_count() To count the number of matches within your strings, you would use str_count(). Below, using the names vector we’ve been using, we see that str_count() produces a 1 for those names that start with “M” and a 0 otherwise. ## identify strings that start with &quot;M&quot; ## return count of the number of times string matches pattern str_count(names, &quot;^M&quot;) str_count() strings that start with “M” However, if we instead wanted a count of the numbers of lowercase “m”s, we could still use str_count() to accomplish that. Notice below we’ve removed the specification to just look at the beginning of the string. Here, we’re looking for lowercase m’s anywhere in the string and counting them: ## identify strings that have a lowercase &quot;m&quot; ## return count of the number of times string matches pattern str_count(names, &quot;m&quot;) str_count() strings that have an m in them 63.0.4.4 Detect matches: str_detect() Instead of returning a count, at times you’re just interested in knowing which strings match the pattern you’re searching for. In these cases you’ll want to use str_detect(). This function simply returns a TRUE if the string matches the pattern specified and FALSE otherwise. ## identify strings that start with &quot;M&quot; ## return TRUE if they do; FALSE otherwise str_detect(names, &quot;^M&quot;) str_detect() returns TRUE for strings that match the specified pattern; FALSE otherwise 63.0.4.5 Subset matches: str_subset() To return the actual string that matches the specified pattern, rather than a TRUE/FALSE, you’ll look to str_subset(). This function pulls out those strings that match the specified pattern. For example, to obtain the subset of names whose values start with the capital letter “M”, you would use the following: ## identify strings that start with &quot;M&quot; ## return whole string str_subset(names, &quot;^M&quot;) str_subset() returns the strings that match the pattern specified 63.0.4.6 Extract matches: str_extract() To extract only the portions of the string that match the specified pattern, you would use str_extract(). This function returns the pattern specified for strings where it is found and NA otherwise. For example, by searching for names that start with M, below, we see that the second and fourth strings in our vector return the pattern specified (“M”) and that the first and third strings in the vector return NA, as they do not start with a capital “M”. ## return &quot;M&quot; from strings with &quot;M&quot; in it ## otherwise, return NA str_extract(names, &quot;^M&quot;) str_extract() returns the portions of the strings that match the pattern specified 63.0.4.7 Replace matches: str_replace() The final basic function from stringr that we’ll discuss is str_replace(). This function identifies a regex and replaces each occurrence with whatever replacement the user specifies. For example, below we search for strings that start with the capital letter “M” and replace each of them with a question mark. All strings that do not match the regex are returned unchanged. ## replace capital M with a question mark str_replace(names, &quot;^M&quot;, &quot;?&quot;) str_replace() replaces regex with specified characters 63.0.4.8 Common regular expressions Above we discuss two common patterns searched for using regular expressions: starts with (^) and ends with ($). However, there are a number of additional common ways to match patterns. They are listed here, and we’ll discuss each one in slightly more detail below. 63.0.4.8.1 Searching for characters To search for a set of characters, you place these characters within brackets. Below, this will identify anywhere in the strings where you have a lowercase vowel. Note, that we’re now using str_view_all() to identify all occurrences of these characters, rather than str_view(), which only identifies the first occurrence in each string. ## identify all lowercase vowels str_view_all(names, &quot;[aeiou]&quot;) brackets specify which characters to search for 63.0.4.8.2 Searching for anything other than a set of characters By adding a caret (^) before the vowels within the brackets, this regular expressions specifies that you are searching for any character that is not a lowercase vowel within your strings. ## identify anything that&#39;s NOT a lowercase vowel str_view_all(names, &quot;[^aeiou]&quot;) brackets with a caret first specify which characters NOT to search for 63.0.4.8.3 Search for digits To search for digits (numeric variable between 0 and 9) in a string you use “; however, backslashes are protected characters in R. This means that you have to escape this character first with an additional backslash (\\), to let R know that you want to search for the regular expression”. addresses &lt;- c(&quot;1234 Main Street&quot;, &quot;1600 Pennsylvania Ave&quot;, &quot;Brick Building&quot;) ## identify anything that&#39;s a digit str_view_all(addresses, &quot;\\\\d&quot;) earches for digits 63.0.4.8.4 Search for whitespace Identifying whitespace in R identifies any spaces, tabs or newlines. Note that again we have to escape the “” with a backslash for R to recognize the regular expression. ## identify any whitespace str_view_all(addresses, &quot;\\\\s&quot;) searches for whitespace 63.0.4.8.5 Identify any character (except newline) To identify any character except for a newline you’ll use \".\". Notice in our addresses example that there are no newlines, so this pattern will match with the entire string. ## identify any character str_view_all(addresses, &quot;.&quot;) . searches for any character 63.0.4.9 Repetition within regular expressions Searches for regular expressions allow you to specify how many times a pattern should be found within the string. To do so, you use the following: ? : 0 or 1 : 1 or more \\* : 0 or more {n} : exactly n times {n,} : n or more times {n,m} : between n and m times 63.0.4.9.1 Examples of repetition within regular expressions Using the definitions above, we can see that the following code will identify patterns within the addresses vector where n shows up one more more times in a string. ## identify any time n shows up one or more times str_view_all(addresses, &quot;n+&quot;) + specifies to match the pattern one or more times While the difference is slight in the output here, we’re identifying portions of the string where n shows up exactly once. So, instead of the ‘nn’ in Pennsylvania matching together, the code here splits these up, due to the fact that we’re specifying the pattern match ‘n’ exactly one time: ## identify any time n shows up str_view_all(addresses, &quot;n{1}&quot;) {#} looks to match the pattern exactly the number of times within the curly braces If you only wanted to match strings where n showed up twice in a row, you could specify that in this way: ## identify any time n shows up exactly two times in a row str_view_all(addresses, &quot;n{2}&quot;) {2} specifies that the pattern must be found exactly twice This could similarly be achieved by specifying to search for the pattern ‘nn’ one or more times (+): ## identify any time &#39;nn&#39; shows up one or more times str_view_all(addresses, &quot;nn+&quot;) nn+ searches for double n one or more times in a string You can also specify a range of the number of times to search for a pattern within your string. Below, we see that if we specify n be searched for at least two and at most 3 times, the pattern matches within our string. However, if we increase that to between three and four times, no pattern matching occurs, as there are never three or four n’s in a row in our strings. ## identify any time n shows up two or three times str_view_all(addresses, &quot;n{2,3}&quot;) ## identify any time n shows up three or four times str_view_all(addresses, &quot;n{3,4}&quot;) {n,m} looks to pattern match between n and m times 63.0.5 Conclusion This lesson set out to introduce you to how to work with strings within RStudio, using the stringr package and to introduce you to regular expressions. We’ve covered a number of functions and concepts in this lesson. Feel free to review the material and practice as much as you need before completing this quiz! 63.0.6 Additional Resources r4ds : Chapter 14 - Strings by Hadley Wickham stringr documentation, part of the tidyverse 63.0.7 Slides and Video Working with Strings Slides "],["working-with-factors.html", "Chapter 64 Working with Factors", " Chapter 64 Working with Factors In R, categorical data are handled as factors. By definition, categorical data are limited in that they have a set number of possible values they can take. For example, there are 12 months in a calendar year. In a month variable, each observation is limited to taking one of these twelve values. Thus, with a limited number of possible values, month is a categorical variable. Categorical data, which will be referred to as factors for the rest of this lesson, are regularly found in data. Learning how to work with this type of variable effectively will be incredibly helpful. To make working with factors simpler, we’ll utilize the forcats package. Similar to the stringr package, all functions within forcats begin with fct_. As before, to see available functions you can type ?fct_ in your RStudio console. A drop-down menu will appear with all the possible forcats functions. Before working through this lesson, you’ll want to be sure that forcats has been installed and loaded in: install.packages(&#39;forcats&#39;) library(forcats) fct_ output from RStudio 64.0.1 Factor basics In R, factors are comprised of two components: the actual values of the data and the possible levels within the factor. Thus, to create a factor, you need to supply both these pieces of information. For example, if we were to create a character vector of the twelve months, we could certainly do that: ## all 12 months all_months &lt;- c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) ## our data some_months &lt;- c(&quot;Mar&quot;, &quot;Dec&quot;, &quot;Jan&quot;, &quot;Apr&quot;, &quot;Jul&quot;) However, if we were to sort this vector, R would sort this vector alphabetically. sort(some_months) sort sorts variable alphabetically While you and I know that this is not how months should be ordered, we haven’t yet told R that. To do so, we need to let R know that it’s a factor variable and what the levels of that factor variable should be. mon &lt;- factor(some_months, levels = all_months) mon sort(mon) defining the factor levels sorts this variable sensibly Here, we specify all the possible values that the factor could take in the levels = all_months argument. So, even though not all twelve months are included in the some_months object, we’ve stated that all of the months are possible values. Further, when you sort this variable, it now sorts in the sensical way! 64.0.2 Manually change the labels of factor levels : fct_relevel() What if you wanted your months to start with July first? That can be accomplished using fct_relevel(). To use this function, you simply need to state what you’d like to relevel (mon) followed by the levels you want to relevel. If you want these to be placed in the beginning, the after argument should be after = 0. You can play around with this setting to see how changing after affects the levels in your output. mon_relevel &lt;- fct_relevel(mon, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, after = 0) mon_relevel sort(mon_relevel) fct_relevel enables you to change the order of your factor levels After re-leveling, when we sort this factor, we see that Jul is placed first, as specified by the level re-ordering. 64.0.3 Keep the order of the factor levels : fct_inorder() Now, if you’re not interested in the months being in calendar year order, you can always state that you want the levels to stay in the same order as the data you started with, you simply specify fct_inorder. mon_inorder &lt;- fct_inorder(some_months) mon_inorder sort(mon_inorder) fct_inorder assigns levels in the same order the level is seen in the data We see now with fct_inorder that even when we sort the output, it does not sort the factor alphabetically, nor does it put it in calendar order. In fact, it stays in the same order as the input, just as we specified. 64.0.4 Advanced Factoring For the remainder of this lesson, we’re going to return to using a dataset that’s in R by default. We’ll use the chickwts dataset for exploring the remaining advanced functions. This data set includes data from an experiment that was looking to compare the “effectiveness of various feed supplements on the growth rate of chickens.” chickwts dataset 64.0.5 Re-ordering factor levels by frequency : fct_infreq() To re-order factor levels by frequency of the value in the dataset, you’ll want to use fct_infreq(). Below, we see from the output from tabyl() that ‘soybean’ is the most frequent feed in the data set while ‘horsebean’ is the least frequent. Thus, when we order by frequency, we can expect these two feeds to be at opposite ends for our levels. ## take a look at frequency of each level ## using tabyl() from `janitor` package library(janitor) tabyl(chickwts$feed) ## order levels by frequency fct_infreq(chickwts$feed) %&gt;% head() fct_infreq orders levels based on frequency in dataset As expected, soybean, the most frequent level, appears as the first level and horsebean, the least frequent level, appears last. The rest of the levels are sorted by frequency. 64.0.6 Reversing order levels : fct_rev() If we wanted to sort the levels from least frequent to most frequent, we could just put fct_rev() around the code we just used to reverse the factor level order. ## reverse factor level order fct_rev(fct_infreq(chickwts$feed)) %&gt;% head() fct_rev() reverses the factor level order 64.0.7 Re-ordering factor levels by another variable : fct_reorder() At times you may want to reorder levels of a factor by another variable in your dataset. This is often helpful when generating plots (which we’ll get to in a future lesson!). To do this you specify the variable you want to reorder, followed by the numeric variable by which you’d like the factor to be re-leveled. Here, we see that we’re re-leveling feed by the weight of the chickens. While we haven’t discussed plotting yet, the best way to demonstrate how this works is by plotting the feed against the weights. We can see that the order of the factor is such that those chickens with the lowest median weight (horsebean) are to the left, while those with the highest median weight (casein) are to the right. ## order levels by a second numeric variable chickwts %&gt;% mutate(newfeed = fct_reorder(feed, weight)) %&gt;% ggplot(., aes(newfeed,weight)) + geom_point() fct_reorder allows you to re-level a factor based on a secondary numeric variable 64.0.8 Combining several levels into one: fct_recode() To demonstrate how to combine several factor levels into a single level, we’ll continue to use our ‘chickwts’ dataset. Now, I don’t know much about chicken feed, and there’s a good chance you know a lot more. However, let’s assume (even if it doesn’t make good sense with regards to chicken feed) you wanted to combine all the feeds with the name “bean” in it to a single category and you wanted to combine “linseed” and “sunflower”” into the category “seed”. This can be simply accomplished with fct_recode. In fact, below, you see we can rename all the levels to a simpler term (the values on the left side of the equals sign) by re-naming the original level names (the right side of the equals sign). This code will create a new column, called feed_recode (accomplished with mutate()). This new column will combine “horsebean” and “soybean feeds”, grouping them both into the larger level “bean”. It will similarly group “sunflower” and “linseed” into the larger level “seed.” All other feed types will also be renamed. When we look at the summary of this new column by using tabyl(), we see that all of the feeds have been recoded, just as we specified! We now have four different feed types, rather than the original six. ## we can use mutate to create a new column ## and fct_recode() to: ## 1. group horsebean and soybean into a single level ## 2. rename all the other levels. chickwts %&gt;% mutate(feed_recode = fct_recode(feed, &quot;seed&quot; = &quot;linseed&quot;, &quot;bean&quot; = &quot;horsebean&quot;, &quot;bean&quot; = &quot;soybean&quot;, &quot;meal&quot; = &quot;meatmeal&quot;, &quot;seed&quot; = &quot;sunflower&quot;, &quot;casein&quot; = &quot;casein&quot; )) %&gt;% tabyl(feed_recode) fct_recode() can be used to group multiple levels into a single level and/or to rename levels 64.0.9 Converting numeric levels to factors: ifelse() + factor() Finally, when working with factors, there are times when you want to convert a numeric variable into a factor. For example, if you were talking about a dataset with BMI for a number of individuals, you may want to categorize people based on whether or not they are underweight (BMI &lt; 18.5), of a healthy weight (BMI between 18.5 and 29.9), or obese (BMI &gt;= 30). When you want to take a numeric variable and turn it into a categorical factor variable, you can accomplish this easily by using ifelse() statements. if{} statements and else{} statements were covered in an earlier lesson. Here we combine those two ideas. Within a single statement we provide R with a condition: weight &lt;= 200. With this, we are stating that the condition is if a chicken’s weight is less than or equal to 200 grams. Then, if that condition is true, meaning if a chicken’s weight is less than or equal to 200 grams, let’s assign that chicken to the category low. Otherwise, and this is the else{} part of the ifelse() function, assign that chicken to the category high. Finally, we have to let R know that weight_recode is a factor variable, so we call factor() on this new column. This way we take a numeric variable (weight), and turn it into a factor variable (weight_recode). ## convert numeric variable to factor chickwts %&gt;% mutate(weight_recode = ifelse(weight &lt;= 200, &quot;low&quot;, &quot;high&quot;), weight_recode = factor(weight_recode)) %&gt;% tabyl(weight_recode) converting a numeric type variable to a factor 64.0.10 Conclusions This lesson has covered how to work with factors (categorical) variables in R using the forcats package in R. In line with the previous few lessons, the best way to learn how to work with factors, is to actually work with factors. Play around with the examples here and continue to practice using this type of variable! You’ll come across factors regularly as you analyze data! 64.0.11 Additional Resources r4ds : Chapter 15 - Factors by Hadley Wickham forcats, part of the tidyverse forcats blog post by Hadley Wickham Wrangling Categorical Data in R by Amelia McNamara &amp; Nicholas J Horton Note: Wrangling Categorical Data in R is full of really great examples and goes into further depth than what is covered here. This is a great resource to get more practice working with categorical data (factors) in R. 64.0.12 Slides and Video Working with Factors Slides "],["working-with-dates.html", "Chapter 65 Working with Dates", " Chapter 65 Working with Dates In lessons an earlier course, you were introduced to different types of objects in R, such as characters, numeric, and logicals. Then, in earlier lessons in this course, we covered how to work with strings and factors in detail. The remaining type of variable we haven’t yet covered is how to work with dates and time in R. As with strings and factors, there is a tidyverse package to help you work with dates more easily. The lubridate package will make working with dates and times easier. Before working through this lesson, you’ll want to be sure that lubridate has been installed and loaded in: install.packages(&#39;lubridate&#39;) library(lubridate) 65.0.1 Dates and time basics When working with dates and times in R, you can consider either dates, times, or date-times. Date-times refer to dates plus times, specifying an exact moment in time. It’s always best to work with the simplest possible object for your needs. So, if you don’t need to refer to date-times specifically, it’s best to work with dates. 65.0.2 Creating dates and date-time objects To get objects into dates and date-times that can be more easily worked with in R, you’ll want to get comfortable with a number of functions from the lubridate package. Below we’ll discuss how to create date and date-time objects from (1) strings and (2) individual parts. 65.0.2.1 From strings Date information is often provided as a string. The functions within the lubridate package can effectively handle this information. To use them to generate date objects, you can call a function using y, m, and d in the order in which the year (y), month (m), and date (d) appear in your data. The code below produces identical output for the date September 29th, 1988, despite the three distinct input formats. This uniform output makes working with dates much easer in R. ymd(&quot;1988-09-29&quot;) mdy(&quot;September 29th, 1988&quot;) dmy(&quot;29-Sep-1988&quot;) creating date and date-time objects However, this has only covered working with date objects. To work with date-time objects, you have to further include hour (h), minute(m), and second (s) into the function. For example, in the code below, you can see that the output contains time information in addition to the date information generated in the functions above: ymd_hms(&quot;1988-09-29 20:11:59&quot;) 65.0.2.2 From individual parts If you have a data set where month, date, year, and/or time information are included in separate columns, the functions within lubridate can take this separate information and create a date or date-time object. To work through examples using the functions make_date() and make_timedate(), we’ll use a dataset called nycflights13. As this dataset is not included with the R by default, you’ll have to install and load it in directly: install.packages(&#39;nycflights13&#39;) library(nycflights13) Loading this package makes a data frame called flights, which includes “on-time data for all flights that departed NYC in 2013,” available. We will work with this dataset to demonstrate how to create a date and date-time object from a dataset where the information is spread across multiple columns. First, to create a new column, as we’ve done throughout the lessons in this course, we will use mutate(). To create a date object, we’ll use the function make_date(). We just then need to supply the names of the columns containing the year, month, and day information to this function. ## make_date() creates a date object ## from information in separate columns flights %&gt;% select(year, month, day) %&gt;% mutate(departure = make_date(year, month, day)) mutate and make_date() create a new column – departure – with a date object A similar procedure is used to create a date-time object; however, this requires the function make_datetime() and requires columns with information about time be specified. Below, hour and minute are included to the function’s input. ## make_datetime() creates a date-time object ## from information in separate columns flights %&gt;% select(year, month, day, hour, minute) %&gt;% mutate(departure = make_datetime(year, month, day, hour, minute)) mutate and make_datetime() create a new column – departure – with a date-time object 65.0.3 Working with dates The reason we’ve dedicated an entire lesson to working with dates and have shown you how to create date and date-time objects in this lesson is because you often want to plot data over time or calculate how long something has taken. Being able to accomplish these tasks is an important job for a data scientist. So, now that you know how to create date and date-time objects, we’ll work through a few examples of how to work with these objects 65.0.3.1 Getting components of dates Often you’re most interested in grouping your data by year, or just looking at monthly or weekly trends. To accomplish this, you have to be able to extract just a component of your date object. You can do this with the functions: year(), month(), mday(),wday(), hour(), minute() and second(). Each will extract the specified piece of information from the date or date-time object. mydate &lt;- ymd(&quot;1988-09-29&quot;) ## extract year information year(mydate) ## extract day of the month mday(mydate) ## extract weekday information wday(mydate) ## label with actual day of the week wday(mydate, label = TRUE) lubridate has specific functions to extract components from date and date-time objects 65.0.4 Time spans In addition to being able to look at trends by month or year, which requires being able to extract that component from a date or date-time object, it’s also important to be able to operate over dates. If I give you a date of birth and ask you how old that person is today, you’ll want to be able to calculate that. This is possible when working with date objects. By subtracting this birthdate from today’s date, you’ll learn now many days old this person is. By specifying this object using as.duration(), you’ll be able to extract how old this person is in years. ## how old is someone born on Sept 29, 1988 mydate &lt;- ymd(&quot;1988-09-29&quot;) ## subtract birthday from todays date age &lt;- today() - mydate age ## a duration object can get this information in years as.duration(age) dates and date-times can be operated upon Using addition, subtraction, multiplication, and division is possible with date objects, and accurately takes into account things like leap years and different number of days each month. This capability and the additional functions that exist within lubridate can be enormously helpful when working with dates and date-time objects. 65.0.5 What’s not covered in this lesson This lesson has not covered how to work with times, much detail about how to operate on date or date-time objects, nor how to deal with timezones in date-time objects. To learn more about these subjects, feel free to explore the additional resources below, or hold off for a later course in a different course set! 65.0.6 Additional Resources r4ds : Chapter 16 - Dates and times by Hadley Wickham lubridate, part of the tidyverse hms package, for working with time objects. This package is also part of the tidyverse 65.0.7 Slides and Video Working with Dates Slides "],["data-tidying.html", "Chapter 66 Data Tidying", " Chapter 66 Data Tidying Throughout this course set, we’ll have a number of projects for you to complete. These will be included as Exercises. This means they will not be required to pass the course and receive your certificate; however, completing them will really help to improve your understanding of the material covered and to ensure that you’ve begun to master the skills needed to be a data scientist. In each project, we’ll aim to get you started and to ask questions that will help guide you through the project. But, we’ll intentionally leave pieces out where you have to figure out what needs to be done. This first project will require you to: Read in data into R Wrangle and clean data Write data into a file You can access the first project by going to the exercise accompanying this lesson. "],["data-tidying-project.html", "Chapter 67 Data Tidying Project", " Chapter 67 Data Tidying Project Often times, data scientists are handed data and asked to make sense of them. The data scientist may be asked to figure out why people are getting sick in a city or how their employer can save money. No matter the situation, these data aren’t always in the most usable format. Data wrangling is required before any pretty visualizations can be made or interesting questions can be answered. As such, this exercise has been generated to practice your, GitHub, terminal navigation, RStudio, and data wrangling skills. 67.0.0.1 RStudio Cloud Setup Go to the Cloud-based Data Science Space on RStudio Cloud Click on the “Projects” tab at the top of the workspace Make a copy of the project: data_tidying_project In this project you should see a data_tidying_project.Rmd file. You’ll use this to get started working on your project! Note: If you try to Knit this document at this time, you will get an error because there is code in this document that has to be edited (by you!) before it will be able to successfully knit! To start using version control, you’ll want to clone the GitHub repository you just created into this workspace. To do so, go to the Terminal and clone your project into this workspace. A new directory with the name of your GitHub repository should now be viewable in the Files tab of RStudio Cloud. You are now set up to track your project with git. Why did you clone your GitHub repository into RStudio Cloud? 67.0.0.2 Data Science Project Setup As discussed previously, you’ll want all your data science projects you be organized from the very beginning. Let’s do that now! First, use cd to get yourself into the directory of your GitHub Project. Once in the correct directory, use mkdir in the terminal to create folders with the following structure: \\- data/ \\- raw_data/ \\- tidy_data/ \\- code/ \\- raw_code/ \\- final_code/ \\- figures/ \\- exploratory_figures/ \\- explanatory_figures/ \\- products/ Now that your directories are set up you’ll want to use the Terminal (or ‘More’ drop-down menu in the Files tab) to move (mv) the data_tidying_project.Rmd file into code/raw_code. This ensures that your code file is in the correct directory. In what directory did you save data_tidying_project.Rmd? Once the .Rmd document is in the correct folder, you’ll want to change the author of this document to your name at the top of the .Rmd document (in the YAML). Save this change before moving to the next step. Note: If you’re stuck on this, these steps were covered in detail in an earlier course: Organizing Data Science Projects. Refer to the materials in this course if you’re stuck on this part of the project. 67.0.0.3 The Data To get you started, let’s get you acquainted with the data. The data you’ll be working with are hosted at data.world and contain information about Sales in the US. You’ll be working with two datasets. Data Set 1: Sales from the Retail Trade and Food Services Report from the US Census. This dataset only covers Department Stores, though the report covers a wide range of retail types. [1992-2016] Data Set 2 US Retail Sales by Store Type with Growth Rate [2009-2014] 67.0.0.4 Getting the Data into R To get the data read into R, we’re going to use two packages: httr and readxl. These packages will be covered in the next course. As they haven’t been taught yet, we’ll have you use them here, but we’ll provide all the code you need in order to use them, rather than having you figure this part out on your own. You can see the code to get these data read into RStudio in the second code chunk (data) provided within data_tidying_project.Rmd. To read the data in, first run the code in the first code chunk ( setup) to get the necessary packages loaded into R. Then, run the code in the second code chunk (data) to load the data into R. In your Environment tab, you will see that there are two new objects, df1 and df2 that have been created. Once the data are read in, to take a look at these data you can use the glimpse() or View() functions in RStudio Cloud (i.e. View(df1) or glimpse(df1) 67.0.0.5 Saving the Raw Data While the data are available on the Internet, what if in the future they take them down? Then, you’ll have lost the data for your project or at the very least you won’t have access to it. To avoid this being a problem in the future, let’s save a copy of the data on RStudio Cloud now. You’ll want to save these data in the data/raw_data folder you created. We’ll save these as .rds objects. This means that each has to be saved separately using the saveRDS() function. Add the code to do this to the save-data code chunk in your data_tidying_project.Rmd document. Save df1 as ‘df_department.rds’ and df2 as df_retail.rds. What line of code did you use to save df1? 67.0.0.6 Wrangle the Data We’ll now work with the two datasets you read in, so that they’re in a usable (long) data format and can be merged into a single data frame. The wrangling portion of this project will use the skills you learned in Introduction to R and this course Data Tidying. Feel free to refer back to these materials for reference as you complete the project. 67.0.0.6.1 The retail data: df2 Now that you have the data in RStudio Cloud and have saved the raw data to your data/raw_data file, we’re ready to start wrangling data. To get you acquainted with the dataset, we’ll first have you answer a few questions about the dataset: df2 How many rows are there in df2 How many columns are there in df2 In 2014, what were the sales for used car dealers? Now, the goal of wrangling these data will be to take this data frame, which is currently in the wide data format and wrangle it into a long data format. The resulting data frame from your wrangling will have three columns: business, year, and n. In the data_tidying_project.Rmd document, you’ll see the code required to accomplish this in the wrangle-df2 code chunk. We recommend running each line at a time. For example, start by running: ## an example working with df2 ## let&#39;s wrangle! df_retail &lt;- df2 %&gt;% ## remove the r from the column names of df2 magrittr::set_colnames(gsub(&quot;r&quot;,&quot;&quot;,df2[1,])) Take a look at the output variable df_retail (using glimpse(), View(), or skim()) to see what the magrittr::set_colnames() code accomplishes. Once you understand this line, then move onto the next line and run: ## an example working with df2 ## let&#39;s wrangle! df_retail &lt;- df2 %&gt;% ## remove the r from the column names of df2 magrittr::set_colnames(gsub(&quot;r&quot;,&quot;&quot;,df2[1,])) %&gt;% ## add a new column called &quot;business&quot; mutate(business = gsub(&quot;[?]|[.]&quot;,&quot;&quot;,`Kind of business`)) Again, take a look at the output variable df_retail to understand this additional line of code. This will help you understand what each line of code does! And, you’ll understand why each step was taken to get the data into it’s final format. Continue this process until you understand the entire chunk of code in wrangle-df2. If you were to change the line mutate(business = gsub(\"[?]|[.]\",\"\",Kind of business)) to mutate(biz = gsub(\"[?]|[.]\",\"\",Kind of business)), what would change? What information is in the column n? What does filter(business == \"Retail sales, total \"| business==\"Department stores \") accomplish? 67.0.0.6.2 The department store data: df1 Having had all the code to wrangle df2 and being able to understand what each line did, now it’s your turn to wrangle a data frame! You’ll take We’ll first ask a few questions to get you acquainted with df1. How many rows are there in df1 How many columns are there in df1 In Jun-1992, what were retail sales (in millions)? Now that you have an idea of what data are in the data frame df, it’s time to wrangle! The goal of wrangling this data set is to mirror (or mimic) what we did in the first data set. This means, that by the end of data wrangling, you should have three columns with the same names as df_retail: business, year, and n. To accomplish this goal, you’ll have to figure out what code should replace function_name for each line in the code chunk wrangle-df1. A different function_name will be called in each line of missing code. The arguments necessary to be included within the parentheses will also have to be added. For example, for the first part of the code, you currently see in the df_department &lt;- df1 %&gt;% ## split Period column into one column called &quot;month&quot; and one called &quot;year&quot; function_name() The comment ## split Period column into one column called \"month\" and one called \"year\" tells you what you’ll want to accomplish in the next line of code. So, you may try adding the following: df_department &lt;- df1 %&gt;% ## split Period column into one column called &quot;month&quot; and one called &quot;year&quot; separate(Period, into = c(&#39;month&#39;,&#39;year&#39;), extra = &#39;drop&#39;, remove = FALSE) By changing function_name() to the appropriate function separate() and including the necessary code within the parentheses, we are able to accomplish exactly what the comment says we wanted to do! Before you get started on the rest of this, a quick note on data wrangling : As you master these skills, you will write code that errors and things will take you multiple tries before you get it right. If you’re frustrated, that’s ok! It’s part of the process. Use the material in this course or places like StackOverflow to help you if you find answers if you get stuck!. OK, now it’s your job to work line by line to change function_name to the appropriate function in order to accomplish what the comments state you want to accomplish. Work through this code chunk line by line until you have a long data set called df_department with three columns: business, year, and n. What function did you use to group the data by the year column? What function did you use to add the column name value? What function did you use to reorder the column names? 67.0.0.6.3 Merging the data Once you have wrangled both df1 and df2, you should be able to join them by binding the rows of df_retail and df_department. Change the code in the merge-data code chunk to generate an object called df_total. This should only take one function to accomplish. 67.0.0.6.4 Plotting Your Data While data visualization is coming up in a later course, we’ve included a few lines of code to plot the data from the three data frames you created (df_retail, df_department, df_total). For this you’ll use the R package ggplot2. Try running these lines of code in the plot chunk and take a look at the plots generated in the “Plots” tab of RStudio Cloud. However, don’t stress if you’re not exactly sure what’s going on. We’ll cover all of this in an upcoming course! 67.0.0.7 Add Markdown Text to .Rmd Before finalizing your project you’ll want to add some text outside of your code chunks to explain what you’re doing in each code chunk. These explanations are incredibly helpful for someone who doesn’t code. Note: If you’re stuck on this, these steps were covered in detail in an earlier course: Introduction to R. Refer to the R Markdown lesson in this course if you’re stuck on this part (or the next part) of the project. 67.0.0.8 Knit your R Markdown Document Last but not least, you’ll want to Knit your .Rmd document into an HTML document. If you get an error, take a look at what the error says and edit your .Rmd document. Then, try to Knit again! Troubleshooting these error messages will teach you a lot about coding in R. 67.0.0.9 Upload your Document to GoogleDrive In an upcoming chapter, we will show you how to more properly share your code using version control and a thing called GitHub, but for the time being, we will have you make this code more shareable by "],["motivation.html", "Chapter 68 Motivation", " Chapter 68 Motivation As you are starting to see, data science projects involve lots of files. There are files of data, files for code, files for documentation, figures, documents to communicate with other people. A surprising amount of doing data science really well is just being good at managing and organizing all of these files so that they are: Easy to find Easy to share Easy to understand Easy to update The reason that you need to make it easy to find and work with the files in your analysis is because data science is really closely related to communication. We use data is to understand the world and communicate that understanding. So when you are building a data science project, you should be thinking about who will be on the receiving end of your data analysis. While you are actively working on a project it is often easy to find any file you need off the top of your head. But the audience of your data analysis is not you, right now. One audience is other people who you will share your work with. They don’t know about all the different places you have stored data, or which piece of code to run first. You need to make it easy on them to be able to understand what you did. Two of your most common audiences in a data science project. Another audience that may surprise you when you are just starting, but will be familiar to any experienced data analyst is you. A twist on a famous saying about data science is: Your closest co-worker is you six months ago, but you don’t reply to emails. This is because it is really common for you to work on a data science project, present the results, and then move on to another project. But someone else is studying your results and might have questions and want you to make a change. So a few months later, when you’ve forgotten where everything is, they come back and ask you to make a minor change and you have to dive back in and figure out which files you need to look at. The reason you 6 months from now is one of your audience members. While this all seems like something very simple and common sense, this is where the biggest problems in data science often happen. Let me give you two quick examples. The first happened a few years ago. A research group from Duke university analyzed data about human genomes to try to develop a way to predict what chemotherapy each person should get based on their genetic code. They came up with what they thought was a good predictor and published it, then proceeded to start testing it in clinical studies. The exciting result, predicting chemotherapy success from genomic data. Researchers at MD Anderson got so excited about the result that they tried to find the data and code and do the same analysis as a first step to trying the predictor on their patients. But there was a problem, they couldn’t find the data or code. They tried getting it from the researchers at Duke, but it took months of back and forth getting a data set here, a file there, none of it too organized. Once they actually managed to get all of the files together and organized, they realized there were some major problems with the predictors that would probably put patients at risk! Two statisticians helped organize all the data and code from the project Ultimately this discovery shut down the clinical studies and led to a major lawsuit. While there were a lot of problems with the original analysis, the reason there was so much trouble was that the files and code weren’t organized so it took a long time to figure out the problems that would put patients at risk. It took a long time to do this organization and the delay meant erroneous clinical studies were carried out. Another famous example where file organization caused problems was with the scientific paper “Growth in a time of debt”. This paper was written by two Harvard economists and suggested that countries with a high level of debt have slow economic growth. Growth in the time of debt scientific paper. Unlike most academic papers this paper had a big impact! Many countries used this research to justify austerity measures that impacted social and healthcare programs around the world. But it turns out there were some choices the authors made that were questionable or changed their results. This mistake was so important that it was covered by popular shows like The Colbert Show on Comedy Central. The error was actually discovered by a student, but not until much much later. One reason it took so long is the data and analysis files weren’t easily available to everyone and organized in a way that the error could be easily identified. The errors in the analysis were discussed on the Colbert Report It isn’t just because of errors that you’d want to have organized files and projects. Whether it’s helping your future self, communicating a data science idea, or simply reducing your cognitive load, organizing projects from the start can save you a huge amount of time and hassle. As Jenny Bryan, one of the most famous data scientists in the world, says File organization and naming are powerful weapons against chaos. Jenny Byran says “File organization and naming are powerful weapons against chaos.” Another famous data scientist, Karl Broman, suggests that the best way to end up with a good file organization system has three steps. Step 1 slow down and make lots of notes for yourself. Step 2 have sympathy for your future self. Step 3 have a standard system that you understand A key challenge is that its sometimes hard to feel like file organization is “real work”. It isn’t coding, or making plots, or writing final documents. Sometimes, when working under a deadline, you will feel pressure to skip file organization in favor of quickly producing results and handing them off. But this never pays off in the long run, the results of poorly organized work almost always fail at some point further down the line. As a general rule of thumb it makes sense to budget 10-20% of the time you will be working on a data science project just to organizing and documenting your work. In the rest of this course we will cover one standard system for how to set up, organize, and navigate projects. Once you learn this system you can adapt it to work better for you, or try other ways of organizing your projects. 68.0.1 Slides and Video Motivation Slides "],["setting-up-data-science-project-folders.html", "Chapter 69 Setting Up Data Science Project Folders", " Chapter 69 Setting Up Data Science Project Folders As you are working on your project, you will want to keep track of your files and iteratively return to how to organize and name the folders and files in that project. Naming and organizing files seems very boring, but it one of the most important parts of any data science project! Not having the files or the data available is one of the most common reasons that errors are missed in data science projects. 69.0.1 A project organization framework We will set up data science projects on RStudio Cloud. Open your web browser and navigate to the website https://rstudio.cloud/. Go to RStudio Cloud Then log in and click on the project my_first_project. Click on my_first_project You should now see a screen that looks like this where there are three windows. The window in the lower right hand corner of the screen is the part that shows all the files you have in your project. Right now there shouldn’t be any files since we just created this project in the last lesson but didn’t do anything in the project. The RStudio Cloud interface showing the empty my_first_project Each time you start a new project you will need to create a set of folders for that project. You can create a new folder by clicking on New Folder at the top of the file window. Click New Folder to create a new folder. Then you can type in the name of the folder you want to create. First let’s create a folder called data. Name the folder data You should now see a folder called data in the file window. We now have a data folder in the files in the project. Next we will create a few more folders. For each one click the New Folder button, enter the name and click ok. Different projects may call for different organization schemes and folder set ups. The rules we give you here may not fit every project you work on. But this organizational scheme is a good start that you can iteratively evaluate and change as needed as you continue to work on your project. These folders represent the four parts of any data science project. raw_data - is the folder where you will put all the raw versions of the data you have collected or been given to analyze. tidy_data - is the folder where you will put cleaned versions of the data. results - is where you will put plots, data pictures, and other results you have created from your data. util - code that is not in Rmds, but is more background code that doesn’t need to be referenced as much is kept here. Now that we have these folders in place the next thing you need to create is a README file. This is a file where you will describe all of the data and projects you will be doing. Every project should have a README file so that you can keep notes on what you have done during your project. You will add to this README as your project expands. To create the README file click File at the top left hand part of Rstudio. Click on File to create a new file. then over over New File to show the types of new files you can create. Move the cursor down and click on Text File. Hover over New File and move the cursor to Text File. You should see a new screen open with the title Untitled like this. An untitled text file. To save the file click on the disk icon in the top left hand corner of the screen. Click on the disk icon to save. Then you can title the file README.md and click Save to save it. Name the file README.md. You should now see the README.md file in your file list on the bottom right of the screen. You have now saved the file README.md. The next thing to do is fill in the README file with the initial description of your project. For now you can copy this text and paste it into your README file, then click the save button. # This is the README file for my_first_project The folders in this project are: * _raw_data_ - all the raw versions of the data are kept here. * _tidy_data_ - cleaned versions of the data are here. * _results_ - results, figures and plots from our data are kept here * _util_ - code that is not in Rmds, but is more background is kept here. The README file can be used to describe both the high level organization as well as any important special cases about your project. It may be helpful to create additional README files in each subfolder to provide information specific to the files in that subfolder. You would want to link to them from the global README file you have just created. 69.0.2 The next level of organization This is the top level of the organization of a new data science project, but we will usually need to create a little more organization within each folder. For example if you click on the data folder you will see that it is empty. Click on the data folder. You can see at the top of the file organization tab that you are inside the folder data which is inside of the folder project. Click on the data folder. We need to create two new folders inside of the data folder, one for our raw data and one for our tidy data. You will learn a lot more about them later, but for now use the New Folder button Click on the New Folder button.. to create one folder called raw_data and another called tidy_data. Create raw_data and tidy_data folders. One way to write the folders we have now created is like this. data/ raw_data/ tidy_data/ results/ figures/ tables/ util/ Using the same steps we did for creating the folders inside of the data folder, you can create the rest of the folders you will need to organize your data science project. Every time you start a new project you will need to do these steps to set up the folders you will need to store all the files you will be creating. In the next lesson we will talk about how to name the files that will go in these folders. 69.0.3 Slides and Video Setting up data science project folders Slides "],["how-to-work.html", "Chapter 70 How to Work", " Chapter 70 How to Work 70.0.1 Why Organize? In the previous lessons we learned about how to organize our files into folders and how to name our files and folders. Doing this has the following benefits: Easier collaboration: You will see that as a data scientist, you will have to work with teams of other data scientists most of the time. Organizing makes collaboration a lot easier. Lower likelihood of making mistakes: When you organize, it is easier for you and others to see where you might have made a mistake before it’s too late. Easier recall: Going back to your analysis and understanding what you have done in 6 months or a year or even later will be a lot easier. If your project is not organized, it is very likely that you go back to your analysis and do not understand what you or your collaborator have previously done. More transparency and honesty on your part: This is because you make it easier for others to go through your files and replicate your analysis. Using the raw_data folder for keeping the raw data untouched is important especially if you don’t have a second copy of the raw data. If you make changes to and tidy up the raw data within your analysis, make sure you do not overwrite your raw data. It is important that you keep the raw data intact and instead add the cleaned and tidy data to the tidy_data folder. Next is using the raw_code folder for keeping your preliminary code. Let’s see what we mean by that. When you are doing the preliminary part of your analysis, code without any constraint, that is do not worry much about how nice your code looks or whether it is self-explanatory. Don’t devote much of your brain power to commenting or tidying at first. Save this kind of code in the raw_code folder since it’s raw and most of the time no one but you understands it. Later on, when you clean your code and make it more understandable, you can save bits and pieces of it in your final code file in the final_code folder. 70.0.2 The README File Once you have a file structure in place, it’s best to write a README file. This file should explain how the code and data are organized as well as how they are related. In other words, explain what is what. For each filename, we recommend to have a short description of what the file is for. You can also have a description of how the data were obtained or collected including links or references to publication or other documentation. Mention people involved with the project, and provide contact information of at least one of the collaborators. A good idea is to update the README file as you work. As you create new files and folders, add their descriptions to the README file so you can keep track of what you are working on. You might also make a more detailed README file, which includes a list of variables, units of measurement of each variable, definition of code and symbols used to deal with missing data, Licenses or restrictions on the content of the project including the data, and information about how others should cite your analysis. 70.0.3 Using Comments Our next piece of advice is that use comments within your code. Commenting in R is done by adding the pound sign (#). If you add the pound sign at the beginning of each line, R will not read that line as code and will instead skip it. So you can add your explanations about each chunk of code using the pound sign. This is an example of commenting: # calculates the products of a vector and a matrix # checks if they can be multiplied first function (x, y){ if (dim(x)[2] != length(y)) { stop(&quot;Can&#39;t multiply matrix%*%vector because the dimensions are wrong&quot;) } product &lt;- matrix %*% vector return(product) } Note that the first line describes what the function does. Commenting is helpful especially when the code is more complicated and harder to understand. Keep comments short and informative and avoid inserting comments for code that have an obvious purpose, i.e. don’t add comment for a line of code that adds two variables). 70.0.4 Write in a Modular Way One mistake in writing code is to have everything in one file. This is bad practice since fixing bugs and replicating the analysis would be much harder. Therefore, it is recommended that you write code in a modular way so that each group of code that do similar things can be put in a single file and the master file calls these individual files. The result is a much cleaner and shorter master file. 70.0.5 Slides and Video How To Work Slides "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
